/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  _int4: { input: any; output: any; }
  _text: { input: any; output: any; }
  date: { input: any; output: any; }
  numeric: { input: any; output: any; }
  time: { input: any; output: any; }
  timestamptz: { input: any; output: any; }
  uuid: { input: any; output: any; }
};

/** Contains Templates to be used by course participants to complete their achievements */
export type AchievementDocumentationTemplate = {
  __typename?: 'AchievementDocumentationTemplate';
  created_at: Scalars['timestamptz']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updated_at: Scalars['timestamptz']['output'];
  url: Scalars['String']['output'];
};

/** aggregated selection of "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Aggregate = {
  __typename?: 'AchievementDocumentationTemplate_aggregate';
  aggregate?: Maybe<AchievementDocumentationTemplate_Aggregate_Fields>;
  nodes: Array<AchievementDocumentationTemplate>;
};

/** aggregate fields of "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Aggregate_Fields = {
  __typename?: 'AchievementDocumentationTemplate_aggregate_fields';
  avg?: Maybe<AchievementDocumentationTemplate_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementDocumentationTemplate_Max_Fields>;
  min?: Maybe<AchievementDocumentationTemplate_Min_Fields>;
  stddev?: Maybe<AchievementDocumentationTemplate_Stddev_Fields>;
  stddev_pop?: Maybe<AchievementDocumentationTemplate_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AchievementDocumentationTemplate_Stddev_Samp_Fields>;
  sum?: Maybe<AchievementDocumentationTemplate_Sum_Fields>;
  var_pop?: Maybe<AchievementDocumentationTemplate_Var_Pop_Fields>;
  var_samp?: Maybe<AchievementDocumentationTemplate_Var_Samp_Fields>;
  variance?: Maybe<AchievementDocumentationTemplate_Variance_Fields>;
};


/** aggregate fields of "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementDocumentationTemplate_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type AchievementDocumentationTemplate_Avg_Fields = {
  __typename?: 'AchievementDocumentationTemplate_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "AchievementDocumentationTemplate". All fields are combined with a logical 'AND'. */
export type AchievementDocumentationTemplate_Bool_Exp = {
  _and?: InputMaybe<Array<AchievementDocumentationTemplate_Bool_Exp>>;
  _not?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementDocumentationTemplate_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  url?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementDocumentationTemplate" */
export enum AchievementDocumentationTemplate_Constraint {
  /** unique or primary key constraint on columns "id" */
  AchievementDocumentationTemplatePkey = 'AchievementDocumentationTemplate_pkey',
  /** unique or primary key constraint on columns "title" */
  AchievementDocumentationTemplateTitleKey = 'AchievementDocumentationTemplate_title_key'
}

/** input type for incrementing numeric columns in table "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Insert_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type AchievementDocumentationTemplate_Max_Fields = {
  __typename?: 'AchievementDocumentationTemplate_max_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type AchievementDocumentationTemplate_Min_Fields = {
  __typename?: 'AchievementDocumentationTemplate_min_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Mutation_Response = {
  __typename?: 'AchievementDocumentationTemplate_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementDocumentationTemplate>;
};

/** input type for inserting object relation for remote table "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Obj_Rel_Insert_Input = {
  data: AchievementDocumentationTemplate_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementDocumentationTemplate_On_Conflict>;
};

/** on_conflict condition type for table "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_On_Conflict = {
  constraint: AchievementDocumentationTemplate_Constraint;
  update_columns?: Array<AchievementDocumentationTemplate_Update_Column>;
  where?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementDocumentationTemplate". */
export type AchievementDocumentationTemplate_Order_By = {
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  url?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementDocumentationTemplate */
export type AchievementDocumentationTemplate_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "AchievementDocumentationTemplate" */
export enum AchievementDocumentationTemplate_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Set_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate stddev on columns */
export type AchievementDocumentationTemplate_Stddev_Fields = {
  __typename?: 'AchievementDocumentationTemplate_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type AchievementDocumentationTemplate_Stddev_Pop_Fields = {
  __typename?: 'AchievementDocumentationTemplate_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type AchievementDocumentationTemplate_Stddev_Samp_Fields = {
  __typename?: 'AchievementDocumentationTemplate_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "AchievementDocumentationTemplate" */
export type AchievementDocumentationTemplate_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementDocumentationTemplate_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementDocumentationTemplate_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate sum on columns */
export type AchievementDocumentationTemplate_Sum_Fields = {
  __typename?: 'AchievementDocumentationTemplate_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
};

/** update columns of table "AchievementDocumentationTemplate" */
export enum AchievementDocumentationTemplate_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Url = 'url'
}

export type AchievementDocumentationTemplate_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<AchievementDocumentationTemplate_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementDocumentationTemplate_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementDocumentationTemplate_Bool_Exp;
};

/** aggregate var_pop on columns */
export type AchievementDocumentationTemplate_Var_Pop_Fields = {
  __typename?: 'AchievementDocumentationTemplate_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type AchievementDocumentationTemplate_Var_Samp_Fields = {
  __typename?: 'AchievementDocumentationTemplate_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type AchievementDocumentationTemplate_Variance_Fields = {
  __typename?: 'AchievementDocumentationTemplate_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** A new row can be added by an admin or instructor to then make these achievement options available in specific courses. */
export type AchievementOption = {
  __typename?: 'AchievementOption';
  /** An array relationship */
  AchievementOptionCourses: Array<AchievementOptionCourse>;
  /** An aggregate relationship */
  AchievementOptionCourses_aggregate: AchievementOptionCourse_Aggregate;
  /** An array relationship */
  AchievementOptionMentors: Array<AchievementOptionMentor>;
  /** An aggregate relationship */
  AchievementOptionMentors_aggregate: AchievementOptionMentor_Aggregate;
  /** An object relationship */
  AchievementOptionTemplate?: Maybe<AchievementDocumentationTemplate>;
  /** An object relationship */
  AchievementRecordType: AchievementRecordType;
  /** An array relationship */
  AchievementRecords: Array<AchievementRecord>;
  /** An aggregate relationship */
  AchievementRecords_aggregate: AchievementRecord_Aggregate;
  achievementDocumentationTemplateId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: Maybe<Scalars['String']['output']>;
  /** Description of an offered achievement option */
  description?: Maybe<Scalars['String']['output']>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  published: Scalars['Boolean']['output'];
  /** Type of the achivement record that must be uploaded for this option */
  recordType: AchievementRecordType_Enum;
  /** For TRUE the score table will include a column showing the authors; for FALSE the scores will be anonymous. */
  showScoreAuthors?: Maybe<Scalars['Boolean']['output']>;
  /** Title of an offered achievement option */
  title: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};


/** A new row can be added by an admin or instructor to then make these achievement options available in specific courses. */
export type AchievementOptionAchievementOptionCoursesArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


/** A new row can be added by an admin or instructor to then make these achievement options available in specific courses. */
export type AchievementOptionAchievementOptionCourses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


/** A new row can be added by an admin or instructor to then make these achievement options available in specific courses. */
export type AchievementOptionAchievementOptionMentorsArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


/** A new row can be added by an admin or instructor to then make these achievement options available in specific courses. */
export type AchievementOptionAchievementOptionMentors_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


/** A new row can be added by an admin or instructor to then make these achievement options available in specific courses. */
export type AchievementOptionAchievementRecordsArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};


/** A new row can be added by an admin or instructor to then make these achievement options available in specific courses. */
export type AchievementOptionAchievementRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};

/** A new row is added when an achievement option is added to a course by the respective course instructor or an admin. */
export type AchievementOptionCourse = {
  __typename?: 'AchievementOptionCourse';
  /** An object relationship */
  AchievementOption: AchievementOption;
  /** An object relationship */
  Course: Course;
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId: Scalars['Int']['output'];
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId: Scalars['Int']['output'];
  created_at: Scalars['timestamptz']['output'];
  id: Scalars['Int']['output'];
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "AchievementOptionCourse" */
export type AchievementOptionCourse_Aggregate = {
  __typename?: 'AchievementOptionCourse_aggregate';
  aggregate?: Maybe<AchievementOptionCourse_Aggregate_Fields>;
  nodes: Array<AchievementOptionCourse>;
};

export type AchievementOptionCourse_Aggregate_Bool_Exp = {
  count?: InputMaybe<AchievementOptionCourse_Aggregate_Bool_Exp_Count>;
};

export type AchievementOptionCourse_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "AchievementOptionCourse" */
export type AchievementOptionCourse_Aggregate_Fields = {
  __typename?: 'AchievementOptionCourse_aggregate_fields';
  avg?: Maybe<AchievementOptionCourse_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementOptionCourse_Max_Fields>;
  min?: Maybe<AchievementOptionCourse_Min_Fields>;
  stddev?: Maybe<AchievementOptionCourse_Stddev_Fields>;
  stddev_pop?: Maybe<AchievementOptionCourse_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AchievementOptionCourse_Stddev_Samp_Fields>;
  sum?: Maybe<AchievementOptionCourse_Sum_Fields>;
  var_pop?: Maybe<AchievementOptionCourse_Var_Pop_Fields>;
  var_samp?: Maybe<AchievementOptionCourse_Var_Samp_Fields>;
  variance?: Maybe<AchievementOptionCourse_Variance_Fields>;
};


/** aggregate fields of "AchievementOptionCourse" */
export type AchievementOptionCourse_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Aggregate_Order_By = {
  avg?: InputMaybe<AchievementOptionCourse_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<AchievementOptionCourse_Max_Order_By>;
  min?: InputMaybe<AchievementOptionCourse_Min_Order_By>;
  stddev?: InputMaybe<AchievementOptionCourse_Stddev_Order_By>;
  stddev_pop?: InputMaybe<AchievementOptionCourse_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<AchievementOptionCourse_Stddev_Samp_Order_By>;
  sum?: InputMaybe<AchievementOptionCourse_Sum_Order_By>;
  var_pop?: InputMaybe<AchievementOptionCourse_Var_Pop_Order_By>;
  var_samp?: InputMaybe<AchievementOptionCourse_Var_Samp_Order_By>;
  variance?: InputMaybe<AchievementOptionCourse_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "AchievementOptionCourse" */
export type AchievementOptionCourse_Arr_Rel_Insert_Input = {
  data: Array<AchievementOptionCourse_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementOptionCourse_On_Conflict>;
};

/** aggregate avg on columns */
export type AchievementOptionCourse_Avg_Fields = {
  __typename?: 'AchievementOptionCourse_avg_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Avg_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "AchievementOptionCourse". All fields are combined with a logical 'AND'. */
export type AchievementOptionCourse_Bool_Exp = {
  AchievementOption?: InputMaybe<AchievementOption_Bool_Exp>;
  Course?: InputMaybe<Course_Bool_Exp>;
  _and?: InputMaybe<Array<AchievementOptionCourse_Bool_Exp>>;
  _not?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementOptionCourse_Bool_Exp>>;
  achievementOptionId?: InputMaybe<Int_Comparison_Exp>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementOptionCourse" */
export enum AchievementOptionCourse_Constraint {
  /** unique or primary key constraint on columns "id" */
  AchievementOptionCoursePkey = 'AchievementOptionCourse_pkey'
}

/** input type for incrementing numeric columns in table "AchievementOptionCourse" */
export type AchievementOptionCourse_Inc_Input = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "AchievementOptionCourse" */
export type AchievementOptionCourse_Insert_Input = {
  AchievementOption?: InputMaybe<AchievementOption_Obj_Rel_Insert_Input>;
  Course?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type AchievementOptionCourse_Max_Fields = {
  __typename?: 'AchievementOptionCourse_max_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Max_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type AchievementOptionCourse_Min_Fields = {
  __typename?: 'AchievementOptionCourse_min_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Min_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "AchievementOptionCourse" */
export type AchievementOptionCourse_Mutation_Response = {
  __typename?: 'AchievementOptionCourse_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementOptionCourse>;
};

/** on_conflict condition type for table "AchievementOptionCourse" */
export type AchievementOptionCourse_On_Conflict = {
  constraint: AchievementOptionCourse_Constraint;
  update_columns?: Array<AchievementOptionCourse_Update_Column>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementOptionCourse". */
export type AchievementOptionCourse_Order_By = {
  AchievementOption?: InputMaybe<AchievementOption_Order_By>;
  Course?: InputMaybe<Course_Order_By>;
  achievementOptionId?: InputMaybe<Order_By>;
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementOptionCourse */
export type AchievementOptionCourse_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "AchievementOptionCourse" */
export enum AchievementOptionCourse_Select_Column {
  /** column name */
  AchievementOptionId = 'achievementOptionId',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "AchievementOptionCourse" */
export type AchievementOptionCourse_Set_Input = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type AchievementOptionCourse_Stddev_Fields = {
  __typename?: 'AchievementOptionCourse_stddev_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Stddev_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type AchievementOptionCourse_Stddev_Pop_Fields = {
  __typename?: 'AchievementOptionCourse_stddev_pop_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Stddev_Pop_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type AchievementOptionCourse_Stddev_Samp_Fields = {
  __typename?: 'AchievementOptionCourse_stddev_samp_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Stddev_Samp_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "AchievementOptionCourse" */
export type AchievementOptionCourse_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementOptionCourse_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementOptionCourse_Stream_Cursor_Value_Input = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type AchievementOptionCourse_Sum_Fields = {
  __typename?: 'AchievementOptionCourse_sum_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Sum_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "AchievementOptionCourse" */
export enum AchievementOptionCourse_Update_Column {
  /** column name */
  AchievementOptionId = 'achievementOptionId',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type AchievementOptionCourse_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<AchievementOptionCourse_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementOptionCourse_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementOptionCourse_Bool_Exp;
};

/** aggregate var_pop on columns */
export type AchievementOptionCourse_Var_Pop_Fields = {
  __typename?: 'AchievementOptionCourse_var_pop_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Var_Pop_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type AchievementOptionCourse_Var_Samp_Fields = {
  __typename?: 'AchievementOptionCourse_var_samp_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Var_Samp_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type AchievementOptionCourse_Variance_Fields = {
  __typename?: 'AchievementOptionCourse_variance_fields';
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "AchievementOptionCourse" */
export type AchievementOptionCourse_Variance_Order_By = {
  /** ID of an achievement option that can be selected for a given course */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of a course for which this achievement optoin can be selected to provided an achievement record. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** A new row is added for each expert added as mentor to an achievement option. */
export type AchievementOptionMentor = {
  __typename?: 'AchievementOptionMentor';
  /** An object relationship */
  AchievementOption: AchievementOption;
  /** An object relationship */
  User: User;
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId: Scalars['Int']['output'];
  created_at: Scalars['timestamptz']['output'];
  id: Scalars['Int']['output'];
  updated_at: Scalars['timestamptz']['output'];
  /** ID of an expert that is mentor for an achievement option */
  userId: Scalars['uuid']['output'];
};

/** aggregated selection of "AchievementOptionMentor" */
export type AchievementOptionMentor_Aggregate = {
  __typename?: 'AchievementOptionMentor_aggregate';
  aggregate?: Maybe<AchievementOptionMentor_Aggregate_Fields>;
  nodes: Array<AchievementOptionMentor>;
};

export type AchievementOptionMentor_Aggregate_Bool_Exp = {
  count?: InputMaybe<AchievementOptionMentor_Aggregate_Bool_Exp_Count>;
};

export type AchievementOptionMentor_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "AchievementOptionMentor" */
export type AchievementOptionMentor_Aggregate_Fields = {
  __typename?: 'AchievementOptionMentor_aggregate_fields';
  avg?: Maybe<AchievementOptionMentor_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementOptionMentor_Max_Fields>;
  min?: Maybe<AchievementOptionMentor_Min_Fields>;
  stddev?: Maybe<AchievementOptionMentor_Stddev_Fields>;
  stddev_pop?: Maybe<AchievementOptionMentor_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AchievementOptionMentor_Stddev_Samp_Fields>;
  sum?: Maybe<AchievementOptionMentor_Sum_Fields>;
  var_pop?: Maybe<AchievementOptionMentor_Var_Pop_Fields>;
  var_samp?: Maybe<AchievementOptionMentor_Var_Samp_Fields>;
  variance?: Maybe<AchievementOptionMentor_Variance_Fields>;
};


/** aggregate fields of "AchievementOptionMentor" */
export type AchievementOptionMentor_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Aggregate_Order_By = {
  avg?: InputMaybe<AchievementOptionMentor_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<AchievementOptionMentor_Max_Order_By>;
  min?: InputMaybe<AchievementOptionMentor_Min_Order_By>;
  stddev?: InputMaybe<AchievementOptionMentor_Stddev_Order_By>;
  stddev_pop?: InputMaybe<AchievementOptionMentor_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<AchievementOptionMentor_Stddev_Samp_Order_By>;
  sum?: InputMaybe<AchievementOptionMentor_Sum_Order_By>;
  var_pop?: InputMaybe<AchievementOptionMentor_Var_Pop_Order_By>;
  var_samp?: InputMaybe<AchievementOptionMentor_Var_Samp_Order_By>;
  variance?: InputMaybe<AchievementOptionMentor_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "AchievementOptionMentor" */
export type AchievementOptionMentor_Arr_Rel_Insert_Input = {
  data: Array<AchievementOptionMentor_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementOptionMentor_On_Conflict>;
};

/** aggregate avg on columns */
export type AchievementOptionMentor_Avg_Fields = {
  __typename?: 'AchievementOptionMentor_avg_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Avg_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "AchievementOptionMentor". All fields are combined with a logical 'AND'. */
export type AchievementOptionMentor_Bool_Exp = {
  AchievementOption?: InputMaybe<AchievementOption_Bool_Exp>;
  User?: InputMaybe<User_Bool_Exp>;
  _and?: InputMaybe<Array<AchievementOptionMentor_Bool_Exp>>;
  _not?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementOptionMentor_Bool_Exp>>;
  achievementOptionId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementOptionMentor" */
export enum AchievementOptionMentor_Constraint {
  /** unique or primary key constraint on columns "id" */
  AchievementOptionMentorPkey = 'AchievementOptionMentor_pkey'
}

/** input type for incrementing numeric columns in table "AchievementOptionMentor" */
export type AchievementOptionMentor_Inc_Input = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "AchievementOptionMentor" */
export type AchievementOptionMentor_Insert_Input = {
  AchievementOption?: InputMaybe<AchievementOption_Obj_Rel_Insert_Input>;
  User?: InputMaybe<User_Obj_Rel_Insert_Input>;
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of an expert that is mentor for an achievement option */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type AchievementOptionMentor_Max_Fields = {
  __typename?: 'AchievementOptionMentor_max_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of an expert that is mentor for an achievement option */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Max_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** ID of an expert that is mentor for an achievement option */
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type AchievementOptionMentor_Min_Fields = {
  __typename?: 'AchievementOptionMentor_min_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of an expert that is mentor for an achievement option */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Min_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** ID of an expert that is mentor for an achievement option */
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "AchievementOptionMentor" */
export type AchievementOptionMentor_Mutation_Response = {
  __typename?: 'AchievementOptionMentor_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementOptionMentor>;
};

/** on_conflict condition type for table "AchievementOptionMentor" */
export type AchievementOptionMentor_On_Conflict = {
  constraint: AchievementOptionMentor_Constraint;
  update_columns?: Array<AchievementOptionMentor_Update_Column>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementOptionMentor". */
export type AchievementOptionMentor_Order_By = {
  AchievementOption?: InputMaybe<AchievementOption_Order_By>;
  User?: InputMaybe<User_Order_By>;
  achievementOptionId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementOptionMentor */
export type AchievementOptionMentor_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "AchievementOptionMentor" */
export enum AchievementOptionMentor_Select_Column {
  /** column name */
  AchievementOptionId = 'achievementOptionId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "AchievementOptionMentor" */
export type AchievementOptionMentor_Set_Input = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of an expert that is mentor for an achievement option */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type AchievementOptionMentor_Stddev_Fields = {
  __typename?: 'AchievementOptionMentor_stddev_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Stddev_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type AchievementOptionMentor_Stddev_Pop_Fields = {
  __typename?: 'AchievementOptionMentor_stddev_pop_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Stddev_Pop_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type AchievementOptionMentor_Stddev_Samp_Fields = {
  __typename?: 'AchievementOptionMentor_stddev_samp_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Stddev_Samp_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "AchievementOptionMentor" */
export type AchievementOptionMentor_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementOptionMentor_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementOptionMentor_Stream_Cursor_Value_Input = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of an expert that is mentor for an achievement option */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type AchievementOptionMentor_Sum_Fields = {
  __typename?: 'AchievementOptionMentor_sum_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Sum_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "AchievementOptionMentor" */
export enum AchievementOptionMentor_Update_Column {
  /** column name */
  AchievementOptionId = 'achievementOptionId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

export type AchievementOptionMentor_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<AchievementOptionMentor_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementOptionMentor_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementOptionMentor_Bool_Exp;
};

/** aggregate var_pop on columns */
export type AchievementOptionMentor_Var_Pop_Fields = {
  __typename?: 'AchievementOptionMentor_var_pop_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Var_Pop_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type AchievementOptionMentor_Var_Samp_Fields = {
  __typename?: 'AchievementOptionMentor_var_samp_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Var_Samp_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type AchievementOptionMentor_Variance_Fields = {
  __typename?: 'AchievementOptionMentor_variance_fields';
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "AchievementOptionMentor" */
export type AchievementOptionMentor_Variance_Order_By = {
  /** ID of an achievement option mentored by a specific expert */
  achievementOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregated selection of "AchievementOption" */
export type AchievementOption_Aggregate = {
  __typename?: 'AchievementOption_aggregate';
  aggregate?: Maybe<AchievementOption_Aggregate_Fields>;
  nodes: Array<AchievementOption>;
};

export type AchievementOption_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<AchievementOption_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<AchievementOption_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<AchievementOption_Aggregate_Bool_Exp_Count>;
};

export type AchievementOption_Aggregate_Bool_Exp_Bool_And = {
  arguments: AchievementOption_Select_Column_AchievementOption_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AchievementOption_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type AchievementOption_Aggregate_Bool_Exp_Bool_Or = {
  arguments: AchievementOption_Select_Column_AchievementOption_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AchievementOption_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type AchievementOption_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<AchievementOption_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AchievementOption_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "AchievementOption" */
export type AchievementOption_Aggregate_Fields = {
  __typename?: 'AchievementOption_aggregate_fields';
  avg?: Maybe<AchievementOption_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementOption_Max_Fields>;
  min?: Maybe<AchievementOption_Min_Fields>;
  stddev?: Maybe<AchievementOption_Stddev_Fields>;
  stddev_pop?: Maybe<AchievementOption_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AchievementOption_Stddev_Samp_Fields>;
  sum?: Maybe<AchievementOption_Sum_Fields>;
  var_pop?: Maybe<AchievementOption_Var_Pop_Fields>;
  var_samp?: Maybe<AchievementOption_Var_Samp_Fields>;
  variance?: Maybe<AchievementOption_Variance_Fields>;
};


/** aggregate fields of "AchievementOption" */
export type AchievementOption_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementOption_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "AchievementOption" */
export type AchievementOption_Aggregate_Order_By = {
  avg?: InputMaybe<AchievementOption_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<AchievementOption_Max_Order_By>;
  min?: InputMaybe<AchievementOption_Min_Order_By>;
  stddev?: InputMaybe<AchievementOption_Stddev_Order_By>;
  stddev_pop?: InputMaybe<AchievementOption_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<AchievementOption_Stddev_Samp_Order_By>;
  sum?: InputMaybe<AchievementOption_Sum_Order_By>;
  var_pop?: InputMaybe<AchievementOption_Var_Pop_Order_By>;
  var_samp?: InputMaybe<AchievementOption_Var_Samp_Order_By>;
  variance?: InputMaybe<AchievementOption_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "AchievementOption" */
export type AchievementOption_Arr_Rel_Insert_Input = {
  data: Array<AchievementOption_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementOption_On_Conflict>;
};

/** aggregate avg on columns */
export type AchievementOption_Avg_Fields = {
  __typename?: 'AchievementOption_avg_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "AchievementOption" */
export type AchievementOption_Avg_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "AchievementOption". All fields are combined with a logical 'AND'. */
export type AchievementOption_Bool_Exp = {
  AchievementOptionCourses?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
  AchievementOptionCourses_aggregate?: InputMaybe<AchievementOptionCourse_Aggregate_Bool_Exp>;
  AchievementOptionMentors?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
  AchievementOptionMentors_aggregate?: InputMaybe<AchievementOptionMentor_Aggregate_Bool_Exp>;
  AchievementOptionTemplate?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
  AchievementRecordType?: InputMaybe<AchievementRecordType_Bool_Exp>;
  AchievementRecords?: InputMaybe<AchievementRecord_Bool_Exp>;
  AchievementRecords_aggregate?: InputMaybe<AchievementRecord_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<AchievementOption_Bool_Exp>>;
  _not?: InputMaybe<AchievementOption_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementOption_Bool_Exp>>;
  achievementDocumentationTemplateId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  csvTemplateUrl?: InputMaybe<String_Comparison_Exp>;
  description?: InputMaybe<String_Comparison_Exp>;
  evaluationScriptUrl?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  published?: InputMaybe<Boolean_Comparison_Exp>;
  recordType?: InputMaybe<AchievementRecordType_Enum_Comparison_Exp>;
  showScoreAuthors?: InputMaybe<Boolean_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementOption" */
export enum AchievementOption_Constraint {
  /** unique or primary key constraint on columns "id" */
  AchievementOptionPkey = 'AchievementOption_pkey'
}

/** input type for incrementing numeric columns in table "AchievementOption" */
export type AchievementOption_Inc_Input = {
  achievementDocumentationTemplateId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "AchievementOption" */
export type AchievementOption_Insert_Input = {
  AchievementOptionCourses?: InputMaybe<AchievementOptionCourse_Arr_Rel_Insert_Input>;
  AchievementOptionMentors?: InputMaybe<AchievementOptionMentor_Arr_Rel_Insert_Input>;
  AchievementOptionTemplate?: InputMaybe<AchievementDocumentationTemplate_Obj_Rel_Insert_Input>;
  AchievementRecordType?: InputMaybe<AchievementRecordType_Obj_Rel_Insert_Input>;
  AchievementRecords?: InputMaybe<AchievementRecord_Arr_Rel_Insert_Input>;
  achievementDocumentationTemplateId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: InputMaybe<Scalars['String']['input']>;
  /** Description of an offered achievement option */
  description?: InputMaybe<Scalars['String']['input']>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** Type of the achivement record that must be uploaded for this option */
  recordType?: InputMaybe<AchievementRecordType_Enum>;
  /** For TRUE the score table will include a column showing the authors; for FALSE the scores will be anonymous. */
  showScoreAuthors?: InputMaybe<Scalars['Boolean']['input']>;
  /** Title of an offered achievement option */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type AchievementOption_Max_Fields = {
  __typename?: 'AchievementOption_max_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: Maybe<Scalars['String']['output']>;
  /** Description of an offered achievement option */
  description?: Maybe<Scalars['String']['output']>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** Title of an offered achievement option */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "AchievementOption" */
export type AchievementOption_Max_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: InputMaybe<Order_By>;
  /** Description of an offered achievement option */
  description?: InputMaybe<Order_By>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Title of an offered achievement option */
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type AchievementOption_Min_Fields = {
  __typename?: 'AchievementOption_min_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: Maybe<Scalars['String']['output']>;
  /** Description of an offered achievement option */
  description?: Maybe<Scalars['String']['output']>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** Title of an offered achievement option */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "AchievementOption" */
export type AchievementOption_Min_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: InputMaybe<Order_By>;
  /** Description of an offered achievement option */
  description?: InputMaybe<Order_By>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Title of an offered achievement option */
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "AchievementOption" */
export type AchievementOption_Mutation_Response = {
  __typename?: 'AchievementOption_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementOption>;
};

/** input type for inserting object relation for remote table "AchievementOption" */
export type AchievementOption_Obj_Rel_Insert_Input = {
  data: AchievementOption_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementOption_On_Conflict>;
};

/** on_conflict condition type for table "AchievementOption" */
export type AchievementOption_On_Conflict = {
  constraint: AchievementOption_Constraint;
  update_columns?: Array<AchievementOption_Update_Column>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementOption". */
export type AchievementOption_Order_By = {
  AchievementOptionCourses_aggregate?: InputMaybe<AchievementOptionCourse_Aggregate_Order_By>;
  AchievementOptionMentors_aggregate?: InputMaybe<AchievementOptionMentor_Aggregate_Order_By>;
  AchievementOptionTemplate?: InputMaybe<AchievementDocumentationTemplate_Order_By>;
  AchievementRecordType?: InputMaybe<AchievementRecordType_Order_By>;
  AchievementRecords_aggregate?: InputMaybe<AchievementRecord_Aggregate_Order_By>;
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  csvTemplateUrl?: InputMaybe<Order_By>;
  description?: InputMaybe<Order_By>;
  evaluationScriptUrl?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  published?: InputMaybe<Order_By>;
  recordType?: InputMaybe<Order_By>;
  showScoreAuthors?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementOption */
export type AchievementOption_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "AchievementOption" */
export enum AchievementOption_Select_Column {
  /** column name */
  AchievementDocumentationTemplateId = 'achievementDocumentationTemplateId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CsvTemplateUrl = 'csvTemplateUrl',
  /** column name */
  Description = 'description',
  /** column name */
  EvaluationScriptUrl = 'evaluationScriptUrl',
  /** column name */
  Id = 'id',
  /** column name */
  Published = 'published',
  /** column name */
  RecordType = 'recordType',
  /** column name */
  ShowScoreAuthors = 'showScoreAuthors',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** select "AchievementOption_aggregate_bool_exp_bool_and_arguments_columns" columns of table "AchievementOption" */
export enum AchievementOption_Select_Column_AchievementOption_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  Published = 'published',
  /** column name */
  ShowScoreAuthors = 'showScoreAuthors'
}

/** select "AchievementOption_aggregate_bool_exp_bool_or_arguments_columns" columns of table "AchievementOption" */
export enum AchievementOption_Select_Column_AchievementOption_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  Published = 'published',
  /** column name */
  ShowScoreAuthors = 'showScoreAuthors'
}

/** input type for updating data in table "AchievementOption" */
export type AchievementOption_Set_Input = {
  achievementDocumentationTemplateId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: InputMaybe<Scalars['String']['input']>;
  /** Description of an offered achievement option */
  description?: InputMaybe<Scalars['String']['input']>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** Type of the achivement record that must be uploaded for this option */
  recordType?: InputMaybe<AchievementRecordType_Enum>;
  /** For TRUE the score table will include a column showing the authors; for FALSE the scores will be anonymous. */
  showScoreAuthors?: InputMaybe<Scalars['Boolean']['input']>;
  /** Title of an offered achievement option */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type AchievementOption_Stddev_Fields = {
  __typename?: 'AchievementOption_stddev_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "AchievementOption" */
export type AchievementOption_Stddev_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type AchievementOption_Stddev_Pop_Fields = {
  __typename?: 'AchievementOption_stddev_pop_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "AchievementOption" */
export type AchievementOption_Stddev_Pop_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type AchievementOption_Stddev_Samp_Fields = {
  __typename?: 'AchievementOption_stddev_samp_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "AchievementOption" */
export type AchievementOption_Stddev_Samp_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "AchievementOption" */
export type AchievementOption_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementOption_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementOption_Stream_Cursor_Value_Input = {
  achievementDocumentationTemplateId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** URL to the template that shall be used for uploading csv data for a new achievement record */
  csvTemplateUrl?: InputMaybe<Scalars['String']['input']>;
  /** Description of an offered achievement option */
  description?: InputMaybe<Scalars['String']['input']>;
  /** If the record tye is "DOCUMENTATION_AND_CSV" an URL to a python script can be provided that returns a score for uploaded csv data. */
  evaluationScriptUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** Type of the achivement record that must be uploaded for this option */
  recordType?: InputMaybe<AchievementRecordType_Enum>;
  /** For TRUE the score table will include a column showing the authors; for FALSE the scores will be anonymous. */
  showScoreAuthors?: InputMaybe<Scalars['Boolean']['input']>;
  /** Title of an offered achievement option */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type AchievementOption_Sum_Fields = {
  __typename?: 'AchievementOption_sum_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "AchievementOption" */
export type AchievementOption_Sum_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "AchievementOption" */
export enum AchievementOption_Update_Column {
  /** column name */
  AchievementDocumentationTemplateId = 'achievementDocumentationTemplateId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CsvTemplateUrl = 'csvTemplateUrl',
  /** column name */
  Description = 'description',
  /** column name */
  EvaluationScriptUrl = 'evaluationScriptUrl',
  /** column name */
  Id = 'id',
  /** column name */
  Published = 'published',
  /** column name */
  RecordType = 'recordType',
  /** column name */
  ShowScoreAuthors = 'showScoreAuthors',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type AchievementOption_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<AchievementOption_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementOption_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementOption_Bool_Exp;
};

/** aggregate var_pop on columns */
export type AchievementOption_Var_Pop_Fields = {
  __typename?: 'AchievementOption_var_pop_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "AchievementOption" */
export type AchievementOption_Var_Pop_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type AchievementOption_Var_Samp_Fields = {
  __typename?: 'AchievementOption_var_samp_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "AchievementOption" */
export type AchievementOption_Var_Samp_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type AchievementOption_Variance_Fields = {
  __typename?: 'AchievementOption_variance_fields';
  achievementDocumentationTemplateId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "AchievementOption" */
export type AchievementOption_Variance_Order_By = {
  achievementDocumentationTemplateId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** A new row is created whenever a user uploads a new record for an achievement option. */
export type AchievementRecord = {
  __typename?: 'AchievementRecord';
  /** An object relationship */
  AchievementOption: AchievementOption;
  /** An array relationship */
  AchievementRecordAuthors: Array<AchievementRecordAuthor>;
  /** An aggregate relationship */
  AchievementRecordAuthors_aggregate: AchievementRecordAuthor_Aggregate;
  /** An object relationship */
  AchievementRecordRating: AchievementRecordRating;
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId: Scalars['Int']['output'];
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Int']['output']>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: Maybe<Scalars['String']['output']>;
  /** Description that will be used in the project gallery */
  description?: Maybe<Scalars['String']['output']>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: Maybe<Scalars['String']['output']>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** The course instructor's or mentor's rating for the achievement record */
  rating: AchievementRecordRating_Enum;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['numeric']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the user who uploaded the record */
  uploadUserId: Scalars['uuid']['output'];
};


/** A new row is created whenever a user uploads a new record for an achievement option. */
export type AchievementRecordAchievementRecordAuthorsArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


/** A new row is created whenever a user uploads a new record for an achievement option. */
export type AchievementRecordAchievementRecordAuthors_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};

/** A new row is added for each user selected as author in the modal to upload an achievement record. */
export type AchievementRecordAuthor = {
  __typename?: 'AchievementRecordAuthor';
  /** An object relationship */
  AchievementRecord: AchievementRecord;
  /** An object relationship */
  User: User;
  /** ID of an uploaded achievement record */
  achievementRecordId: Scalars['Int']['output'];
  created_at: Scalars['timestamptz']['output'];
  id: Scalars['Int']['output'];
  updated_at: Scalars['timestamptz']['output'];
  /** ID of a user that is author of an uploaded achievement record */
  userId: Scalars['uuid']['output'];
};

/** aggregated selection of "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Aggregate = {
  __typename?: 'AchievementRecordAuthor_aggregate';
  aggregate?: Maybe<AchievementRecordAuthor_Aggregate_Fields>;
  nodes: Array<AchievementRecordAuthor>;
};

export type AchievementRecordAuthor_Aggregate_Bool_Exp = {
  count?: InputMaybe<AchievementRecordAuthor_Aggregate_Bool_Exp_Count>;
};

export type AchievementRecordAuthor_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Aggregate_Fields = {
  __typename?: 'AchievementRecordAuthor_aggregate_fields';
  avg?: Maybe<AchievementRecordAuthor_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementRecordAuthor_Max_Fields>;
  min?: Maybe<AchievementRecordAuthor_Min_Fields>;
  stddev?: Maybe<AchievementRecordAuthor_Stddev_Fields>;
  stddev_pop?: Maybe<AchievementRecordAuthor_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AchievementRecordAuthor_Stddev_Samp_Fields>;
  sum?: Maybe<AchievementRecordAuthor_Sum_Fields>;
  var_pop?: Maybe<AchievementRecordAuthor_Var_Pop_Fields>;
  var_samp?: Maybe<AchievementRecordAuthor_Var_Samp_Fields>;
  variance?: Maybe<AchievementRecordAuthor_Variance_Fields>;
};


/** aggregate fields of "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Aggregate_Order_By = {
  avg?: InputMaybe<AchievementRecordAuthor_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<AchievementRecordAuthor_Max_Order_By>;
  min?: InputMaybe<AchievementRecordAuthor_Min_Order_By>;
  stddev?: InputMaybe<AchievementRecordAuthor_Stddev_Order_By>;
  stddev_pop?: InputMaybe<AchievementRecordAuthor_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<AchievementRecordAuthor_Stddev_Samp_Order_By>;
  sum?: InputMaybe<AchievementRecordAuthor_Sum_Order_By>;
  var_pop?: InputMaybe<AchievementRecordAuthor_Var_Pop_Order_By>;
  var_samp?: InputMaybe<AchievementRecordAuthor_Var_Samp_Order_By>;
  variance?: InputMaybe<AchievementRecordAuthor_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Arr_Rel_Insert_Input = {
  data: Array<AchievementRecordAuthor_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementRecordAuthor_On_Conflict>;
};

/** aggregate avg on columns */
export type AchievementRecordAuthor_Avg_Fields = {
  __typename?: 'AchievementRecordAuthor_avg_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Avg_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "AchievementRecordAuthor". All fields are combined with a logical 'AND'. */
export type AchievementRecordAuthor_Bool_Exp = {
  AchievementRecord?: InputMaybe<AchievementRecord_Bool_Exp>;
  User?: InputMaybe<User_Bool_Exp>;
  _and?: InputMaybe<Array<AchievementRecordAuthor_Bool_Exp>>;
  _not?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementRecordAuthor_Bool_Exp>>;
  achievementRecordId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementRecordAuthor" */
export enum AchievementRecordAuthor_Constraint {
  /** unique or primary key constraint on columns "id" */
  AchievementRecordAuthorPkey = 'AchievementRecordAuthor_pkey'
}

/** input type for incrementing numeric columns in table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Inc_Input = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Insert_Input = {
  AchievementRecord?: InputMaybe<AchievementRecord_Obj_Rel_Insert_Input>;
  User?: InputMaybe<User_Obj_Rel_Insert_Input>;
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of a user that is author of an uploaded achievement record */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type AchievementRecordAuthor_Max_Fields = {
  __typename?: 'AchievementRecordAuthor_max_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of a user that is author of an uploaded achievement record */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Max_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** ID of a user that is author of an uploaded achievement record */
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type AchievementRecordAuthor_Min_Fields = {
  __typename?: 'AchievementRecordAuthor_min_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of a user that is author of an uploaded achievement record */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Min_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** ID of a user that is author of an uploaded achievement record */
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Mutation_Response = {
  __typename?: 'AchievementRecordAuthor_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementRecordAuthor>;
};

/** on_conflict condition type for table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_On_Conflict = {
  constraint: AchievementRecordAuthor_Constraint;
  update_columns?: Array<AchievementRecordAuthor_Update_Column>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementRecordAuthor". */
export type AchievementRecordAuthor_Order_By = {
  AchievementRecord?: InputMaybe<AchievementRecord_Order_By>;
  User?: InputMaybe<User_Order_By>;
  achievementRecordId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementRecordAuthor */
export type AchievementRecordAuthor_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "AchievementRecordAuthor" */
export enum AchievementRecordAuthor_Select_Column {
  /** column name */
  AchievementRecordId = 'achievementRecordId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Set_Input = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of a user that is author of an uploaded achievement record */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type AchievementRecordAuthor_Stddev_Fields = {
  __typename?: 'AchievementRecordAuthor_stddev_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Stddev_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type AchievementRecordAuthor_Stddev_Pop_Fields = {
  __typename?: 'AchievementRecordAuthor_stddev_pop_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Stddev_Pop_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type AchievementRecordAuthor_Stddev_Samp_Fields = {
  __typename?: 'AchievementRecordAuthor_stddev_samp_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Stddev_Samp_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementRecordAuthor_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementRecordAuthor_Stream_Cursor_Value_Input = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of a user that is author of an uploaded achievement record */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type AchievementRecordAuthor_Sum_Fields = {
  __typename?: 'AchievementRecordAuthor_sum_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Sum_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "AchievementRecordAuthor" */
export enum AchievementRecordAuthor_Update_Column {
  /** column name */
  AchievementRecordId = 'achievementRecordId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

export type AchievementRecordAuthor_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<AchievementRecordAuthor_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementRecordAuthor_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementRecordAuthor_Bool_Exp;
};

/** aggregate var_pop on columns */
export type AchievementRecordAuthor_Var_Pop_Fields = {
  __typename?: 'AchievementRecordAuthor_var_pop_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Var_Pop_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type AchievementRecordAuthor_Var_Samp_Fields = {
  __typename?: 'AchievementRecordAuthor_var_samp_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Var_Samp_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type AchievementRecordAuthor_Variance_Fields = {
  __typename?: 'AchievementRecordAuthor_variance_fields';
  /** ID of an uploaded achievement record */
  achievementRecordId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "AchievementRecordAuthor" */
export type AchievementRecordAuthor_Variance_Order_By = {
  /** ID of an uploaded achievement record */
  achievementRecordId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** The possible ratings an instructor or admin can give an uploaded achievement record */
export type AchievementRecordRating = {
  __typename?: 'AchievementRecordRating';
  /** An array relationship */
  AchievementRecords: Array<AchievementRecord>;
  /** An aggregate relationship */
  AchievementRecords_aggregate: AchievementRecord_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** The possible ratings an instructor or admin can give an uploaded achievement record */
export type AchievementRecordRatingAchievementRecordsArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};


/** The possible ratings an instructor or admin can give an uploaded achievement record */
export type AchievementRecordRatingAchievementRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};

/** aggregated selection of "AchievementRecordRating" */
export type AchievementRecordRating_Aggregate = {
  __typename?: 'AchievementRecordRating_aggregate';
  aggregate?: Maybe<AchievementRecordRating_Aggregate_Fields>;
  nodes: Array<AchievementRecordRating>;
};

/** aggregate fields of "AchievementRecordRating" */
export type AchievementRecordRating_Aggregate_Fields = {
  __typename?: 'AchievementRecordRating_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementRecordRating_Max_Fields>;
  min?: Maybe<AchievementRecordRating_Min_Fields>;
};


/** aggregate fields of "AchievementRecordRating" */
export type AchievementRecordRating_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementRecordRating_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "AchievementRecordRating". All fields are combined with a logical 'AND'. */
export type AchievementRecordRating_Bool_Exp = {
  AchievementRecords?: InputMaybe<AchievementRecord_Bool_Exp>;
  AchievementRecords_aggregate?: InputMaybe<AchievementRecord_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<AchievementRecordRating_Bool_Exp>>;
  _not?: InputMaybe<AchievementRecordRating_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementRecordRating_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementRecordRating" */
export enum AchievementRecordRating_Constraint {
  /** unique or primary key constraint on columns "value" */
  PerformanceRatingPkey = 'PerformanceRating_pkey'
}

export enum AchievementRecordRating_Enum {
  /** The project record is not considered as sufficient to pass. */
  Failed = 'FAILED',
  /** The project record is considered as sufficient to pass. */
  Passed = 'PASSED',
  /** The project record has not been reviewed yet. */
  Unrated = 'UNRATED'
}

/** Boolean expression to compare columns of type "AchievementRecordRating_enum". All fields are combined with logical 'AND'. */
export type AchievementRecordRating_Enum_Comparison_Exp = {
  _eq?: InputMaybe<AchievementRecordRating_Enum>;
  _in?: InputMaybe<Array<AchievementRecordRating_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<AchievementRecordRating_Enum>;
  _nin?: InputMaybe<Array<AchievementRecordRating_Enum>>;
};

/** input type for inserting data into table "AchievementRecordRating" */
export type AchievementRecordRating_Insert_Input = {
  AchievementRecords?: InputMaybe<AchievementRecord_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type AchievementRecordRating_Max_Fields = {
  __typename?: 'AchievementRecordRating_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type AchievementRecordRating_Min_Fields = {
  __typename?: 'AchievementRecordRating_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "AchievementRecordRating" */
export type AchievementRecordRating_Mutation_Response = {
  __typename?: 'AchievementRecordRating_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementRecordRating>;
};

/** input type for inserting object relation for remote table "AchievementRecordRating" */
export type AchievementRecordRating_Obj_Rel_Insert_Input = {
  data: AchievementRecordRating_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementRecordRating_On_Conflict>;
};

/** on_conflict condition type for table "AchievementRecordRating" */
export type AchievementRecordRating_On_Conflict = {
  constraint: AchievementRecordRating_Constraint;
  update_columns?: Array<AchievementRecordRating_Update_Column>;
  where?: InputMaybe<AchievementRecordRating_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementRecordRating". */
export type AchievementRecordRating_Order_By = {
  AchievementRecords_aggregate?: InputMaybe<AchievementRecord_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementRecordRating */
export type AchievementRecordRating_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "AchievementRecordRating" */
export enum AchievementRecordRating_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "AchievementRecordRating" */
export type AchievementRecordRating_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "AchievementRecordRating" */
export type AchievementRecordRating_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementRecordRating_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementRecordRating_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "AchievementRecordRating" */
export enum AchievementRecordRating_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type AchievementRecordRating_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementRecordRating_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementRecordRating_Bool_Exp;
};

/** Possible types for the records of achievement options. */
export type AchievementRecordType = {
  __typename?: 'AchievementRecordType';
  /** An array relationship */
  AchievementOptions: Array<AchievementOption>;
  /** An aggregate relationship */
  AchievementOptions_aggregate: AchievementOption_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** Possible types for the records of achievement options. */
export type AchievementRecordTypeAchievementOptionsArgs = {
  distinct_on?: InputMaybe<Array<AchievementOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOption_Order_By>>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};


/** Possible types for the records of achievement options. */
export type AchievementRecordTypeAchievementOptions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOption_Order_By>>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};

/** aggregated selection of "AchievementRecordType" */
export type AchievementRecordType_Aggregate = {
  __typename?: 'AchievementRecordType_aggregate';
  aggregate?: Maybe<AchievementRecordType_Aggregate_Fields>;
  nodes: Array<AchievementRecordType>;
};

/** aggregate fields of "AchievementRecordType" */
export type AchievementRecordType_Aggregate_Fields = {
  __typename?: 'AchievementRecordType_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementRecordType_Max_Fields>;
  min?: Maybe<AchievementRecordType_Min_Fields>;
};


/** aggregate fields of "AchievementRecordType" */
export type AchievementRecordType_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementRecordType_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "AchievementRecordType". All fields are combined with a logical 'AND'. */
export type AchievementRecordType_Bool_Exp = {
  AchievementOptions?: InputMaybe<AchievementOption_Bool_Exp>;
  AchievementOptions_aggregate?: InputMaybe<AchievementOption_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<AchievementRecordType_Bool_Exp>>;
  _not?: InputMaybe<AchievementRecordType_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementRecordType_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementRecordType" */
export enum AchievementRecordType_Constraint {
  /** unique or primary key constraint on columns "value" */
  AchievementRecordTypePkey = 'AchievementRecordType_pkey'
}

export enum AchievementRecordType_Enum {
  /** A single documentation file is uploaded for the achievement record */
  Documentation = 'DOCUMENTATION',
  /** A documentation file and a csv data file is uploaded for the achievement record */
  DocumentationAndCsv = 'DOCUMENTATION_AND_CSV',
  OnlineCourse = 'ONLINE_COURSE'
}

/** Boolean expression to compare columns of type "AchievementRecordType_enum". All fields are combined with logical 'AND'. */
export type AchievementRecordType_Enum_Comparison_Exp = {
  _eq?: InputMaybe<AchievementRecordType_Enum>;
  _in?: InputMaybe<Array<AchievementRecordType_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<AchievementRecordType_Enum>;
  _nin?: InputMaybe<Array<AchievementRecordType_Enum>>;
};

/** input type for inserting data into table "AchievementRecordType" */
export type AchievementRecordType_Insert_Input = {
  AchievementOptions?: InputMaybe<AchievementOption_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type AchievementRecordType_Max_Fields = {
  __typename?: 'AchievementRecordType_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type AchievementRecordType_Min_Fields = {
  __typename?: 'AchievementRecordType_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "AchievementRecordType" */
export type AchievementRecordType_Mutation_Response = {
  __typename?: 'AchievementRecordType_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementRecordType>;
};

/** input type for inserting object relation for remote table "AchievementRecordType" */
export type AchievementRecordType_Obj_Rel_Insert_Input = {
  data: AchievementRecordType_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementRecordType_On_Conflict>;
};

/** on_conflict condition type for table "AchievementRecordType" */
export type AchievementRecordType_On_Conflict = {
  constraint: AchievementRecordType_Constraint;
  update_columns?: Array<AchievementRecordType_Update_Column>;
  where?: InputMaybe<AchievementRecordType_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementRecordType". */
export type AchievementRecordType_Order_By = {
  AchievementOptions_aggregate?: InputMaybe<AchievementOption_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementRecordType */
export type AchievementRecordType_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "AchievementRecordType" */
export enum AchievementRecordType_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "AchievementRecordType" */
export type AchievementRecordType_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "AchievementRecordType" */
export type AchievementRecordType_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementRecordType_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementRecordType_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "AchievementRecordType" */
export enum AchievementRecordType_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type AchievementRecordType_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementRecordType_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementRecordType_Bool_Exp;
};

/** aggregated selection of "AchievementRecord" */
export type AchievementRecord_Aggregate = {
  __typename?: 'AchievementRecord_aggregate';
  aggregate?: Maybe<AchievementRecord_Aggregate_Fields>;
  nodes: Array<AchievementRecord>;
};

export type AchievementRecord_Aggregate_Bool_Exp = {
  count?: InputMaybe<AchievementRecord_Aggregate_Bool_Exp_Count>;
};

export type AchievementRecord_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AchievementRecord_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "AchievementRecord" */
export type AchievementRecord_Aggregate_Fields = {
  __typename?: 'AchievementRecord_aggregate_fields';
  avg?: Maybe<AchievementRecord_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AchievementRecord_Max_Fields>;
  min?: Maybe<AchievementRecord_Min_Fields>;
  stddev?: Maybe<AchievementRecord_Stddev_Fields>;
  stddev_pop?: Maybe<AchievementRecord_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AchievementRecord_Stddev_Samp_Fields>;
  sum?: Maybe<AchievementRecord_Sum_Fields>;
  var_pop?: Maybe<AchievementRecord_Var_Pop_Fields>;
  var_samp?: Maybe<AchievementRecord_Var_Samp_Fields>;
  variance?: Maybe<AchievementRecord_Variance_Fields>;
};


/** aggregate fields of "AchievementRecord" */
export type AchievementRecord_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "AchievementRecord" */
export type AchievementRecord_Aggregate_Order_By = {
  avg?: InputMaybe<AchievementRecord_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<AchievementRecord_Max_Order_By>;
  min?: InputMaybe<AchievementRecord_Min_Order_By>;
  stddev?: InputMaybe<AchievementRecord_Stddev_Order_By>;
  stddev_pop?: InputMaybe<AchievementRecord_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<AchievementRecord_Stddev_Samp_Order_By>;
  sum?: InputMaybe<AchievementRecord_Sum_Order_By>;
  var_pop?: InputMaybe<AchievementRecord_Var_Pop_Order_By>;
  var_samp?: InputMaybe<AchievementRecord_Var_Samp_Order_By>;
  variance?: InputMaybe<AchievementRecord_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "AchievementRecord" */
export type AchievementRecord_Arr_Rel_Insert_Input = {
  data: Array<AchievementRecord_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementRecord_On_Conflict>;
};

/** aggregate avg on columns */
export type AchievementRecord_Avg_Fields = {
  __typename?: 'AchievementRecord_avg_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "AchievementRecord" */
export type AchievementRecord_Avg_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "AchievementRecord". All fields are combined with a logical 'AND'. */
export type AchievementRecord_Bool_Exp = {
  AchievementOption?: InputMaybe<AchievementOption_Bool_Exp>;
  AchievementRecordAuthors?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
  AchievementRecordAuthors_aggregate?: InputMaybe<AchievementRecordAuthor_Aggregate_Bool_Exp>;
  AchievementRecordRating?: InputMaybe<AchievementRecordRating_Bool_Exp>;
  _and?: InputMaybe<Array<AchievementRecord_Bool_Exp>>;
  _not?: InputMaybe<AchievementRecord_Bool_Exp>;
  _or?: InputMaybe<Array<AchievementRecord_Bool_Exp>>;
  achievementOptionId?: InputMaybe<Int_Comparison_Exp>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  coverImageUrl?: InputMaybe<String_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  csvResults?: InputMaybe<String_Comparison_Exp>;
  description?: InputMaybe<String_Comparison_Exp>;
  documentationUrl?: InputMaybe<String_Comparison_Exp>;
  evaluationScriptUrl?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  rating?: InputMaybe<AchievementRecordRating_Enum_Comparison_Exp>;
  score?: InputMaybe<Numeric_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  uploadUserId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "AchievementRecord" */
export enum AchievementRecord_Constraint {
  /** unique or primary key constraint on columns "id" */
  AchievementRecordPkey = 'AchievementRecord_pkey'
}

/** input type for incrementing numeric columns in table "AchievementRecord" */
export type AchievementRecord_Inc_Input = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Scalars['numeric']['input']>;
};

/** input type for inserting data into table "AchievementRecord" */
export type AchievementRecord_Insert_Input = {
  AchievementOption?: InputMaybe<AchievementOption_Obj_Rel_Insert_Input>;
  AchievementRecordAuthors?: InputMaybe<AchievementRecordAuthor_Arr_Rel_Insert_Input>;
  AchievementRecordRating?: InputMaybe<AchievementRecordRating_Obj_Rel_Insert_Input>;
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: InputMaybe<Scalars['String']['input']>;
  /** Description that will be used in the project gallery */
  description?: InputMaybe<Scalars['String']['input']>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: InputMaybe<Scalars['String']['input']>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The course instructor's or mentor's rating for the achievement record */
  rating?: InputMaybe<AchievementRecordRating_Enum>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Scalars['numeric']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the user who uploaded the record */
  uploadUserId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type AchievementRecord_Max_Fields = {
  __typename?: 'AchievementRecord_max_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Int']['output']>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: Maybe<Scalars['String']['output']>;
  /** Description that will be used in the project gallery */
  description?: Maybe<Scalars['String']['output']>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: Maybe<Scalars['String']['output']>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['numeric']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the user who uploaded the record */
  uploadUserId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "AchievementRecord" */
export type AchievementRecord_Max_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: InputMaybe<Order_By>;
  /** Description that will be used in the project gallery */
  description?: InputMaybe<Order_By>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: InputMaybe<Order_By>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** ID of the user who uploaded the record */
  uploadUserId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type AchievementRecord_Min_Fields = {
  __typename?: 'AchievementRecord_min_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Int']['output']>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: Maybe<Scalars['String']['output']>;
  /** Description that will be used in the project gallery */
  description?: Maybe<Scalars['String']['output']>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: Maybe<Scalars['String']['output']>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['numeric']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the user who uploaded the record */
  uploadUserId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "AchievementRecord" */
export type AchievementRecord_Min_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: InputMaybe<Order_By>;
  /** Description that will be used in the project gallery */
  description?: InputMaybe<Order_By>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: InputMaybe<Order_By>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** ID of the user who uploaded the record */
  uploadUserId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "AchievementRecord" */
export type AchievementRecord_Mutation_Response = {
  __typename?: 'AchievementRecord_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AchievementRecord>;
};

/** input type for inserting object relation for remote table "AchievementRecord" */
export type AchievementRecord_Obj_Rel_Insert_Input = {
  data: AchievementRecord_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<AchievementRecord_On_Conflict>;
};

/** on_conflict condition type for table "AchievementRecord" */
export type AchievementRecord_On_Conflict = {
  constraint: AchievementRecord_Constraint;
  update_columns?: Array<AchievementRecord_Update_Column>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};

/** Ordering options when selecting data from "AchievementRecord". */
export type AchievementRecord_Order_By = {
  AchievementOption?: InputMaybe<AchievementOption_Order_By>;
  AchievementRecordAuthors_aggregate?: InputMaybe<AchievementRecordAuthor_Aggregate_Order_By>;
  AchievementRecordRating?: InputMaybe<AchievementRecordRating_Order_By>;
  achievementOptionId?: InputMaybe<Order_By>;
  courseId?: InputMaybe<Order_By>;
  coverImageUrl?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  csvResults?: InputMaybe<Order_By>;
  description?: InputMaybe<Order_By>;
  documentationUrl?: InputMaybe<Order_By>;
  evaluationScriptUrl?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  rating?: InputMaybe<Order_By>;
  score?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  uploadUserId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AchievementRecord */
export type AchievementRecord_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "AchievementRecord" */
export enum AchievementRecord_Select_Column {
  /** column name */
  AchievementOptionId = 'achievementOptionId',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CoverImageUrl = 'coverImageUrl',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CsvResults = 'csvResults',
  /** column name */
  Description = 'description',
  /** column name */
  DocumentationUrl = 'documentationUrl',
  /** column name */
  EvaluationScriptUrl = 'evaluationScriptUrl',
  /** column name */
  Id = 'id',
  /** column name */
  Rating = 'rating',
  /** column name */
  Score = 'score',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UploadUserId = 'uploadUserId'
}

/** input type for updating data in table "AchievementRecord" */
export type AchievementRecord_Set_Input = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: InputMaybe<Scalars['String']['input']>;
  /** Description that will be used in the project gallery */
  description?: InputMaybe<Scalars['String']['input']>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: InputMaybe<Scalars['String']['input']>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The course instructor's or mentor's rating for the achievement record */
  rating?: InputMaybe<AchievementRecordRating_Enum>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Scalars['numeric']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the user who uploaded the record */
  uploadUserId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type AchievementRecord_Stddev_Fields = {
  __typename?: 'AchievementRecord_stddev_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "AchievementRecord" */
export type AchievementRecord_Stddev_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type AchievementRecord_Stddev_Pop_Fields = {
  __typename?: 'AchievementRecord_stddev_pop_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "AchievementRecord" */
export type AchievementRecord_Stddev_Pop_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type AchievementRecord_Stddev_Samp_Fields = {
  __typename?: 'AchievementRecord_stddev_samp_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "AchievementRecord" */
export type AchievementRecord_Stddev_Samp_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "AchievementRecord" */
export type AchievementRecord_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AchievementRecord_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AchievementRecord_Stream_Cursor_Value_Input = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  /** Image that will be used for the project gallery */
  coverImageUrl?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Base64 encoded string of the uploaded csv data */
  csvResults?: InputMaybe<Scalars['String']['input']>;
  /** Description that will be used in the project gallery */
  description?: InputMaybe<Scalars['String']['input']>;
  /** URL to the uploaded file with the documentation of the record. */
  documentationUrl?: InputMaybe<Scalars['String']['input']>;
  /** URL for the evaluation function that will be triggered when a new record with csv data is inserted */
  evaluationScriptUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The course instructor's or mentor's rating for the achievement record */
  rating?: InputMaybe<AchievementRecordRating_Enum>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Scalars['numeric']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the user who uploaded the record */
  uploadUserId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type AchievementRecord_Sum_Fields = {
  __typename?: 'AchievementRecord_sum_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Int']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['numeric']['output']>;
};

/** order by sum() on columns of table "AchievementRecord" */
export type AchievementRecord_Sum_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** update columns of table "AchievementRecord" */
export enum AchievementRecord_Update_Column {
  /** column name */
  AchievementOptionId = 'achievementOptionId',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CoverImageUrl = 'coverImageUrl',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CsvResults = 'csvResults',
  /** column name */
  Description = 'description',
  /** column name */
  DocumentationUrl = 'documentationUrl',
  /** column name */
  EvaluationScriptUrl = 'evaluationScriptUrl',
  /** column name */
  Id = 'id',
  /** column name */
  Rating = 'rating',
  /** column name */
  Score = 'score',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UploadUserId = 'uploadUserId'
}

export type AchievementRecord_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<AchievementRecord_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AchievementRecord_Set_Input>;
  /** filter the rows which have to be updated */
  where: AchievementRecord_Bool_Exp;
};

/** aggregate var_pop on columns */
export type AchievementRecord_Var_Pop_Fields = {
  __typename?: 'AchievementRecord_var_pop_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "AchievementRecord" */
export type AchievementRecord_Var_Pop_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type AchievementRecord_Var_Samp_Fields = {
  __typename?: 'AchievementRecord_var_samp_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "AchievementRecord" */
export type AchievementRecord_Var_Samp_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type AchievementRecord_Variance_Fields = {
  __typename?: 'AchievementRecord_variance_fields';
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course the record was uploaded for. */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** Score calculated for possibly uploaded csv data. */
  score?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "AchievementRecord" */
export type AchievementRecord_Variance_Order_By = {
  /** ID of hte achievement option the record is uploaded for. */
  achievementOptionId?: InputMaybe<Order_By>;
  /** ID of the course the record was uploaded for. */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Score calculated for possibly uploaded csv data. */
  score?: InputMaybe<Order_By>;
};

/** Rows for new admin users are added or removed by other admin users. */
export type Admin = {
  __typename?: 'Admin';
  /** An object relationship */
  User: User;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id: Scalars['Int']['output'];
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The admin's user ID */
  userId: Scalars['uuid']['output'];
};

/** aggregated selection of "Admin" */
export type Admin_Aggregate = {
  __typename?: 'Admin_aggregate';
  aggregate?: Maybe<Admin_Aggregate_Fields>;
  nodes: Array<Admin>;
};

export type Admin_Aggregate_Bool_Exp = {
  count?: InputMaybe<Admin_Aggregate_Bool_Exp_Count>;
};

export type Admin_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Admin_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Admin_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "Admin" */
export type Admin_Aggregate_Fields = {
  __typename?: 'Admin_aggregate_fields';
  avg?: Maybe<Admin_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Admin_Max_Fields>;
  min?: Maybe<Admin_Min_Fields>;
  stddev?: Maybe<Admin_Stddev_Fields>;
  stddev_pop?: Maybe<Admin_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Admin_Stddev_Samp_Fields>;
  sum?: Maybe<Admin_Sum_Fields>;
  var_pop?: Maybe<Admin_Var_Pop_Fields>;
  var_samp?: Maybe<Admin_Var_Samp_Fields>;
  variance?: Maybe<Admin_Variance_Fields>;
};


/** aggregate fields of "Admin" */
export type Admin_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Admin_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "Admin" */
export type Admin_Aggregate_Order_By = {
  avg?: InputMaybe<Admin_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Admin_Max_Order_By>;
  min?: InputMaybe<Admin_Min_Order_By>;
  stddev?: InputMaybe<Admin_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Admin_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Admin_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Admin_Sum_Order_By>;
  var_pop?: InputMaybe<Admin_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Admin_Var_Samp_Order_By>;
  variance?: InputMaybe<Admin_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Admin" */
export type Admin_Arr_Rel_Insert_Input = {
  data: Array<Admin_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Admin_On_Conflict>;
};

/** aggregate avg on columns */
export type Admin_Avg_Fields = {
  __typename?: 'Admin_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "Admin" */
export type Admin_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Admin". All fields are combined with a logical 'AND'. */
export type Admin_Bool_Exp = {
  User?: InputMaybe<User_Bool_Exp>;
  _and?: InputMaybe<Array<Admin_Bool_Exp>>;
  _not?: InputMaybe<Admin_Bool_Exp>;
  _or?: InputMaybe<Array<Admin_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "Admin" */
export enum Admin_Constraint {
  /** unique or primary key constraint on columns "id" */
  AdminPkey = 'Admin_pkey'
}

/** input type for incrementing numeric columns in table "Admin" */
export type Admin_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "Admin" */
export type Admin_Insert_Input = {
  User?: InputMaybe<User_Obj_Rel_Insert_Input>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The admin's user ID */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Admin_Max_Fields = {
  __typename?: 'Admin_max_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The admin's user ID */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "Admin" */
export type Admin_Max_Order_By = {
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The admin's user ID */
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Admin_Min_Fields = {
  __typename?: 'Admin_min_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The admin's user ID */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "Admin" */
export type Admin_Min_Order_By = {
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The admin's user ID */
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "Admin" */
export type Admin_Mutation_Response = {
  __typename?: 'Admin_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Admin>;
};

/** on_conflict condition type for table "Admin" */
export type Admin_On_Conflict = {
  constraint: Admin_Constraint;
  update_columns?: Array<Admin_Update_Column>;
  where?: InputMaybe<Admin_Bool_Exp>;
};

/** Ordering options when selecting data from "Admin". */
export type Admin_Order_By = {
  User?: InputMaybe<User_Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Admin */
export type Admin_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "Admin" */
export enum Admin_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "Admin" */
export type Admin_Set_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The admin's user ID */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type Admin_Stddev_Fields = {
  __typename?: 'Admin_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "Admin" */
export type Admin_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Admin_Stddev_Pop_Fields = {
  __typename?: 'Admin_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "Admin" */
export type Admin_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Admin_Stddev_Samp_Fields = {
  __typename?: 'Admin_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "Admin" */
export type Admin_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "Admin" */
export type Admin_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Admin_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Admin_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The admin's user ID */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type Admin_Sum_Fields = {
  __typename?: 'Admin_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "Admin" */
export type Admin_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** update columns of table "Admin" */
export enum Admin_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

export type Admin_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Admin_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Admin_Set_Input>;
  /** filter the rows which have to be updated */
  where: Admin_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Admin_Var_Pop_Fields = {
  __typename?: 'Admin_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "Admin" */
export type Admin_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Admin_Var_Samp_Fields = {
  __typename?: 'Admin_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "Admin" */
export type Admin_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Admin_Variance_Fields = {
  __typename?: 'Admin_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "Admin" */
export type Admin_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
};

export type AnonymizationSteps = {
  __typename?: 'AnonymizationSteps';
  certificate_anonymization: Scalars['Boolean']['output'];
  keycloak_deletion: Scalars['Boolean']['output'];
  motivation_letter_anonymization: Scalars['Boolean']['output'];
  profile_picture_removal: Scalars['Boolean']['output'];
  user_data_anonymization: Scalars['Boolean']['output'];
};

export type AnonymizeUserResult = {
  __typename?: 'AnonymizeUserResult';
  anonymizedUserId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  messageKey?: Maybe<Scalars['String']['output']>;
  steps?: Maybe<AnonymizationSteps>;
};

/** To store characteristics on the app level. */
export type AppSettings = {
  __typename?: 'AppSettings';
  /** Name of the app to which the given settings are applied */
  appName: Scalars['String']['output'];
  /** Homepage background image */
  backgroundImageURL?: Maybe<Scalars['String']['output']>;
  /** Background color for the dismissiable banner displayed on the homepage */
  bannerBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** Font color for the text in the dismissiable banner displayed on the homepage */
  bannerFontColor?: Maybe<Scalars['String']['output']>;
  /** German version for the text of a dismissiable banner on the homepage */
  bannerTextDe?: Maybe<Scalars['String']['output']>;
  /** English version for the text of a dismissiable banner on the homepage */
  bannerTextEn?: Maybe<Scalars['String']['output']>;
  created_at: Scalars['timestamptz']['output'];
  /** Preview image that is shared with links */
  previewImageURL?: Maybe<Scalars['String']['output']>;
  timeZone: Scalars['String']['output'];
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "AppSettings" */
export type AppSettings_Aggregate = {
  __typename?: 'AppSettings_aggregate';
  aggregate?: Maybe<AppSettings_Aggregate_Fields>;
  nodes: Array<AppSettings>;
};

/** aggregate fields of "AppSettings" */
export type AppSettings_Aggregate_Fields = {
  __typename?: 'AppSettings_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<AppSettings_Max_Fields>;
  min?: Maybe<AppSettings_Min_Fields>;
};


/** aggregate fields of "AppSettings" */
export type AppSettings_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AppSettings_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "AppSettings". All fields are combined with a logical 'AND'. */
export type AppSettings_Bool_Exp = {
  _and?: InputMaybe<Array<AppSettings_Bool_Exp>>;
  _not?: InputMaybe<AppSettings_Bool_Exp>;
  _or?: InputMaybe<Array<AppSettings_Bool_Exp>>;
  appName?: InputMaybe<String_Comparison_Exp>;
  backgroundImageURL?: InputMaybe<String_Comparison_Exp>;
  bannerBackgroundColor?: InputMaybe<String_Comparison_Exp>;
  bannerFontColor?: InputMaybe<String_Comparison_Exp>;
  bannerTextDe?: InputMaybe<String_Comparison_Exp>;
  bannerTextEn?: InputMaybe<String_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  previewImageURL?: InputMaybe<String_Comparison_Exp>;
  timeZone?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "AppSettings" */
export enum AppSettings_Constraint {
  /** unique or primary key constraint on columns "appName" */
  AppSettingsAppKey = 'AppSettings_app_key',
  /** unique or primary key constraint on columns "appName" */
  AppSettingsPkey = 'AppSettings_pkey'
}

/** input type for inserting data into table "AppSettings" */
export type AppSettings_Insert_Input = {
  /** Name of the app to which the given settings are applied */
  appName?: InputMaybe<Scalars['String']['input']>;
  /** Homepage background image */
  backgroundImageURL?: InputMaybe<Scalars['String']['input']>;
  /** Background color for the dismissiable banner displayed on the homepage */
  bannerBackgroundColor?: InputMaybe<Scalars['String']['input']>;
  /** Font color for the text in the dismissiable banner displayed on the homepage */
  bannerFontColor?: InputMaybe<Scalars['String']['input']>;
  /** German version for the text of a dismissiable banner on the homepage */
  bannerTextDe?: InputMaybe<Scalars['String']['input']>;
  /** English version for the text of a dismissiable banner on the homepage */
  bannerTextEn?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Preview image that is shared with links */
  previewImageURL?: InputMaybe<Scalars['String']['input']>;
  timeZone?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type AppSettings_Max_Fields = {
  __typename?: 'AppSettings_max_fields';
  /** Name of the app to which the given settings are applied */
  appName?: Maybe<Scalars['String']['output']>;
  /** Homepage background image */
  backgroundImageURL?: Maybe<Scalars['String']['output']>;
  /** Background color for the dismissiable banner displayed on the homepage */
  bannerBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** Font color for the text in the dismissiable banner displayed on the homepage */
  bannerFontColor?: Maybe<Scalars['String']['output']>;
  /** German version for the text of a dismissiable banner on the homepage */
  bannerTextDe?: Maybe<Scalars['String']['output']>;
  /** English version for the text of a dismissiable banner on the homepage */
  bannerTextEn?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Preview image that is shared with links */
  previewImageURL?: Maybe<Scalars['String']['output']>;
  timeZone?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** aggregate min on columns */
export type AppSettings_Min_Fields = {
  __typename?: 'AppSettings_min_fields';
  /** Name of the app to which the given settings are applied */
  appName?: Maybe<Scalars['String']['output']>;
  /** Homepage background image */
  backgroundImageURL?: Maybe<Scalars['String']['output']>;
  /** Background color for the dismissiable banner displayed on the homepage */
  bannerBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** Font color for the text in the dismissiable banner displayed on the homepage */
  bannerFontColor?: Maybe<Scalars['String']['output']>;
  /** German version for the text of a dismissiable banner on the homepage */
  bannerTextDe?: Maybe<Scalars['String']['output']>;
  /** English version for the text of a dismissiable banner on the homepage */
  bannerTextEn?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Preview image that is shared with links */
  previewImageURL?: Maybe<Scalars['String']['output']>;
  timeZone?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** response of any mutation on the table "AppSettings" */
export type AppSettings_Mutation_Response = {
  __typename?: 'AppSettings_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AppSettings>;
};

/** on_conflict condition type for table "AppSettings" */
export type AppSettings_On_Conflict = {
  constraint: AppSettings_Constraint;
  update_columns?: Array<AppSettings_Update_Column>;
  where?: InputMaybe<AppSettings_Bool_Exp>;
};

/** Ordering options when selecting data from "AppSettings". */
export type AppSettings_Order_By = {
  appName?: InputMaybe<Order_By>;
  backgroundImageURL?: InputMaybe<Order_By>;
  bannerBackgroundColor?: InputMaybe<Order_By>;
  bannerFontColor?: InputMaybe<Order_By>;
  bannerTextDe?: InputMaybe<Order_By>;
  bannerTextEn?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  previewImageURL?: InputMaybe<Order_By>;
  timeZone?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AppSettings */
export type AppSettings_Pk_Columns_Input = {
  /** Name of the app to which the given settings are applied */
  appName: Scalars['String']['input'];
};

/** select columns of table "AppSettings" */
export enum AppSettings_Select_Column {
  /** column name */
  AppName = 'appName',
  /** column name */
  BackgroundImageUrl = 'backgroundImageURL',
  /** column name */
  BannerBackgroundColor = 'bannerBackgroundColor',
  /** column name */
  BannerFontColor = 'bannerFontColor',
  /** column name */
  BannerTextDe = 'bannerTextDe',
  /** column name */
  BannerTextEn = 'bannerTextEn',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PreviewImageUrl = 'previewImageURL',
  /** column name */
  TimeZone = 'timeZone',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "AppSettings" */
export type AppSettings_Set_Input = {
  /** Name of the app to which the given settings are applied */
  appName?: InputMaybe<Scalars['String']['input']>;
  /** Homepage background image */
  backgroundImageURL?: InputMaybe<Scalars['String']['input']>;
  /** Background color for the dismissiable banner displayed on the homepage */
  bannerBackgroundColor?: InputMaybe<Scalars['String']['input']>;
  /** Font color for the text in the dismissiable banner displayed on the homepage */
  bannerFontColor?: InputMaybe<Scalars['String']['input']>;
  /** German version for the text of a dismissiable banner on the homepage */
  bannerTextDe?: InputMaybe<Scalars['String']['input']>;
  /** English version for the text of a dismissiable banner on the homepage */
  bannerTextEn?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Preview image that is shared with links */
  previewImageURL?: InputMaybe<Scalars['String']['input']>;
  timeZone?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** Streaming cursor of the table "AppSettings" */
export type AppSettings_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AppSettings_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AppSettings_Stream_Cursor_Value_Input = {
  /** Name of the app to which the given settings are applied */
  appName?: InputMaybe<Scalars['String']['input']>;
  /** Homepage background image */
  backgroundImageURL?: InputMaybe<Scalars['String']['input']>;
  /** Background color for the dismissiable banner displayed on the homepage */
  bannerBackgroundColor?: InputMaybe<Scalars['String']['input']>;
  /** Font color for the text in the dismissiable banner displayed on the homepage */
  bannerFontColor?: InputMaybe<Scalars['String']['input']>;
  /** German version for the text of a dismissiable banner on the homepage */
  bannerTextDe?: InputMaybe<Scalars['String']['input']>;
  /** English version for the text of a dismissiable banner on the homepage */
  bannerTextEn?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Preview image that is shared with links */
  previewImageURL?: InputMaybe<Scalars['String']['input']>;
  timeZone?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** update columns of table "AppSettings" */
export enum AppSettings_Update_Column {
  /** column name */
  AppName = 'appName',
  /** column name */
  BackgroundImageUrl = 'backgroundImageURL',
  /** column name */
  BannerBackgroundColor = 'bannerBackgroundColor',
  /** column name */
  BannerFontColor = 'bannerFontColor',
  /** column name */
  BannerTextDe = 'bannerTextDe',
  /** column name */
  BannerTextEn = 'bannerTextEn',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  PreviewImageUrl = 'previewImageURL',
  /** column name */
  TimeZone = 'timeZone',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type AppSettings_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AppSettings_Set_Input>;
  /** filter the rows which have to be updated */
  where: AppSettings_Bool_Exp;
};

/** Rows with new attendances are added by a serverless function, which ckecks on a regular bases if sessions are over and then adds the new attendances to this table. */
export type Attendance = {
  __typename?: 'Attendance';
  /** An object relationship */
  AttendanceSource?: Maybe<AttendanceSource>;
  /** An object relationship */
  AttendanceStatus: AttendanceStatus;
  /** An object relationship */
  Session: Session;
  /** An object relationship */
  User?: Maybe<User>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: Maybe<Scalars['timestamptz']['output']>;
  id: Scalars['Int']['output'];
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Int']['output']>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: Maybe<Scalars['String']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId: Scalars['Int']['output'];
  /** The source that provided the recorded names of the attendees. */
  source: Scalars['String']['output'];
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: Maybe<Scalars['timestamptz']['output']>;
  /** The attendance status: MISSED for a user registered for the session but not recorded (or recognized), otherwise ATTENDED */
  status: AttendanceStatus_Enum;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** Sources providing the names and times of recorded attendances */
export type AttendanceSource = {
  __typename?: 'AttendanceSource';
  /** An array relationship */
  Attendances: Array<Attendance>;
  /** An aggregate relationship */
  Attendances_aggregate: Attendance_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** Sources providing the names and times of recorded attendances */
export type AttendanceSourceAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** Sources providing the names and times of recorded attendances */
export type AttendanceSourceAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};

/** aggregated selection of "AttendanceSource" */
export type AttendanceSource_Aggregate = {
  __typename?: 'AttendanceSource_aggregate';
  aggregate?: Maybe<AttendanceSource_Aggregate_Fields>;
  nodes: Array<AttendanceSource>;
};

/** aggregate fields of "AttendanceSource" */
export type AttendanceSource_Aggregate_Fields = {
  __typename?: 'AttendanceSource_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<AttendanceSource_Max_Fields>;
  min?: Maybe<AttendanceSource_Min_Fields>;
};


/** aggregate fields of "AttendanceSource" */
export type AttendanceSource_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AttendanceSource_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "AttendanceSource". All fields are combined with a logical 'AND'. */
export type AttendanceSource_Bool_Exp = {
  Attendances?: InputMaybe<Attendance_Bool_Exp>;
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<AttendanceSource_Bool_Exp>>;
  _not?: InputMaybe<AttendanceSource_Bool_Exp>;
  _or?: InputMaybe<Array<AttendanceSource_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "AttendanceSource" */
export enum AttendanceSource_Constraint {
  /** unique or primary key constraint on columns "value" */
  AttendanceSourcePkey = 'AttendanceSource_pkey'
}

/** input type for inserting data into table "AttendanceSource" */
export type AttendanceSource_Insert_Input = {
  Attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type AttendanceSource_Max_Fields = {
  __typename?: 'AttendanceSource_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type AttendanceSource_Min_Fields = {
  __typename?: 'AttendanceSource_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "AttendanceSource" */
export type AttendanceSource_Mutation_Response = {
  __typename?: 'AttendanceSource_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AttendanceSource>;
};

/** input type for inserting object relation for remote table "AttendanceSource" */
export type AttendanceSource_Obj_Rel_Insert_Input = {
  data: AttendanceSource_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<AttendanceSource_On_Conflict>;
};

/** on_conflict condition type for table "AttendanceSource" */
export type AttendanceSource_On_Conflict = {
  constraint: AttendanceSource_Constraint;
  update_columns?: Array<AttendanceSource_Update_Column>;
  where?: InputMaybe<AttendanceSource_Bool_Exp>;
};

/** Ordering options when selecting data from "AttendanceSource". */
export type AttendanceSource_Order_By = {
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AttendanceSource */
export type AttendanceSource_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "AttendanceSource" */
export enum AttendanceSource_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "AttendanceSource" */
export type AttendanceSource_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "AttendanceSource" */
export type AttendanceSource_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AttendanceSource_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AttendanceSource_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "AttendanceSource" */
export enum AttendanceSource_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type AttendanceSource_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AttendanceSource_Set_Input>;
  /** filter the rows which have to be updated */
  where: AttendanceSource_Bool_Exp;
};

/** Possible status of an attendance */
export type AttendanceStatus = {
  __typename?: 'AttendanceStatus';
  /** An array relationship */
  Attendances: Array<Attendance>;
  /** An aggregate relationship */
  Attendances_aggregate: Attendance_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** Possible status of an attendance */
export type AttendanceStatusAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** Possible status of an attendance */
export type AttendanceStatusAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};

/** aggregated selection of "AttendanceStatus" */
export type AttendanceStatus_Aggregate = {
  __typename?: 'AttendanceStatus_aggregate';
  aggregate?: Maybe<AttendanceStatus_Aggregate_Fields>;
  nodes: Array<AttendanceStatus>;
};

/** aggregate fields of "AttendanceStatus" */
export type AttendanceStatus_Aggregate_Fields = {
  __typename?: 'AttendanceStatus_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<AttendanceStatus_Max_Fields>;
  min?: Maybe<AttendanceStatus_Min_Fields>;
};


/** aggregate fields of "AttendanceStatus" */
export type AttendanceStatus_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AttendanceStatus_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "AttendanceStatus". All fields are combined with a logical 'AND'. */
export type AttendanceStatus_Bool_Exp = {
  Attendances?: InputMaybe<Attendance_Bool_Exp>;
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<AttendanceStatus_Bool_Exp>>;
  _not?: InputMaybe<AttendanceStatus_Bool_Exp>;
  _or?: InputMaybe<Array<AttendanceStatus_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "AttendanceStatus" */
export enum AttendanceStatus_Constraint {
  /** unique or primary key constraint on columns "value" */
  AttendanceStatusPkey = 'AttendanceStatus_pkey'
}

export enum AttendanceStatus_Enum {
  Attended = 'ATTENDED',
  Missed = 'MISSED',
  NoInfo = 'NO_INFO'
}

/** Boolean expression to compare columns of type "AttendanceStatus_enum". All fields are combined with logical 'AND'. */
export type AttendanceStatus_Enum_Comparison_Exp = {
  _eq?: InputMaybe<AttendanceStatus_Enum>;
  _in?: InputMaybe<Array<AttendanceStatus_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<AttendanceStatus_Enum>;
  _nin?: InputMaybe<Array<AttendanceStatus_Enum>>;
};

/** input type for inserting data into table "AttendanceStatus" */
export type AttendanceStatus_Insert_Input = {
  Attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type AttendanceStatus_Max_Fields = {
  __typename?: 'AttendanceStatus_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type AttendanceStatus_Min_Fields = {
  __typename?: 'AttendanceStatus_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "AttendanceStatus" */
export type AttendanceStatus_Mutation_Response = {
  __typename?: 'AttendanceStatus_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<AttendanceStatus>;
};

/** input type for inserting object relation for remote table "AttendanceStatus" */
export type AttendanceStatus_Obj_Rel_Insert_Input = {
  data: AttendanceStatus_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<AttendanceStatus_On_Conflict>;
};

/** on_conflict condition type for table "AttendanceStatus" */
export type AttendanceStatus_On_Conflict = {
  constraint: AttendanceStatus_Constraint;
  update_columns?: Array<AttendanceStatus_Update_Column>;
  where?: InputMaybe<AttendanceStatus_Bool_Exp>;
};

/** Ordering options when selecting data from "AttendanceStatus". */
export type AttendanceStatus_Order_By = {
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: AttendanceStatus */
export type AttendanceStatus_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "AttendanceStatus" */
export enum AttendanceStatus_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "AttendanceStatus" */
export type AttendanceStatus_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "AttendanceStatus" */
export type AttendanceStatus_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AttendanceStatus_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AttendanceStatus_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "AttendanceStatus" */
export enum AttendanceStatus_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type AttendanceStatus_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<AttendanceStatus_Set_Input>;
  /** filter the rows which have to be updated */
  where: AttendanceStatus_Bool_Exp;
};

/** aggregated selection of "Attendance" */
export type Attendance_Aggregate = {
  __typename?: 'Attendance_aggregate';
  aggregate?: Maybe<Attendance_Aggregate_Fields>;
  nodes: Array<Attendance>;
};

export type Attendance_Aggregate_Bool_Exp = {
  count?: InputMaybe<Attendance_Aggregate_Bool_Exp_Count>;
};

export type Attendance_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Attendance_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Attendance_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "Attendance" */
export type Attendance_Aggregate_Fields = {
  __typename?: 'Attendance_aggregate_fields';
  avg?: Maybe<Attendance_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Attendance_Max_Fields>;
  min?: Maybe<Attendance_Min_Fields>;
  stddev?: Maybe<Attendance_Stddev_Fields>;
  stddev_pop?: Maybe<Attendance_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Attendance_Stddev_Samp_Fields>;
  sum?: Maybe<Attendance_Sum_Fields>;
  var_pop?: Maybe<Attendance_Var_Pop_Fields>;
  var_samp?: Maybe<Attendance_Var_Samp_Fields>;
  variance?: Maybe<Attendance_Variance_Fields>;
};


/** aggregate fields of "Attendance" */
export type Attendance_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Attendance_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "Attendance" */
export type Attendance_Aggregate_Order_By = {
  avg?: InputMaybe<Attendance_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Attendance_Max_Order_By>;
  min?: InputMaybe<Attendance_Min_Order_By>;
  stddev?: InputMaybe<Attendance_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Attendance_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Attendance_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Attendance_Sum_Order_By>;
  var_pop?: InputMaybe<Attendance_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Attendance_Var_Samp_Order_By>;
  variance?: InputMaybe<Attendance_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Attendance" */
export type Attendance_Arr_Rel_Insert_Input = {
  data: Array<Attendance_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_On_Conflict>;
};

/** aggregate avg on columns */
export type Attendance_Avg_Fields = {
  __typename?: 'Attendance_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Float']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "Attendance" */
export type Attendance_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Attendance". All fields are combined with a logical 'AND'. */
export type Attendance_Bool_Exp = {
  AttendanceSource?: InputMaybe<AttendanceSource_Bool_Exp>;
  AttendanceStatus?: InputMaybe<AttendanceStatus_Bool_Exp>;
  Session?: InputMaybe<Session_Bool_Exp>;
  User?: InputMaybe<User_Bool_Exp>;
  _and?: InputMaybe<Array<Attendance_Bool_Exp>>;
  _not?: InputMaybe<Attendance_Bool_Exp>;
  _or?: InputMaybe<Array<Attendance_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  endDateTime?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  interruptionCount?: InputMaybe<Int_Comparison_Exp>;
  recordedName?: InputMaybe<String_Comparison_Exp>;
  sessionId?: InputMaybe<Int_Comparison_Exp>;
  source?: InputMaybe<String_Comparison_Exp>;
  startDateTime?: InputMaybe<Timestamptz_Comparison_Exp>;
  status?: InputMaybe<AttendanceStatus_Enum_Comparison_Exp>;
  totalAttendanceTime?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "Attendance" */
export enum Attendance_Constraint {
  /** unique or primary key constraint on columns "id" */
  AttendencePkey = 'Attendence_pkey'
}

/** input type for incrementing numeric columns in table "Attendance" */
export type Attendance_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "Attendance" */
export type Attendance_Insert_Input = {
  AttendanceSource?: InputMaybe<AttendanceSource_Obj_Rel_Insert_Input>;
  AttendanceStatus?: InputMaybe<AttendanceStatus_Obj_Rel_Insert_Input>;
  Session?: InputMaybe<Session_Obj_Rel_Insert_Input>;
  User?: InputMaybe<User_Obj_Rel_Insert_Input>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Scalars['Int']['input']>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  /** The source that provided the recorded names of the attendees. */
  source?: InputMaybe<Scalars['String']['input']>;
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The attendance status: MISSED for a user registered for the session but not recorded (or recognized), otherwise ATTENDED */
  status?: InputMaybe<AttendanceStatus_Enum>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Attendance_Max_Fields = {
  __typename?: 'Attendance_max_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Int']['output']>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: Maybe<Scalars['String']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Int']['output']>;
  /** The source that provided the recorded names of the attendees. */
  source?: Maybe<Scalars['String']['output']>;
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: Maybe<Scalars['timestamptz']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "Attendance" */
export type Attendance_Max_Order_By = {
  created_at?: InputMaybe<Order_By>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** The source that provided the recorded names of the attendees. */
  source?: InputMaybe<Order_By>;
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Attendance_Min_Fields = {
  __typename?: 'Attendance_min_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Int']['output']>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: Maybe<Scalars['String']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Int']['output']>;
  /** The source that provided the recorded names of the attendees. */
  source?: Maybe<Scalars['String']['output']>;
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: Maybe<Scalars['timestamptz']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "Attendance" */
export type Attendance_Min_Order_By = {
  created_at?: InputMaybe<Order_By>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** The source that provided the recorded names of the attendees. */
  source?: InputMaybe<Order_By>;
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "Attendance" */
export type Attendance_Mutation_Response = {
  __typename?: 'Attendance_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Attendance>;
};

/** on_conflict condition type for table "Attendance" */
export type Attendance_On_Conflict = {
  constraint: Attendance_Constraint;
  update_columns?: Array<Attendance_Update_Column>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};

/** Ordering options when selecting data from "Attendance". */
export type Attendance_Order_By = {
  AttendanceSource?: InputMaybe<AttendanceSource_Order_By>;
  AttendanceStatus?: InputMaybe<AttendanceStatus_Order_By>;
  Session?: InputMaybe<Session_Order_By>;
  User?: InputMaybe<User_Order_By>;
  created_at?: InputMaybe<Order_By>;
  endDateTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  interruptionCount?: InputMaybe<Order_By>;
  recordedName?: InputMaybe<Order_By>;
  sessionId?: InputMaybe<Order_By>;
  source?: InputMaybe<Order_By>;
  startDateTime?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  totalAttendanceTime?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Attendance */
export type Attendance_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "Attendance" */
export enum Attendance_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EndDateTime = 'endDateTime',
  /** column name */
  Id = 'id',
  /** column name */
  InterruptionCount = 'interruptionCount',
  /** column name */
  RecordedName = 'recordedName',
  /** column name */
  SessionId = 'sessionId',
  /** column name */
  Source = 'source',
  /** column name */
  StartDateTime = 'startDateTime',
  /** column name */
  Status = 'status',
  /** column name */
  TotalAttendanceTime = 'totalAttendanceTime',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "Attendance" */
export type Attendance_Set_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Scalars['Int']['input']>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  /** The source that provided the recorded names of the attendees. */
  source?: InputMaybe<Scalars['String']['input']>;
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The attendance status: MISSED for a user registered for the session but not recorded (or recognized), otherwise ATTENDED */
  status?: InputMaybe<AttendanceStatus_Enum>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type Attendance_Stddev_Fields = {
  __typename?: 'Attendance_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Float']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "Attendance" */
export type Attendance_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Attendance_Stddev_Pop_Fields = {
  __typename?: 'Attendance_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Float']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "Attendance" */
export type Attendance_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Attendance_Stddev_Samp_Fields = {
  __typename?: 'Attendance_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Float']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "Attendance" */
export type Attendance_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "Attendance" */
export type Attendance_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Attendance_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Attendance_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The day and time the user left the session. It is not necessarily existing (usually only in only attendance). */
  endDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Scalars['Int']['input']>;
  /** The recorded name is the name that was identified as closest to the full name of the participant. */
  recordedName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  /** The source that provided the recorded names of the attendees. */
  source?: InputMaybe<Scalars['String']['input']>;
  /** The day and time the user started to attend the online session or completed the offline registration */
  startDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The attendance status: MISSED for a user registered for the session but not recorded (or recognized), otherwise ATTENDED */
  status?: InputMaybe<AttendanceStatus_Enum>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user for which the attendance was recorded (only provided if the recorded name was in accordance with the name of a user registered for the session) */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type Attendance_Sum_Fields = {
  __typename?: 'Attendance_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Int']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Int']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "Attendance" */
export type Attendance_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** update columns of table "Attendance" */
export enum Attendance_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EndDateTime = 'endDateTime',
  /** column name */
  Id = 'id',
  /** column name */
  InterruptionCount = 'interruptionCount',
  /** column name */
  RecordedName = 'recordedName',
  /** column name */
  SessionId = 'sessionId',
  /** column name */
  Source = 'source',
  /** column name */
  StartDateTime = 'startDateTime',
  /** column name */
  Status = 'status',
  /** column name */
  TotalAttendanceTime = 'totalAttendanceTime',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

export type Attendance_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Attendance_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Attendance_Set_Input>;
  /** filter the rows which have to be updated */
  where: Attendance_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Attendance_Var_Pop_Fields = {
  __typename?: 'Attendance_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Float']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "Attendance" */
export type Attendance_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Attendance_Var_Samp_Fields = {
  __typename?: 'Attendance_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Float']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "Attendance" */
export type Attendance_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Attendance_Variance_Fields = {
  __typename?: 'Attendance_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: Maybe<Scalars['Float']['output']>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "Attendance" */
export type Attendance_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The count of the number of interruptions a user had while attending (for online attendance only) */
  interruptionCount?: InputMaybe<Order_By>;
  /** The ID of the session for which the attendance was recorded */
  sessionId?: InputMaybe<Order_By>;
  /** If there were interruptions, it is less then the difference of endDateTime and startDateTime. */
  totalAttendanceTime?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Boolean']['input']>;
  _gt?: InputMaybe<Scalars['Boolean']['input']>;
  _gte?: InputMaybe<Scalars['Boolean']['input']>;
  _in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['Boolean']['input']>;
  _lte?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<Scalars['Boolean']['input']>;
  _nin?: InputMaybe<Array<Scalars['Boolean']['input']>>;
};

/** columns and relationships of "CertificateTemplateProgram" */
export type CertificateTemplateProgram = {
  __typename?: 'CertificateTemplateProgram';
  /** An object relationship */
  CertificateTemplateText: CertificateTemplateText;
  /** An object relationship */
  Program: Program;
  certificateTemplateText: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  programId: Scalars['Int']['output'];
};

/** aggregated selection of "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Aggregate = {
  __typename?: 'CertificateTemplateProgram_aggregate';
  aggregate?: Maybe<CertificateTemplateProgram_Aggregate_Fields>;
  nodes: Array<CertificateTemplateProgram>;
};

export type CertificateTemplateProgram_Aggregate_Bool_Exp = {
  count?: InputMaybe<CertificateTemplateProgram_Aggregate_Bool_Exp_Count>;
};

export type CertificateTemplateProgram_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Aggregate_Fields = {
  __typename?: 'CertificateTemplateProgram_aggregate_fields';
  avg?: Maybe<CertificateTemplateProgram_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CertificateTemplateProgram_Max_Fields>;
  min?: Maybe<CertificateTemplateProgram_Min_Fields>;
  stddev?: Maybe<CertificateTemplateProgram_Stddev_Fields>;
  stddev_pop?: Maybe<CertificateTemplateProgram_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CertificateTemplateProgram_Stddev_Samp_Fields>;
  sum?: Maybe<CertificateTemplateProgram_Sum_Fields>;
  var_pop?: Maybe<CertificateTemplateProgram_Var_Pop_Fields>;
  var_samp?: Maybe<CertificateTemplateProgram_Var_Samp_Fields>;
  variance?: Maybe<CertificateTemplateProgram_Variance_Fields>;
};


/** aggregate fields of "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Aggregate_Order_By = {
  avg?: InputMaybe<CertificateTemplateProgram_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<CertificateTemplateProgram_Max_Order_By>;
  min?: InputMaybe<CertificateTemplateProgram_Min_Order_By>;
  stddev?: InputMaybe<CertificateTemplateProgram_Stddev_Order_By>;
  stddev_pop?: InputMaybe<CertificateTemplateProgram_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<CertificateTemplateProgram_Stddev_Samp_Order_By>;
  sum?: InputMaybe<CertificateTemplateProgram_Sum_Order_By>;
  var_pop?: InputMaybe<CertificateTemplateProgram_Var_Pop_Order_By>;
  var_samp?: InputMaybe<CertificateTemplateProgram_Var_Samp_Order_By>;
  variance?: InputMaybe<CertificateTemplateProgram_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Arr_Rel_Insert_Input = {
  data: Array<CertificateTemplateProgram_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CertificateTemplateProgram_On_Conflict>;
};

/** aggregate avg on columns */
export type CertificateTemplateProgram_Avg_Fields = {
  __typename?: 'CertificateTemplateProgram_avg_fields';
  certificateTemplateText?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Avg_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CertificateTemplateProgram". All fields are combined with a logical 'AND'. */
export type CertificateTemplateProgram_Bool_Exp = {
  CertificateTemplateText?: InputMaybe<CertificateTemplateText_Bool_Exp>;
  Program?: InputMaybe<Program_Bool_Exp>;
  _and?: InputMaybe<Array<CertificateTemplateProgram_Bool_Exp>>;
  _not?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
  _or?: InputMaybe<Array<CertificateTemplateProgram_Bool_Exp>>;
  certificateTemplateText?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  programId?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "CertificateTemplateProgram" */
export enum CertificateTemplateProgram_Constraint {
  /** unique or primary key constraint on columns "id" */
  CertificateTemplateProgramPkey = 'CertificateTemplateProgram_pkey'
}

/** input type for incrementing numeric columns in table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Inc_Input = {
  certificateTemplateText?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Insert_Input = {
  CertificateTemplateText?: InputMaybe<CertificateTemplateText_Obj_Rel_Insert_Input>;
  Program?: InputMaybe<Program_Obj_Rel_Insert_Input>;
  certificateTemplateText?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate max on columns */
export type CertificateTemplateProgram_Max_Fields = {
  __typename?: 'CertificateTemplateProgram_max_fields';
  certificateTemplateText?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  programId?: Maybe<Scalars['Int']['output']>;
};

/** order by max() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Max_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type CertificateTemplateProgram_Min_Fields = {
  __typename?: 'CertificateTemplateProgram_min_fields';
  certificateTemplateText?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  programId?: Maybe<Scalars['Int']['output']>;
};

/** order by min() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Min_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Mutation_Response = {
  __typename?: 'CertificateTemplateProgram_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CertificateTemplateProgram>;
};

/** on_conflict condition type for table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_On_Conflict = {
  constraint: CertificateTemplateProgram_Constraint;
  update_columns?: Array<CertificateTemplateProgram_Update_Column>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};

/** Ordering options when selecting data from "CertificateTemplateProgram". */
export type CertificateTemplateProgram_Order_By = {
  CertificateTemplateText?: InputMaybe<CertificateTemplateText_Order_By>;
  Program?: InputMaybe<Program_Order_By>;
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CertificateTemplateProgram */
export type CertificateTemplateProgram_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CertificateTemplateProgram" */
export enum CertificateTemplateProgram_Select_Column {
  /** column name */
  CertificateTemplateText = 'certificateTemplateText',
  /** column name */
  Id = 'id',
  /** column name */
  ProgramId = 'programId'
}

/** input type for updating data in table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Set_Input = {
  certificateTemplateText?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate stddev on columns */
export type CertificateTemplateProgram_Stddev_Fields = {
  __typename?: 'CertificateTemplateProgram_stddev_fields';
  certificateTemplateText?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Stddev_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CertificateTemplateProgram_Stddev_Pop_Fields = {
  __typename?: 'CertificateTemplateProgram_stddev_pop_fields';
  certificateTemplateText?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Stddev_Pop_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CertificateTemplateProgram_Stddev_Samp_Fields = {
  __typename?: 'CertificateTemplateProgram_stddev_samp_fields';
  certificateTemplateText?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Stddev_Samp_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CertificateTemplateProgram_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CertificateTemplateProgram_Stream_Cursor_Value_Input = {
  certificateTemplateText?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate sum on columns */
export type CertificateTemplateProgram_Sum_Fields = {
  __typename?: 'CertificateTemplateProgram_sum_fields';
  certificateTemplateText?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  programId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Sum_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** update columns of table "CertificateTemplateProgram" */
export enum CertificateTemplateProgram_Update_Column {
  /** column name */
  CertificateTemplateText = 'certificateTemplateText',
  /** column name */
  Id = 'id',
  /** column name */
  ProgramId = 'programId'
}

export type CertificateTemplateProgram_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CertificateTemplateProgram_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CertificateTemplateProgram_Set_Input>;
  /** filter the rows which have to be updated */
  where: CertificateTemplateProgram_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CertificateTemplateProgram_Var_Pop_Fields = {
  __typename?: 'CertificateTemplateProgram_var_pop_fields';
  certificateTemplateText?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Var_Pop_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CertificateTemplateProgram_Var_Samp_Fields = {
  __typename?: 'CertificateTemplateProgram_var_samp_fields';
  certificateTemplateText?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Var_Samp_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type CertificateTemplateProgram_Variance_Fields = {
  __typename?: 'CertificateTemplateProgram_variance_fields';
  certificateTemplateText?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "CertificateTemplateProgram" */
export type CertificateTemplateProgram_Variance_Order_By = {
  certificateTemplateText?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** Certificate text templates is the basis for the textual content that is dynamically generated according to the course, user enrollment data, and certificate type. */
export type CertificateTemplateText = {
  __typename?: 'CertificateTemplateText';
  /** An object relationship */
  AchievementRecordType?: Maybe<AchievementRecordType>;
  /** An array relationship */
  CertificateTemplatePrograms: Array<CertificateTemplateProgram>;
  /** An aggregate relationship */
  CertificateTemplatePrograms_aggregate: CertificateTemplateProgram_Aggregate;
  /** An object relationship */
  CertificateType?: Maybe<CertificateType>;
  /** An array relationship */
  Programs: Array<Program>;
  /** An aggregate relationship */
  Programs_aggregate: Program_Aggregate;
  certificateType?: Maybe<CertificateType_Enum>;
  created_at: Scalars['timestamptz']['output'];
  html: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  /** An array relationship */
  programsByAttendancecertificatetemplatetextid: Array<Program>;
  /** An aggregate relationship */
  programsByAttendancecertificatetemplatetextid_aggregate: Program_Aggregate;
  recordType?: Maybe<AchievementRecordType_Enum>;
  title: Scalars['String']['output'];
  updated_at: Scalars['timestamptz']['output'];
};


/** Certificate text templates is the basis for the textual content that is dynamically generated according to the course, user enrollment data, and certificate type. */
export type CertificateTemplateTextCertificateTemplateProgramsArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


/** Certificate text templates is the basis for the textual content that is dynamically generated according to the course, user enrollment data, and certificate type. */
export type CertificateTemplateTextCertificateTemplatePrograms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


/** Certificate text templates is the basis for the textual content that is dynamically generated according to the course, user enrollment data, and certificate type. */
export type CertificateTemplateTextProgramsArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


/** Certificate text templates is the basis for the textual content that is dynamically generated according to the course, user enrollment data, and certificate type. */
export type CertificateTemplateTextPrograms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


/** Certificate text templates is the basis for the textual content that is dynamically generated according to the course, user enrollment data, and certificate type. */
export type CertificateTemplateTextProgramsByAttendancecertificatetemplatetextidArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


/** Certificate text templates is the basis for the textual content that is dynamically generated according to the course, user enrollment data, and certificate type. */
export type CertificateTemplateTextProgramsByAttendancecertificatetemplatetextid_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};

/** aggregated selection of "CertificateTemplateText" */
export type CertificateTemplateText_Aggregate = {
  __typename?: 'CertificateTemplateText_aggregate';
  aggregate?: Maybe<CertificateTemplateText_Aggregate_Fields>;
  nodes: Array<CertificateTemplateText>;
};

export type CertificateTemplateText_Aggregate_Bool_Exp = {
  count?: InputMaybe<CertificateTemplateText_Aggregate_Bool_Exp_Count>;
};

export type CertificateTemplateText_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CertificateTemplateText_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "CertificateTemplateText" */
export type CertificateTemplateText_Aggregate_Fields = {
  __typename?: 'CertificateTemplateText_aggregate_fields';
  avg?: Maybe<CertificateTemplateText_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CertificateTemplateText_Max_Fields>;
  min?: Maybe<CertificateTemplateText_Min_Fields>;
  stddev?: Maybe<CertificateTemplateText_Stddev_Fields>;
  stddev_pop?: Maybe<CertificateTemplateText_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CertificateTemplateText_Stddev_Samp_Fields>;
  sum?: Maybe<CertificateTemplateText_Sum_Fields>;
  var_pop?: Maybe<CertificateTemplateText_Var_Pop_Fields>;
  var_samp?: Maybe<CertificateTemplateText_Var_Samp_Fields>;
  variance?: Maybe<CertificateTemplateText_Variance_Fields>;
};


/** aggregate fields of "CertificateTemplateText" */
export type CertificateTemplateText_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "CertificateTemplateText" */
export type CertificateTemplateText_Aggregate_Order_By = {
  avg?: InputMaybe<CertificateTemplateText_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<CertificateTemplateText_Max_Order_By>;
  min?: InputMaybe<CertificateTemplateText_Min_Order_By>;
  stddev?: InputMaybe<CertificateTemplateText_Stddev_Order_By>;
  stddev_pop?: InputMaybe<CertificateTemplateText_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<CertificateTemplateText_Stddev_Samp_Order_By>;
  sum?: InputMaybe<CertificateTemplateText_Sum_Order_By>;
  var_pop?: InputMaybe<CertificateTemplateText_Var_Pop_Order_By>;
  var_samp?: InputMaybe<CertificateTemplateText_Var_Samp_Order_By>;
  variance?: InputMaybe<CertificateTemplateText_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CertificateTemplateText" */
export type CertificateTemplateText_Arr_Rel_Insert_Input = {
  data: Array<CertificateTemplateText_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CertificateTemplateText_On_Conflict>;
};

/** aggregate avg on columns */
export type CertificateTemplateText_Avg_Fields = {
  __typename?: 'CertificateTemplateText_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CertificateTemplateText". All fields are combined with a logical 'AND'. */
export type CertificateTemplateText_Bool_Exp = {
  AchievementRecordType?: InputMaybe<AchievementRecordType_Bool_Exp>;
  CertificateTemplatePrograms?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
  CertificateTemplatePrograms_aggregate?: InputMaybe<CertificateTemplateProgram_Aggregate_Bool_Exp>;
  CertificateType?: InputMaybe<CertificateType_Bool_Exp>;
  Programs?: InputMaybe<Program_Bool_Exp>;
  Programs_aggregate?: InputMaybe<Program_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<CertificateTemplateText_Bool_Exp>>;
  _not?: InputMaybe<CertificateTemplateText_Bool_Exp>;
  _or?: InputMaybe<Array<CertificateTemplateText_Bool_Exp>>;
  certificateType?: InputMaybe<CertificateType_Enum_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  html?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  programsByAttendancecertificatetemplatetextid?: InputMaybe<Program_Bool_Exp>;
  programsByAttendancecertificatetemplatetextid_aggregate?: InputMaybe<Program_Aggregate_Bool_Exp>;
  recordType?: InputMaybe<AchievementRecordType_Enum_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "CertificateTemplateText" */
export enum CertificateTemplateText_Constraint {
  /** unique or primary key constraint on columns "id" */
  CertificateTemplateTextPkey = 'CertificateTemplateText_pkey',
  /** unique or primary key constraint on columns "title" */
  CertificateTemplateTextTitleKey = 'CertificateTemplateText_title_key'
}

/** input type for incrementing numeric columns in table "CertificateTemplateText" */
export type CertificateTemplateText_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CertificateTemplateText" */
export type CertificateTemplateText_Insert_Input = {
  AchievementRecordType?: InputMaybe<AchievementRecordType_Obj_Rel_Insert_Input>;
  CertificateTemplatePrograms?: InputMaybe<CertificateTemplateProgram_Arr_Rel_Insert_Input>;
  CertificateType?: InputMaybe<CertificateType_Obj_Rel_Insert_Input>;
  Programs?: InputMaybe<Program_Arr_Rel_Insert_Input>;
  certificateType?: InputMaybe<CertificateType_Enum>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  html?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  programsByAttendancecertificatetemplatetextid?: InputMaybe<Program_Arr_Rel_Insert_Input>;
  recordType?: InputMaybe<AchievementRecordType_Enum>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type CertificateTemplateText_Max_Fields = {
  __typename?: 'CertificateTemplateText_max_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  html?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Max_Order_By = {
  created_at?: InputMaybe<Order_By>;
  html?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type CertificateTemplateText_Min_Fields = {
  __typename?: 'CertificateTemplateText_min_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  html?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Min_Order_By = {
  created_at?: InputMaybe<Order_By>;
  html?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "CertificateTemplateText" */
export type CertificateTemplateText_Mutation_Response = {
  __typename?: 'CertificateTemplateText_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CertificateTemplateText>;
};

/** input type for inserting object relation for remote table "CertificateTemplateText" */
export type CertificateTemplateText_Obj_Rel_Insert_Input = {
  data: CertificateTemplateText_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<CertificateTemplateText_On_Conflict>;
};

/** on_conflict condition type for table "CertificateTemplateText" */
export type CertificateTemplateText_On_Conflict = {
  constraint: CertificateTemplateText_Constraint;
  update_columns?: Array<CertificateTemplateText_Update_Column>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};

/** Ordering options when selecting data from "CertificateTemplateText". */
export type CertificateTemplateText_Order_By = {
  AchievementRecordType?: InputMaybe<AchievementRecordType_Order_By>;
  CertificateTemplatePrograms_aggregate?: InputMaybe<CertificateTemplateProgram_Aggregate_Order_By>;
  CertificateType?: InputMaybe<CertificateType_Order_By>;
  Programs_aggregate?: InputMaybe<Program_Aggregate_Order_By>;
  certificateType?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  html?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  programsByAttendancecertificatetemplatetextid_aggregate?: InputMaybe<Program_Aggregate_Order_By>;
  recordType?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CertificateTemplateText */
export type CertificateTemplateText_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CertificateTemplateText" */
export enum CertificateTemplateText_Select_Column {
  /** column name */
  CertificateType = 'certificateType',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Html = 'html',
  /** column name */
  Id = 'id',
  /** column name */
  RecordType = 'recordType',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "CertificateTemplateText" */
export type CertificateTemplateText_Set_Input = {
  certificateType?: InputMaybe<CertificateType_Enum>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  html?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  recordType?: InputMaybe<AchievementRecordType_Enum>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type CertificateTemplateText_Stddev_Fields = {
  __typename?: 'CertificateTemplateText_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CertificateTemplateText_Stddev_Pop_Fields = {
  __typename?: 'CertificateTemplateText_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CertificateTemplateText_Stddev_Samp_Fields = {
  __typename?: 'CertificateTemplateText_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "CertificateTemplateText" */
export type CertificateTemplateText_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CertificateTemplateText_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CertificateTemplateText_Stream_Cursor_Value_Input = {
  certificateType?: InputMaybe<CertificateType_Enum>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  html?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  recordType?: InputMaybe<AchievementRecordType_Enum>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type CertificateTemplateText_Sum_Fields = {
  __typename?: 'CertificateTemplateText_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** update columns of table "CertificateTemplateText" */
export enum CertificateTemplateText_Update_Column {
  /** column name */
  CertificateType = 'certificateType',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Html = 'html',
  /** column name */
  Id = 'id',
  /** column name */
  RecordType = 'recordType',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type CertificateTemplateText_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CertificateTemplateText_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CertificateTemplateText_Set_Input>;
  /** filter the rows which have to be updated */
  where: CertificateTemplateText_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CertificateTemplateText_Var_Pop_Fields = {
  __typename?: 'CertificateTemplateText_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CertificateTemplateText_Var_Samp_Fields = {
  __typename?: 'CertificateTemplateText_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type CertificateTemplateText_Variance_Fields = {
  __typename?: 'CertificateTemplateText_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "CertificateTemplateText" */
export type CertificateTemplateText_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** columns and relationships of "CertificateType" */
export type CertificateType = {
  __typename?: 'CertificateType';
  /** An array relationship */
  CertificateTemplateTexts: Array<CertificateTemplateText>;
  /** An aggregate relationship */
  CertificateTemplateTexts_aggregate: CertificateTemplateText_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** columns and relationships of "CertificateType" */
export type CertificateTypeCertificateTemplateTextsArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateText_Order_By>>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};


/** columns and relationships of "CertificateType" */
export type CertificateTypeCertificateTemplateTexts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateText_Order_By>>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};

/** aggregated selection of "CertificateType" */
export type CertificateType_Aggregate = {
  __typename?: 'CertificateType_aggregate';
  aggregate?: Maybe<CertificateType_Aggregate_Fields>;
  nodes: Array<CertificateType>;
};

/** aggregate fields of "CertificateType" */
export type CertificateType_Aggregate_Fields = {
  __typename?: 'CertificateType_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<CertificateType_Max_Fields>;
  min?: Maybe<CertificateType_Min_Fields>;
};


/** aggregate fields of "CertificateType" */
export type CertificateType_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CertificateType_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "CertificateType". All fields are combined with a logical 'AND'. */
export type CertificateType_Bool_Exp = {
  CertificateTemplateTexts?: InputMaybe<CertificateTemplateText_Bool_Exp>;
  CertificateTemplateTexts_aggregate?: InputMaybe<CertificateTemplateText_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<CertificateType_Bool_Exp>>;
  _not?: InputMaybe<CertificateType_Bool_Exp>;
  _or?: InputMaybe<Array<CertificateType_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "CertificateType" */
export enum CertificateType_Constraint {
  /** unique or primary key constraint on columns "value" */
  CertificateTypePkey = 'CertificateType_pkey'
}

export enum CertificateType_Enum {
  /** The corresponding certificate usually includes the learning goals and the title of the completed achievement record. */
  Achievement = 'ACHIEVEMENT',
  /** The corresponding certificate usually includes a list of attendded sessions. */
  Attendance = 'ATTENDANCE'
}

/** Boolean expression to compare columns of type "CertificateType_enum". All fields are combined with logical 'AND'. */
export type CertificateType_Enum_Comparison_Exp = {
  _eq?: InputMaybe<CertificateType_Enum>;
  _in?: InputMaybe<Array<CertificateType_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<CertificateType_Enum>;
  _nin?: InputMaybe<Array<CertificateType_Enum>>;
};

/** input type for inserting data into table "CertificateType" */
export type CertificateType_Insert_Input = {
  CertificateTemplateTexts?: InputMaybe<CertificateTemplateText_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type CertificateType_Max_Fields = {
  __typename?: 'CertificateType_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type CertificateType_Min_Fields = {
  __typename?: 'CertificateType_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "CertificateType" */
export type CertificateType_Mutation_Response = {
  __typename?: 'CertificateType_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CertificateType>;
};

/** input type for inserting object relation for remote table "CertificateType" */
export type CertificateType_Obj_Rel_Insert_Input = {
  data: CertificateType_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<CertificateType_On_Conflict>;
};

/** on_conflict condition type for table "CertificateType" */
export type CertificateType_On_Conflict = {
  constraint: CertificateType_Constraint;
  update_columns?: Array<CertificateType_Update_Column>;
  where?: InputMaybe<CertificateType_Bool_Exp>;
};

/** Ordering options when selecting data from "CertificateType". */
export type CertificateType_Order_By = {
  CertificateTemplateTexts_aggregate?: InputMaybe<CertificateTemplateText_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CertificateType */
export type CertificateType_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "CertificateType" */
export enum CertificateType_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "CertificateType" */
export type CertificateType_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "CertificateType" */
export type CertificateType_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CertificateType_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CertificateType_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "CertificateType" */
export enum CertificateType_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type CertificateType_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CertificateType_Set_Input>;
  /** filter the rows which have to be updated */
  where: CertificateType_Bool_Exp;
};

/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type Course = {
  __typename?: 'Course';
  /** An array relationship */
  AchievementOptionCourses: Array<AchievementOptionCourse>;
  /** An aggregate relationship */
  AchievementOptionCourses_aggregate: AchievementOptionCourse_Aggregate;
  /** An array relationship */
  CourseDegrees: Array<CourseDegree>;
  /** An aggregate relationship */
  CourseDegrees_aggregate: CourseDegree_Aggregate;
  /** An array relationship */
  CourseEnrollments: Array<CourseEnrollment>;
  /** An aggregate relationship */
  CourseEnrollments_aggregate: CourseEnrollment_Aggregate;
  /** An array relationship */
  CourseGroups: Array<CourseGroup>;
  /** An aggregate relationship */
  CourseGroups_aggregate: CourseGroup_Aggregate;
  /** An array relationship */
  CourseInstructors: Array<CourseInstructor>;
  /** An aggregate relationship */
  CourseInstructors_aggregate: CourseInstructor_Aggregate;
  /** An array relationship */
  CourseLocations: Array<CourseLocation>;
  /** An aggregate relationship */
  CourseLocations_aggregate: CourseLocation_Aggregate;
  /** An object relationship */
  CourseStatus: CourseStatus;
  /** An array relationship */
  DegreeCourses: Array<CourseDegree>;
  /** An aggregate relationship */
  DegreeCourses_aggregate: CourseDegree_Aggregate;
  /** An object relationship */
  Language?: Maybe<Language>;
  /** An object relationship */
  Program: Program;
  /** An array relationship */
  Sessions: Array<Session>;
  /** An aggregate relationship */
  Sessions_aggregate: Session_Aggregate;
  /** An object relationship */
  Weekday: Weekday;
  /** Indicates whether participants can get an achievement certificate. If the course is offering ECTS, it must be possible to obtain this certificate for the course */
  achievementCertificatePossible: Scalars['Boolean']['output'];
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd: Scalars['date']['output'];
  /** Indicates whether participants will get a certificate showing the list of attendances (only issued if the did not miss then maxMissedCourses) */
  attendanceCertificatePossible: Scalars['Boolean']['output'];
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: Maybe<Scalars['String']['output']>;
  /** Content of the first course description field */
  contentDescriptionField1?: Maybe<Scalars['String']['output']>;
  /** Content of the second course description field */
  contentDescriptionField2?: Maybe<Scalars['String']['output']>;
  /** A text providing info about the costs of a participation. */
  cost: Scalars['String']['output'];
  /** The cover image for the course */
  coverImage?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects: Scalars['String']['output'];
  /** The time the course ends each week. */
  endTime?: Maybe<Scalars['time']['output']>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: Maybe<Scalars['String']['output']>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: Maybe<Scalars['String']['output']>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** The language the course is given in. */
  language?: Maybe<Scalars['String']['output']>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: Maybe<Scalars['String']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions: Scalars['Int']['output'];
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Int']['output']>;
  /** Id of the program to which the course belongs. */
  programId: Scalars['Int']['output'];
  /** Decides whether the course is published for all users or not. */
  published: Scalars['Boolean']['output'];
  /** The time the course starts each week. */
  startTime?: Maybe<Scalars['time']['output']>;
  /** Shows whether the current status is DRAFT, READY_FOR_PUBLICATION, READY_FOR_APPLICATION, APPLICANTS_INVITED, or PARTICIPANTS_RATED, which is set in correspondance to the tabs completed on the course administration page */
  status: CourseStatus_Enum;
  /** Shown below the title on the course page */
  tagline: Scalars['String']['output'];
  /** The title of the course (only editable by an admin user) */
  title: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The day of the week the course takes place. */
  weekDay: Weekday_Enum;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseAchievementOptionCoursesArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseAchievementOptionCourses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseDegreesArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseDegrees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseEnrollmentsArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseEnrollments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseGroupsArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseInstructorsArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseInstructors_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseLocationsArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseCourseLocations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseDegreeCoursesArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseDegreeCourses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseSessionsArgs = {
  distinct_on?: InputMaybe<Array<Session_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Session_Order_By>>;
  where?: InputMaybe<Session_Bool_Exp>;
};


/** New courses are added by admins only and belong to exactly one program. Most of the columns can be set by the instructor and the admin. */
export type CourseSessions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Session_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Session_Order_By>>;
  where?: InputMaybe<Session_Bool_Exp>;
};

export type CourseAttributes = {
  __typename?: 'CourseAttributes';
  abstract: Scalars['String']['output'];
  courseMode: Scalars['String']['output'];
  description: Scalars['String']['output'];
  image: Image;
  languages: Array<Scalars['String']['output']>;
  moocProvider: Scalars['String']['output'];
  name: Scalars['String']['output'];
  startDate: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

/** A new entry is added for any course that is added to a degree program (which is a regular course but part of tge program "DEGREE"). */
export type CourseDegree = {
  __typename?: 'CourseDegree';
  /** An object relationship */
  Course: Course;
  /** An object relationship */
  DegreeCourse: Course;
  /** ID of the course which is assigned to a degree */
  courseId: Scalars['Int']['output'];
  created_at: Scalars['timestamptz']['output'];
  /** ID of the course that represents a degree */
  degreeCourseId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "CourseDegree" */
export type CourseDegree_Aggregate = {
  __typename?: 'CourseDegree_aggregate';
  aggregate?: Maybe<CourseDegree_Aggregate_Fields>;
  nodes: Array<CourseDegree>;
};

export type CourseDegree_Aggregate_Bool_Exp = {
  count?: InputMaybe<CourseDegree_Aggregate_Bool_Exp_Count>;
};

export type CourseDegree_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CourseDegree_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CourseDegree_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "CourseDegree" */
export type CourseDegree_Aggregate_Fields = {
  __typename?: 'CourseDegree_aggregate_fields';
  avg?: Maybe<CourseDegree_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CourseDegree_Max_Fields>;
  min?: Maybe<CourseDegree_Min_Fields>;
  stddev?: Maybe<CourseDegree_Stddev_Fields>;
  stddev_pop?: Maybe<CourseDegree_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CourseDegree_Stddev_Samp_Fields>;
  sum?: Maybe<CourseDegree_Sum_Fields>;
  var_pop?: Maybe<CourseDegree_Var_Pop_Fields>;
  var_samp?: Maybe<CourseDegree_Var_Samp_Fields>;
  variance?: Maybe<CourseDegree_Variance_Fields>;
};


/** aggregate fields of "CourseDegree" */
export type CourseDegree_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseDegree_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "CourseDegree" */
export type CourseDegree_Aggregate_Order_By = {
  avg?: InputMaybe<CourseDegree_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<CourseDegree_Max_Order_By>;
  min?: InputMaybe<CourseDegree_Min_Order_By>;
  stddev?: InputMaybe<CourseDegree_Stddev_Order_By>;
  stddev_pop?: InputMaybe<CourseDegree_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<CourseDegree_Stddev_Samp_Order_By>;
  sum?: InputMaybe<CourseDegree_Sum_Order_By>;
  var_pop?: InputMaybe<CourseDegree_Var_Pop_Order_By>;
  var_samp?: InputMaybe<CourseDegree_Var_Samp_Order_By>;
  variance?: InputMaybe<CourseDegree_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CourseDegree" */
export type CourseDegree_Arr_Rel_Insert_Input = {
  data: Array<CourseDegree_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseDegree_On_Conflict>;
};

/** aggregate avg on columns */
export type CourseDegree_Avg_Fields = {
  __typename?: 'CourseDegree_avg_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "CourseDegree" */
export type CourseDegree_Avg_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CourseDegree". All fields are combined with a logical 'AND'. */
export type CourseDegree_Bool_Exp = {
  Course?: InputMaybe<Course_Bool_Exp>;
  DegreeCourse?: InputMaybe<Course_Bool_Exp>;
  _and?: InputMaybe<Array<CourseDegree_Bool_Exp>>;
  _not?: InputMaybe<CourseDegree_Bool_Exp>;
  _or?: InputMaybe<Array<CourseDegree_Bool_Exp>>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  degreeCourseId?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseDegree" */
export enum CourseDegree_Constraint {
  /** unique or primary key constraint on columns "id" */
  CourseDegreePkey = 'CourseDegree_pkey'
}

/** input type for incrementing numeric columns in table "CourseDegree" */
export type CourseDegree_Inc_Input = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CourseDegree" */
export type CourseDegree_Insert_Input = {
  Course?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  DegreeCourse?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type CourseDegree_Max_Fields = {
  __typename?: 'CourseDegree_max_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "CourseDegree" */
export type CourseDegree_Max_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type CourseDegree_Min_Fields = {
  __typename?: 'CourseDegree_min_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "CourseDegree" */
export type CourseDegree_Min_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "CourseDegree" */
export type CourseDegree_Mutation_Response = {
  __typename?: 'CourseDegree_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseDegree>;
};

/** on_conflict condition type for table "CourseDegree" */
export type CourseDegree_On_Conflict = {
  constraint: CourseDegree_Constraint;
  update_columns?: Array<CourseDegree_Update_Column>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseDegree". */
export type CourseDegree_Order_By = {
  Course?: InputMaybe<Course_Order_By>;
  DegreeCourse?: InputMaybe<Course_Order_By>;
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseDegree */
export type CourseDegree_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CourseDegree" */
export enum CourseDegree_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DegreeCourseId = 'degreeCourseId',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "CourseDegree" */
export type CourseDegree_Set_Input = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type CourseDegree_Stddev_Fields = {
  __typename?: 'CourseDegree_stddev_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "CourseDegree" */
export type CourseDegree_Stddev_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CourseDegree_Stddev_Pop_Fields = {
  __typename?: 'CourseDegree_stddev_pop_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "CourseDegree" */
export type CourseDegree_Stddev_Pop_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CourseDegree_Stddev_Samp_Fields = {
  __typename?: 'CourseDegree_stddev_samp_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "CourseDegree" */
export type CourseDegree_Stddev_Samp_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "CourseDegree" */
export type CourseDegree_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseDegree_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseDegree_Stream_Cursor_Value_Input = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type CourseDegree_Sum_Fields = {
  __typename?: 'CourseDegree_sum_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Int']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "CourseDegree" */
export type CourseDegree_Sum_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "CourseDegree" */
export enum CourseDegree_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DegreeCourseId = 'degreeCourseId',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type CourseDegree_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CourseDegree_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseDegree_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseDegree_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CourseDegree_Var_Pop_Fields = {
  __typename?: 'CourseDegree_var_pop_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "CourseDegree" */
export type CourseDegree_Var_Pop_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CourseDegree_Var_Samp_Fields = {
  __typename?: 'CourseDegree_var_samp_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "CourseDegree" */
export type CourseDegree_Var_Samp_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type CourseDegree_Variance_Fields = {
  __typename?: 'CourseDegree_variance_fields';
  /** ID of the course which is assigned to a degree */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the course that represents a degree */
  degreeCourseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "CourseDegree" */
export type CourseDegree_Variance_Order_By = {
  /** ID of the course which is assigned to a degree */
  courseId?: InputMaybe<Order_By>;
  /** ID of the course that represents a degree */
  degreeCourseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** A new enrollment is added as soon as a user applies for a course. It includes all information about a (potential) particiaption in a course. */
export type CourseEnrollment = {
  __typename?: 'CourseEnrollment';
  /** An object relationship */
  Course: Course;
  /** An object relationship */
  CourseEnrollmentStatus: CourseEnrollmentStatus;
  /** An object relationship */
  MotivationRating: MotivationRating;
  /** An object relationship */
  User: User;
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: Maybe<Scalars['String']['output']>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: Maybe<Scalars['String']['output']>;
  /** The ID of the course of this enrollment from the given user */
  courseId: Scalars['Int']['output'];
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id: Scalars['Int']['output'];
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: Maybe<Scalars['date']['output']>;
  /** The text of the user's motivation letter */
  motivationLetter: Scalars['String']['output'];
  /** Rating that the user's motivation letter received from the course instructor */
  motivationRating: MotivationRating_Enum;
  /** The users current enrollment status to this course */
  status: CourseEnrollmentStatus_Enum;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user that enrolled for the given course */
  userId: Scalars['uuid']['output'];
};

/** A user's enrollment status for a given course. It is changed according to his acceptance to the course and depending on his participation success. */
export type CourseEnrollmentStatus = {
  __typename?: 'CourseEnrollmentStatus';
  /** An array relationship */
  CourseEnrollments: Array<CourseEnrollment>;
  /** An aggregate relationship */
  CourseEnrollments_aggregate: CourseEnrollment_Aggregate;
  comment: Scalars['String']['output'];
  value: Scalars['String']['output'];
};


/** A user's enrollment status for a given course. It is changed according to his acceptance to the course and depending on his participation success. */
export type CourseEnrollmentStatusCourseEnrollmentsArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


/** A user's enrollment status for a given course. It is changed according to his acceptance to the course and depending on his participation success. */
export type CourseEnrollmentStatusCourseEnrollments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};

/** aggregated selection of "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Aggregate = {
  __typename?: 'CourseEnrollmentStatus_aggregate';
  aggregate?: Maybe<CourseEnrollmentStatus_Aggregate_Fields>;
  nodes: Array<CourseEnrollmentStatus>;
};

/** aggregate fields of "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Aggregate_Fields = {
  __typename?: 'CourseEnrollmentStatus_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<CourseEnrollmentStatus_Max_Fields>;
  min?: Maybe<CourseEnrollmentStatus_Min_Fields>;
};


/** aggregate fields of "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseEnrollmentStatus_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "CourseEnrollmentStatus". All fields are combined with a logical 'AND'. */
export type CourseEnrollmentStatus_Bool_Exp = {
  CourseEnrollments?: InputMaybe<CourseEnrollment_Bool_Exp>;
  CourseEnrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<CourseEnrollmentStatus_Bool_Exp>>;
  _not?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
  _or?: InputMaybe<Array<CourseEnrollmentStatus_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseEnrollmentStatus" */
export enum CourseEnrollmentStatus_Constraint {
  /** unique or primary key constraint on columns "value" */
  EnrollmentStatusPkey = 'EnrollmentStatus_pkey'
}

export enum CourseEnrollmentStatus_Enum {
  /** The course was not successfully completed. */
  Aborted = 'ABORTED',
  /** The course application was received. */
  Applied = 'APPLIED',
  /** user has cancelled application */
  Cancelled = 'CANCELLED',
  /** The course was successfully completed by receiving at least one certificate. */
  Completed = 'COMPLETED',
  /** The course invitation was confirmed by the student. */
  Confirmed = 'CONFIRMED',
  /** Invitation was sent to Student. */
  Invited = 'INVITED',
  /** The application was rejected. */
  Rejected = 'REJECTED'
}

/** Boolean expression to compare columns of type "CourseEnrollmentStatus_enum". All fields are combined with logical 'AND'. */
export type CourseEnrollmentStatus_Enum_Comparison_Exp = {
  _eq?: InputMaybe<CourseEnrollmentStatus_Enum>;
  _in?: InputMaybe<Array<CourseEnrollmentStatus_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<CourseEnrollmentStatus_Enum>;
  _nin?: InputMaybe<Array<CourseEnrollmentStatus_Enum>>;
};

/** input type for inserting data into table "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Insert_Input = {
  CourseEnrollments?: InputMaybe<CourseEnrollment_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type CourseEnrollmentStatus_Max_Fields = {
  __typename?: 'CourseEnrollmentStatus_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type CourseEnrollmentStatus_Min_Fields = {
  __typename?: 'CourseEnrollmentStatus_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Mutation_Response = {
  __typename?: 'CourseEnrollmentStatus_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseEnrollmentStatus>;
};

/** input type for inserting object relation for remote table "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Obj_Rel_Insert_Input = {
  data: CourseEnrollmentStatus_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseEnrollmentStatus_On_Conflict>;
};

/** on_conflict condition type for table "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_On_Conflict = {
  constraint: CourseEnrollmentStatus_Constraint;
  update_columns?: Array<CourseEnrollmentStatus_Update_Column>;
  where?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseEnrollmentStatus". */
export type CourseEnrollmentStatus_Order_By = {
  CourseEnrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseEnrollmentStatus */
export type CourseEnrollmentStatus_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "CourseEnrollmentStatus" */
export enum CourseEnrollmentStatus_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "CourseEnrollmentStatus" */
export type CourseEnrollmentStatus_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseEnrollmentStatus_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseEnrollmentStatus_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "CourseEnrollmentStatus" */
export enum CourseEnrollmentStatus_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type CourseEnrollmentStatus_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseEnrollmentStatus_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseEnrollmentStatus_Bool_Exp;
};

/** aggregated selection of "CourseEnrollment" */
export type CourseEnrollment_Aggregate = {
  __typename?: 'CourseEnrollment_aggregate';
  aggregate?: Maybe<CourseEnrollment_Aggregate_Fields>;
  nodes: Array<CourseEnrollment>;
};

export type CourseEnrollment_Aggregate_Bool_Exp = {
  count?: InputMaybe<CourseEnrollment_Aggregate_Bool_Exp_Count>;
};

export type CourseEnrollment_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CourseEnrollment_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "CourseEnrollment" */
export type CourseEnrollment_Aggregate_Fields = {
  __typename?: 'CourseEnrollment_aggregate_fields';
  avg?: Maybe<CourseEnrollment_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CourseEnrollment_Max_Fields>;
  min?: Maybe<CourseEnrollment_Min_Fields>;
  stddev?: Maybe<CourseEnrollment_Stddev_Fields>;
  stddev_pop?: Maybe<CourseEnrollment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CourseEnrollment_Stddev_Samp_Fields>;
  sum?: Maybe<CourseEnrollment_Sum_Fields>;
  var_pop?: Maybe<CourseEnrollment_Var_Pop_Fields>;
  var_samp?: Maybe<CourseEnrollment_Var_Samp_Fields>;
  variance?: Maybe<CourseEnrollment_Variance_Fields>;
};


/** aggregate fields of "CourseEnrollment" */
export type CourseEnrollment_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "CourseEnrollment" */
export type CourseEnrollment_Aggregate_Order_By = {
  avg?: InputMaybe<CourseEnrollment_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<CourseEnrollment_Max_Order_By>;
  min?: InputMaybe<CourseEnrollment_Min_Order_By>;
  stddev?: InputMaybe<CourseEnrollment_Stddev_Order_By>;
  stddev_pop?: InputMaybe<CourseEnrollment_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<CourseEnrollment_Stddev_Samp_Order_By>;
  sum?: InputMaybe<CourseEnrollment_Sum_Order_By>;
  var_pop?: InputMaybe<CourseEnrollment_Var_Pop_Order_By>;
  var_samp?: InputMaybe<CourseEnrollment_Var_Samp_Order_By>;
  variance?: InputMaybe<CourseEnrollment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CourseEnrollment" */
export type CourseEnrollment_Arr_Rel_Insert_Input = {
  data: Array<CourseEnrollment_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseEnrollment_On_Conflict>;
};

/** aggregate avg on columns */
export type CourseEnrollment_Avg_Fields = {
  __typename?: 'CourseEnrollment_avg_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Avg_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CourseEnrollment". All fields are combined with a logical 'AND'. */
export type CourseEnrollment_Bool_Exp = {
  Course?: InputMaybe<Course_Bool_Exp>;
  CourseEnrollmentStatus?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
  MotivationRating?: InputMaybe<MotivationRating_Bool_Exp>;
  User?: InputMaybe<User_Bool_Exp>;
  _and?: InputMaybe<Array<CourseEnrollment_Bool_Exp>>;
  _not?: InputMaybe<CourseEnrollment_Bool_Exp>;
  _or?: InputMaybe<Array<CourseEnrollment_Bool_Exp>>;
  achievementCertificateURL?: InputMaybe<String_Comparison_Exp>;
  attendanceCertificateURL?: InputMaybe<String_Comparison_Exp>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  invitationExpirationDate?: InputMaybe<Date_Comparison_Exp>;
  motivationLetter?: InputMaybe<String_Comparison_Exp>;
  motivationRating?: InputMaybe<MotivationRating_Enum_Comparison_Exp>;
  status?: InputMaybe<CourseEnrollmentStatus_Enum_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseEnrollment" */
export enum CourseEnrollment_Constraint {
  /** unique or primary key constraint on columns "id" */
  EnrollmentPkey = 'Enrollment_pkey',
  /** unique or primary key constraint on columns "courseId", "userId" */
  UniqueUserCourse = 'uniqueUserCourse'
}

/** input type for incrementing numeric columns in table "CourseEnrollment" */
export type CourseEnrollment_Inc_Input = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CourseEnrollment" */
export type CourseEnrollment_Insert_Input = {
  Course?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  CourseEnrollmentStatus?: InputMaybe<CourseEnrollmentStatus_Obj_Rel_Insert_Input>;
  MotivationRating?: InputMaybe<MotivationRating_Obj_Rel_Insert_Input>;
  User?: InputMaybe<User_Obj_Rel_Insert_Input>;
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: InputMaybe<Scalars['String']['input']>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: InputMaybe<Scalars['date']['input']>;
  /** The text of the user's motivation letter */
  motivationLetter?: InputMaybe<Scalars['String']['input']>;
  /** Rating that the user's motivation letter received from the course instructor */
  motivationRating?: InputMaybe<MotivationRating_Enum>;
  /** The users current enrollment status to this course */
  status?: InputMaybe<CourseEnrollmentStatus_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user that enrolled for the given course */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type CourseEnrollment_Max_Fields = {
  __typename?: 'CourseEnrollment_max_fields';
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: Maybe<Scalars['String']['output']>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: Maybe<Scalars['String']['output']>;
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: Maybe<Scalars['date']['output']>;
  /** The text of the user's motivation letter */
  motivationLetter?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user that enrolled for the given course */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Max_Order_By = {
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: InputMaybe<Order_By>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: InputMaybe<Order_By>;
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: InputMaybe<Order_By>;
  /** The text of the user's motivation letter */
  motivationLetter?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The ID of the user that enrolled for the given course */
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type CourseEnrollment_Min_Fields = {
  __typename?: 'CourseEnrollment_min_fields';
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: Maybe<Scalars['String']['output']>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: Maybe<Scalars['String']['output']>;
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: Maybe<Scalars['date']['output']>;
  /** The text of the user's motivation letter */
  motivationLetter?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user that enrolled for the given course */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Min_Order_By = {
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: InputMaybe<Order_By>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: InputMaybe<Order_By>;
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: InputMaybe<Order_By>;
  /** The text of the user's motivation letter */
  motivationLetter?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The ID of the user that enrolled for the given course */
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "CourseEnrollment" */
export type CourseEnrollment_Mutation_Response = {
  __typename?: 'CourseEnrollment_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseEnrollment>;
};

/** on_conflict condition type for table "CourseEnrollment" */
export type CourseEnrollment_On_Conflict = {
  constraint: CourseEnrollment_Constraint;
  update_columns?: Array<CourseEnrollment_Update_Column>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseEnrollment". */
export type CourseEnrollment_Order_By = {
  Course?: InputMaybe<Course_Order_By>;
  CourseEnrollmentStatus?: InputMaybe<CourseEnrollmentStatus_Order_By>;
  MotivationRating?: InputMaybe<MotivationRating_Order_By>;
  User?: InputMaybe<User_Order_By>;
  achievementCertificateURL?: InputMaybe<Order_By>;
  attendanceCertificateURL?: InputMaybe<Order_By>;
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  invitationExpirationDate?: InputMaybe<Order_By>;
  motivationLetter?: InputMaybe<Order_By>;
  motivationRating?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseEnrollment */
export type CourseEnrollment_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CourseEnrollment" */
export enum CourseEnrollment_Select_Column {
  /** column name */
  AchievementCertificateUrl = 'achievementCertificateURL',
  /** column name */
  AttendanceCertificateUrl = 'attendanceCertificateURL',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  InvitationExpirationDate = 'invitationExpirationDate',
  /** column name */
  MotivationLetter = 'motivationLetter',
  /** column name */
  MotivationRating = 'motivationRating',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "CourseEnrollment" */
export type CourseEnrollment_Set_Input = {
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: InputMaybe<Scalars['String']['input']>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: InputMaybe<Scalars['date']['input']>;
  /** The text of the user's motivation letter */
  motivationLetter?: InputMaybe<Scalars['String']['input']>;
  /** Rating that the user's motivation letter received from the course instructor */
  motivationRating?: InputMaybe<MotivationRating_Enum>;
  /** The users current enrollment status to this course */
  status?: InputMaybe<CourseEnrollmentStatus_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user that enrolled for the given course */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type CourseEnrollment_Stddev_Fields = {
  __typename?: 'CourseEnrollment_stddev_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Stddev_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CourseEnrollment_Stddev_Pop_Fields = {
  __typename?: 'CourseEnrollment_stddev_pop_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Stddev_Pop_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CourseEnrollment_Stddev_Samp_Fields = {
  __typename?: 'CourseEnrollment_stddev_samp_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Stddev_Samp_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "CourseEnrollment" */
export type CourseEnrollment_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseEnrollment_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseEnrollment_Stream_Cursor_Value_Input = {
  /** URL to the file containing the user's achievement certificate (if he obtained one) */
  achievementCertificateURL?: InputMaybe<Scalars['String']['input']>;
  /** URL to the file containing the user's attendance certificate (if he obtained one) */
  attendanceCertificateURL?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The last day a user can confirm his/her invitation to the given course */
  invitationExpirationDate?: InputMaybe<Scalars['date']['input']>;
  /** The text of the user's motivation letter */
  motivationLetter?: InputMaybe<Scalars['String']['input']>;
  /** Rating that the user's motivation letter received from the course instructor */
  motivationRating?: InputMaybe<MotivationRating_Enum>;
  /** The users current enrollment status to this course */
  status?: InputMaybe<CourseEnrollmentStatus_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user that enrolled for the given course */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type CourseEnrollment_Sum_Fields = {
  __typename?: 'CourseEnrollment_sum_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Sum_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "CourseEnrollment" */
export enum CourseEnrollment_Update_Column {
  /** column name */
  AchievementCertificateUrl = 'achievementCertificateURL',
  /** column name */
  AttendanceCertificateUrl = 'attendanceCertificateURL',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  InvitationExpirationDate = 'invitationExpirationDate',
  /** column name */
  MotivationLetter = 'motivationLetter',
  /** column name */
  MotivationRating = 'motivationRating',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

export type CourseEnrollment_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CourseEnrollment_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseEnrollment_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseEnrollment_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CourseEnrollment_Var_Pop_Fields = {
  __typename?: 'CourseEnrollment_var_pop_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Var_Pop_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CourseEnrollment_Var_Samp_Fields = {
  __typename?: 'CourseEnrollment_var_samp_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Var_Samp_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type CourseEnrollment_Variance_Fields = {
  __typename?: 'CourseEnrollment_variance_fields';
  /** The ID of the course of this enrollment from the given user */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "CourseEnrollment" */
export type CourseEnrollment_Variance_Order_By = {
  /** The ID of the course of this enrollment from the given user */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Assigns the courses to one or more of the given groups. */
export type CourseGroup = {
  __typename?: 'CourseGroup';
  /** An object relationship */
  Course: Course;
  /** An object relationship */
  CourseGroupOption: CourseGroupOption;
  courseId: Scalars['Int']['output'];
  created_at: Scalars['timestamptz']['output'];
  groupOptionId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updated_at: Scalars['timestamptz']['output'];
};

/** Defines the possible groups a course can be assigned to, to use these for filtering. The provided order is used to show the groups in the respective order. */
export type CourseGroupOption = {
  __typename?: 'CourseGroupOption';
  /** An array relationship */
  CourseGroups: Array<CourseGroup>;
  /** An aggregate relationship */
  CourseGroups_aggregate: CourseGroup_Aggregate;
  created_at: Scalars['timestamptz']['output'];
  id: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updated_at: Scalars['timestamptz']['output'];
};


/** Defines the possible groups a course can be assigned to, to use these for filtering. The provided order is used to show the groups in the respective order. */
export type CourseGroupOptionCourseGroupsArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


/** Defines the possible groups a course can be assigned to, to use these for filtering. The provided order is used to show the groups in the respective order. */
export type CourseGroupOptionCourseGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};

/** aggregated selection of "CourseGroupOption" */
export type CourseGroupOption_Aggregate = {
  __typename?: 'CourseGroupOption_aggregate';
  aggregate?: Maybe<CourseGroupOption_Aggregate_Fields>;
  nodes: Array<CourseGroupOption>;
};

/** aggregate fields of "CourseGroupOption" */
export type CourseGroupOption_Aggregate_Fields = {
  __typename?: 'CourseGroupOption_aggregate_fields';
  avg?: Maybe<CourseGroupOption_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CourseGroupOption_Max_Fields>;
  min?: Maybe<CourseGroupOption_Min_Fields>;
  stddev?: Maybe<CourseGroupOption_Stddev_Fields>;
  stddev_pop?: Maybe<CourseGroupOption_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CourseGroupOption_Stddev_Samp_Fields>;
  sum?: Maybe<CourseGroupOption_Sum_Fields>;
  var_pop?: Maybe<CourseGroupOption_Var_Pop_Fields>;
  var_samp?: Maybe<CourseGroupOption_Var_Samp_Fields>;
  variance?: Maybe<CourseGroupOption_Variance_Fields>;
};


/** aggregate fields of "CourseGroupOption" */
export type CourseGroupOption_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseGroupOption_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type CourseGroupOption_Avg_Fields = {
  __typename?: 'CourseGroupOption_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "CourseGroupOption". All fields are combined with a logical 'AND'. */
export type CourseGroupOption_Bool_Exp = {
  CourseGroups?: InputMaybe<CourseGroup_Bool_Exp>;
  CourseGroups_aggregate?: InputMaybe<CourseGroup_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<CourseGroupOption_Bool_Exp>>;
  _not?: InputMaybe<CourseGroupOption_Bool_Exp>;
  _or?: InputMaybe<Array<CourseGroupOption_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  order?: InputMaybe<Int_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseGroupOption" */
export enum CourseGroupOption_Constraint {
  /** unique or primary key constraint on columns "id" */
  CourseGroupOptionPkey = 'CourseGroupOption_pkey',
  /** unique or primary key constraint on columns "title" */
  CourseGroupOptionTitleKey = 'CourseGroupOption_title_key'
}

/** input type for incrementing numeric columns in table "CourseGroupOption" */
export type CourseGroupOption_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CourseGroupOption" */
export type CourseGroupOption_Insert_Input = {
  CourseGroups?: InputMaybe<CourseGroup_Arr_Rel_Insert_Input>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type CourseGroupOption_Max_Fields = {
  __typename?: 'CourseGroupOption_max_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** aggregate min on columns */
export type CourseGroupOption_Min_Fields = {
  __typename?: 'CourseGroupOption_min_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** response of any mutation on the table "CourseGroupOption" */
export type CourseGroupOption_Mutation_Response = {
  __typename?: 'CourseGroupOption_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseGroupOption>;
};

/** input type for inserting object relation for remote table "CourseGroupOption" */
export type CourseGroupOption_Obj_Rel_Insert_Input = {
  data: CourseGroupOption_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseGroupOption_On_Conflict>;
};

/** on_conflict condition type for table "CourseGroupOption" */
export type CourseGroupOption_On_Conflict = {
  constraint: CourseGroupOption_Constraint;
  update_columns?: Array<CourseGroupOption_Update_Column>;
  where?: InputMaybe<CourseGroupOption_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseGroupOption". */
export type CourseGroupOption_Order_By = {
  CourseGroups_aggregate?: InputMaybe<CourseGroup_Aggregate_Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  order?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseGroupOption */
export type CourseGroupOption_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CourseGroupOption" */
export enum CourseGroupOption_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "CourseGroupOption" */
export type CourseGroupOption_Set_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type CourseGroupOption_Stddev_Fields = {
  __typename?: 'CourseGroupOption_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type CourseGroupOption_Stddev_Pop_Fields = {
  __typename?: 'CourseGroupOption_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type CourseGroupOption_Stddev_Samp_Fields = {
  __typename?: 'CourseGroupOption_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "CourseGroupOption" */
export type CourseGroupOption_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseGroupOption_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseGroupOption_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type CourseGroupOption_Sum_Fields = {
  __typename?: 'CourseGroupOption_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};

/** update columns of table "CourseGroupOption" */
export enum CourseGroupOption_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type CourseGroupOption_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CourseGroupOption_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseGroupOption_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseGroupOption_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CourseGroupOption_Var_Pop_Fields = {
  __typename?: 'CourseGroupOption_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type CourseGroupOption_Var_Samp_Fields = {
  __typename?: 'CourseGroupOption_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type CourseGroupOption_Variance_Fields = {
  __typename?: 'CourseGroupOption_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

/** aggregated selection of "CourseGroup" */
export type CourseGroup_Aggregate = {
  __typename?: 'CourseGroup_aggregate';
  aggregate?: Maybe<CourseGroup_Aggregate_Fields>;
  nodes: Array<CourseGroup>;
};

export type CourseGroup_Aggregate_Bool_Exp = {
  count?: InputMaybe<CourseGroup_Aggregate_Bool_Exp_Count>;
};

export type CourseGroup_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CourseGroup_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CourseGroup_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "CourseGroup" */
export type CourseGroup_Aggregate_Fields = {
  __typename?: 'CourseGroup_aggregate_fields';
  avg?: Maybe<CourseGroup_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CourseGroup_Max_Fields>;
  min?: Maybe<CourseGroup_Min_Fields>;
  stddev?: Maybe<CourseGroup_Stddev_Fields>;
  stddev_pop?: Maybe<CourseGroup_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CourseGroup_Stddev_Samp_Fields>;
  sum?: Maybe<CourseGroup_Sum_Fields>;
  var_pop?: Maybe<CourseGroup_Var_Pop_Fields>;
  var_samp?: Maybe<CourseGroup_Var_Samp_Fields>;
  variance?: Maybe<CourseGroup_Variance_Fields>;
};


/** aggregate fields of "CourseGroup" */
export type CourseGroup_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseGroup_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "CourseGroup" */
export type CourseGroup_Aggregate_Order_By = {
  avg?: InputMaybe<CourseGroup_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<CourseGroup_Max_Order_By>;
  min?: InputMaybe<CourseGroup_Min_Order_By>;
  stddev?: InputMaybe<CourseGroup_Stddev_Order_By>;
  stddev_pop?: InputMaybe<CourseGroup_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<CourseGroup_Stddev_Samp_Order_By>;
  sum?: InputMaybe<CourseGroup_Sum_Order_By>;
  var_pop?: InputMaybe<CourseGroup_Var_Pop_Order_By>;
  var_samp?: InputMaybe<CourseGroup_Var_Samp_Order_By>;
  variance?: InputMaybe<CourseGroup_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CourseGroup" */
export type CourseGroup_Arr_Rel_Insert_Input = {
  data: Array<CourseGroup_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseGroup_On_Conflict>;
};

/** aggregate avg on columns */
export type CourseGroup_Avg_Fields = {
  __typename?: 'CourseGroup_avg_fields';
  courseId?: Maybe<Scalars['Float']['output']>;
  groupOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "CourseGroup" */
export type CourseGroup_Avg_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CourseGroup". All fields are combined with a logical 'AND'. */
export type CourseGroup_Bool_Exp = {
  Course?: InputMaybe<Course_Bool_Exp>;
  CourseGroupOption?: InputMaybe<CourseGroupOption_Bool_Exp>;
  _and?: InputMaybe<Array<CourseGroup_Bool_Exp>>;
  _not?: InputMaybe<CourseGroup_Bool_Exp>;
  _or?: InputMaybe<Array<CourseGroup_Bool_Exp>>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  groupOptionId?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseGroup" */
export enum CourseGroup_Constraint {
  /** unique or primary key constraint on columns "id" */
  CourseGroupPkey = 'CourseGroup_pkey'
}

/** input type for incrementing numeric columns in table "CourseGroup" */
export type CourseGroup_Inc_Input = {
  courseId?: InputMaybe<Scalars['Int']['input']>;
  groupOptionId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CourseGroup" */
export type CourseGroup_Insert_Input = {
  Course?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  CourseGroupOption?: InputMaybe<CourseGroupOption_Obj_Rel_Insert_Input>;
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  groupOptionId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type CourseGroup_Max_Fields = {
  __typename?: 'CourseGroup_max_fields';
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  groupOptionId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "CourseGroup" */
export type CourseGroup_Max_Order_By = {
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type CourseGroup_Min_Fields = {
  __typename?: 'CourseGroup_min_fields';
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  groupOptionId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "CourseGroup" */
export type CourseGroup_Min_Order_By = {
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "CourseGroup" */
export type CourseGroup_Mutation_Response = {
  __typename?: 'CourseGroup_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseGroup>;
};

/** on_conflict condition type for table "CourseGroup" */
export type CourseGroup_On_Conflict = {
  constraint: CourseGroup_Constraint;
  update_columns?: Array<CourseGroup_Update_Column>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseGroup". */
export type CourseGroup_Order_By = {
  Course?: InputMaybe<Course_Order_By>;
  CourseGroupOption?: InputMaybe<CourseGroupOption_Order_By>;
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseGroup */
export type CourseGroup_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CourseGroup" */
export enum CourseGroup_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  GroupOptionId = 'groupOptionId',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "CourseGroup" */
export type CourseGroup_Set_Input = {
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  groupOptionId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type CourseGroup_Stddev_Fields = {
  __typename?: 'CourseGroup_stddev_fields';
  courseId?: Maybe<Scalars['Float']['output']>;
  groupOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "CourseGroup" */
export type CourseGroup_Stddev_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CourseGroup_Stddev_Pop_Fields = {
  __typename?: 'CourseGroup_stddev_pop_fields';
  courseId?: Maybe<Scalars['Float']['output']>;
  groupOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "CourseGroup" */
export type CourseGroup_Stddev_Pop_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CourseGroup_Stddev_Samp_Fields = {
  __typename?: 'CourseGroup_stddev_samp_fields';
  courseId?: Maybe<Scalars['Float']['output']>;
  groupOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "CourseGroup" */
export type CourseGroup_Stddev_Samp_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "CourseGroup" */
export type CourseGroup_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseGroup_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseGroup_Stream_Cursor_Value_Input = {
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  groupOptionId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type CourseGroup_Sum_Fields = {
  __typename?: 'CourseGroup_sum_fields';
  courseId?: Maybe<Scalars['Int']['output']>;
  groupOptionId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "CourseGroup" */
export type CourseGroup_Sum_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "CourseGroup" */
export enum CourseGroup_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  GroupOptionId = 'groupOptionId',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type CourseGroup_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CourseGroup_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseGroup_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseGroup_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CourseGroup_Var_Pop_Fields = {
  __typename?: 'CourseGroup_var_pop_fields';
  courseId?: Maybe<Scalars['Float']['output']>;
  groupOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "CourseGroup" */
export type CourseGroup_Var_Pop_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CourseGroup_Var_Samp_Fields = {
  __typename?: 'CourseGroup_var_samp_fields';
  courseId?: Maybe<Scalars['Float']['output']>;
  groupOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "CourseGroup" */
export type CourseGroup_Var_Samp_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type CourseGroup_Variance_Fields = {
  __typename?: 'CourseGroup_variance_fields';
  courseId?: Maybe<Scalars['Float']['output']>;
  groupOptionId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "CourseGroup" */
export type CourseGroup_Variance_Order_By = {
  courseId?: InputMaybe<Order_By>;
  groupOptionId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** A new course instructor is added as soon as an admin selects an expert (or a user - which is then added to the expert table) as an instructor for a course. */
export type CourseInstructor = {
  __typename?: 'CourseInstructor';
  /** An object relationship */
  Course: Course;
  /** An object relationship */
  Expert: Expert;
  /** ID of the course which has the given expert as an instructor */
  courseId: Scalars['Int']['output'];
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** aggregated selection of "CourseInstructor" */
export type CourseInstructor_Aggregate = {
  __typename?: 'CourseInstructor_aggregate';
  aggregate?: Maybe<CourseInstructor_Aggregate_Fields>;
  nodes: Array<CourseInstructor>;
};

export type CourseInstructor_Aggregate_Bool_Exp = {
  count?: InputMaybe<CourseInstructor_Aggregate_Bool_Exp_Count>;
};

export type CourseInstructor_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CourseInstructor_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "CourseInstructor" */
export type CourseInstructor_Aggregate_Fields = {
  __typename?: 'CourseInstructor_aggregate_fields';
  avg?: Maybe<CourseInstructor_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CourseInstructor_Max_Fields>;
  min?: Maybe<CourseInstructor_Min_Fields>;
  stddev?: Maybe<CourseInstructor_Stddev_Fields>;
  stddev_pop?: Maybe<CourseInstructor_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CourseInstructor_Stddev_Samp_Fields>;
  sum?: Maybe<CourseInstructor_Sum_Fields>;
  var_pop?: Maybe<CourseInstructor_Var_Pop_Fields>;
  var_samp?: Maybe<CourseInstructor_Var_Samp_Fields>;
  variance?: Maybe<CourseInstructor_Variance_Fields>;
};


/** aggregate fields of "CourseInstructor" */
export type CourseInstructor_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "CourseInstructor" */
export type CourseInstructor_Aggregate_Order_By = {
  avg?: InputMaybe<CourseInstructor_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<CourseInstructor_Max_Order_By>;
  min?: InputMaybe<CourseInstructor_Min_Order_By>;
  stddev?: InputMaybe<CourseInstructor_Stddev_Order_By>;
  stddev_pop?: InputMaybe<CourseInstructor_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<CourseInstructor_Stddev_Samp_Order_By>;
  sum?: InputMaybe<CourseInstructor_Sum_Order_By>;
  var_pop?: InputMaybe<CourseInstructor_Var_Pop_Order_By>;
  var_samp?: InputMaybe<CourseInstructor_Var_Samp_Order_By>;
  variance?: InputMaybe<CourseInstructor_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CourseInstructor" */
export type CourseInstructor_Arr_Rel_Insert_Input = {
  data: Array<CourseInstructor_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseInstructor_On_Conflict>;
};

/** aggregate avg on columns */
export type CourseInstructor_Avg_Fields = {
  __typename?: 'CourseInstructor_avg_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "CourseInstructor" */
export type CourseInstructor_Avg_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CourseInstructor". All fields are combined with a logical 'AND'. */
export type CourseInstructor_Bool_Exp = {
  Course?: InputMaybe<Course_Bool_Exp>;
  Expert?: InputMaybe<Expert_Bool_Exp>;
  _and?: InputMaybe<Array<CourseInstructor_Bool_Exp>>;
  _not?: InputMaybe<CourseInstructor_Bool_Exp>;
  _or?: InputMaybe<Array<CourseInstructor_Bool_Exp>>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  expertId?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseInstructor" */
export enum CourseInstructor_Constraint {
  /** unique or primary key constraint on columns "id" */
  CourseInstructorPkey = 'CourseInstructor_pkey'
}

/** input type for incrementing numeric columns in table "CourseInstructor" */
export type CourseInstructor_Inc_Input = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CourseInstructor" */
export type CourseInstructor_Insert_Input = {
  Course?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  Expert?: InputMaybe<Expert_Obj_Rel_Insert_Input>;
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type CourseInstructor_Max_Fields = {
  __typename?: 'CourseInstructor_max_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "CourseInstructor" */
export type CourseInstructor_Max_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type CourseInstructor_Min_Fields = {
  __typename?: 'CourseInstructor_min_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "CourseInstructor" */
export type CourseInstructor_Min_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "CourseInstructor" */
export type CourseInstructor_Mutation_Response = {
  __typename?: 'CourseInstructor_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseInstructor>;
};

/** on_conflict condition type for table "CourseInstructor" */
export type CourseInstructor_On_Conflict = {
  constraint: CourseInstructor_Constraint;
  update_columns?: Array<CourseInstructor_Update_Column>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseInstructor". */
export type CourseInstructor_Order_By = {
  Course?: InputMaybe<Course_Order_By>;
  Expert?: InputMaybe<Expert_Order_By>;
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseInstructor */
export type CourseInstructor_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CourseInstructor" */
export enum CourseInstructor_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpertId = 'expertId',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "CourseInstructor" */
export type CourseInstructor_Set_Input = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type CourseInstructor_Stddev_Fields = {
  __typename?: 'CourseInstructor_stddev_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "CourseInstructor" */
export type CourseInstructor_Stddev_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CourseInstructor_Stddev_Pop_Fields = {
  __typename?: 'CourseInstructor_stddev_pop_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "CourseInstructor" */
export type CourseInstructor_Stddev_Pop_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CourseInstructor_Stddev_Samp_Fields = {
  __typename?: 'CourseInstructor_stddev_samp_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "CourseInstructor" */
export type CourseInstructor_Stddev_Samp_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "CourseInstructor" */
export type CourseInstructor_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseInstructor_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseInstructor_Stream_Cursor_Value_Input = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type CourseInstructor_Sum_Fields = {
  __typename?: 'CourseInstructor_sum_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Int']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "CourseInstructor" */
export type CourseInstructor_Sum_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "CourseInstructor" */
export enum CourseInstructor_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpertId = 'expertId',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type CourseInstructor_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CourseInstructor_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseInstructor_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseInstructor_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CourseInstructor_Var_Pop_Fields = {
  __typename?: 'CourseInstructor_var_pop_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "CourseInstructor" */
export type CourseInstructor_Var_Pop_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CourseInstructor_Var_Samp_Fields = {
  __typename?: 'CourseInstructor_var_samp_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "CourseInstructor" */
export type CourseInstructor_Var_Samp_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type CourseInstructor_Variance_Fields = {
  __typename?: 'CourseInstructor_variance_fields';
  /** ID of the course which has the given expert as an instructor */
  courseId?: Maybe<Scalars['Float']['output']>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "CourseInstructor" */
export type CourseInstructor_Variance_Order_By = {
  /** ID of the course which has the given expert as an instructor */
  courseId?: InputMaybe<Order_By>;
  /** ID of the expert, who is instructor for the given course */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** The course instructor can add one or several of the possible general locations for the administration of a course. Further, either a link to a video conference or GPS coordinates of an actual location can be provided. The latter will be used as defaul values for the location addresses provided in each session. */
export type CourseLocation = {
  __typename?: 'CourseLocation';
  /** An object relationship */
  Course: Course;
  /** An object relationship */
  LocationOption?: Maybe<LocationOption>;
  /** The ID of the course for which the location is provided for */
  courseId: Scalars['Int']['output'];
  created_at: Scalars['timestamptz']['output'];
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** Either 'ONLINE' or one of the possible given offline locations */
  locationOption?: Maybe<LocationOption_Enum>;
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "CourseLocation" */
export type CourseLocation_Aggregate = {
  __typename?: 'CourseLocation_aggregate';
  aggregate?: Maybe<CourseLocation_Aggregate_Fields>;
  nodes: Array<CourseLocation>;
};

export type CourseLocation_Aggregate_Bool_Exp = {
  count?: InputMaybe<CourseLocation_Aggregate_Bool_Exp_Count>;
};

export type CourseLocation_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CourseLocation_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CourseLocation_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "CourseLocation" */
export type CourseLocation_Aggregate_Fields = {
  __typename?: 'CourseLocation_aggregate_fields';
  avg?: Maybe<CourseLocation_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<CourseLocation_Max_Fields>;
  min?: Maybe<CourseLocation_Min_Fields>;
  stddev?: Maybe<CourseLocation_Stddev_Fields>;
  stddev_pop?: Maybe<CourseLocation_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CourseLocation_Stddev_Samp_Fields>;
  sum?: Maybe<CourseLocation_Sum_Fields>;
  var_pop?: Maybe<CourseLocation_Var_Pop_Fields>;
  var_samp?: Maybe<CourseLocation_Var_Samp_Fields>;
  variance?: Maybe<CourseLocation_Variance_Fields>;
};


/** aggregate fields of "CourseLocation" */
export type CourseLocation_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseLocation_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "CourseLocation" */
export type CourseLocation_Aggregate_Order_By = {
  avg?: InputMaybe<CourseLocation_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<CourseLocation_Max_Order_By>;
  min?: InputMaybe<CourseLocation_Min_Order_By>;
  stddev?: InputMaybe<CourseLocation_Stddev_Order_By>;
  stddev_pop?: InputMaybe<CourseLocation_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<CourseLocation_Stddev_Samp_Order_By>;
  sum?: InputMaybe<CourseLocation_Sum_Order_By>;
  var_pop?: InputMaybe<CourseLocation_Var_Pop_Order_By>;
  var_samp?: InputMaybe<CourseLocation_Var_Samp_Order_By>;
  variance?: InputMaybe<CourseLocation_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CourseLocation" */
export type CourseLocation_Arr_Rel_Insert_Input = {
  data: Array<CourseLocation_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseLocation_On_Conflict>;
};

/** aggregate avg on columns */
export type CourseLocation_Avg_Fields = {
  __typename?: 'CourseLocation_avg_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "CourseLocation" */
export type CourseLocation_Avg_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CourseLocation". All fields are combined with a logical 'AND'. */
export type CourseLocation_Bool_Exp = {
  Course?: InputMaybe<Course_Bool_Exp>;
  LocationOption?: InputMaybe<LocationOption_Bool_Exp>;
  _and?: InputMaybe<Array<CourseLocation_Bool_Exp>>;
  _not?: InputMaybe<CourseLocation_Bool_Exp>;
  _or?: InputMaybe<Array<CourseLocation_Bool_Exp>>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  defaultSessionAddress?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  locationOption?: InputMaybe<LocationOption_Enum_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseLocation" */
export enum CourseLocation_Constraint {
  /** unique or primary key constraint on columns "id" */
  CourseAddressPkey = 'CourseAddress_pkey',
  /** unique or primary key constraint on columns "courseId", "locationOption" */
  UniqueCourseidLocationoption = 'unique_courseid_locationoption'
}

/** input type for incrementing numeric columns in table "CourseLocation" */
export type CourseLocation_Inc_Input = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "CourseLocation" */
export type CourseLocation_Insert_Input = {
  Course?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  LocationOption?: InputMaybe<LocationOption_Obj_Rel_Insert_Input>;
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Either 'ONLINE' or one of the possible given offline locations */
  locationOption?: InputMaybe<LocationOption_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type CourseLocation_Max_Fields = {
  __typename?: 'CourseLocation_max_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "CourseLocation" */
export type CourseLocation_Max_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type CourseLocation_Min_Fields = {
  __typename?: 'CourseLocation_min_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "CourseLocation" */
export type CourseLocation_Min_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "CourseLocation" */
export type CourseLocation_Mutation_Response = {
  __typename?: 'CourseLocation_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseLocation>;
};

/** input type for inserting object relation for remote table "CourseLocation" */
export type CourseLocation_Obj_Rel_Insert_Input = {
  data: CourseLocation_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseLocation_On_Conflict>;
};

/** on_conflict condition type for table "CourseLocation" */
export type CourseLocation_On_Conflict = {
  constraint: CourseLocation_Constraint;
  update_columns?: Array<CourseLocation_Update_Column>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseLocation". */
export type CourseLocation_Order_By = {
  Course?: InputMaybe<Course_Order_By>;
  LocationOption?: InputMaybe<LocationOption_Order_By>;
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  defaultSessionAddress?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  locationOption?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseLocation */
export type CourseLocation_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "CourseLocation" */
export enum CourseLocation_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DefaultSessionAddress = 'defaultSessionAddress',
  /** column name */
  Id = 'id',
  /** column name */
  LocationOption = 'locationOption',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "CourseLocation" */
export type CourseLocation_Set_Input = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Either 'ONLINE' or one of the possible given offline locations */
  locationOption?: InputMaybe<LocationOption_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type CourseLocation_Stddev_Fields = {
  __typename?: 'CourseLocation_stddev_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "CourseLocation" */
export type CourseLocation_Stddev_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CourseLocation_Stddev_Pop_Fields = {
  __typename?: 'CourseLocation_stddev_pop_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "CourseLocation" */
export type CourseLocation_Stddev_Pop_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CourseLocation_Stddev_Samp_Fields = {
  __typename?: 'CourseLocation_stddev_samp_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "CourseLocation" */
export type CourseLocation_Stddev_Samp_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "CourseLocation" */
export type CourseLocation_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseLocation_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseLocation_Stream_Cursor_Value_Input = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Will be used as default for any new session address. */
  defaultSessionAddress?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Either 'ONLINE' or one of the possible given offline locations */
  locationOption?: InputMaybe<LocationOption_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type CourseLocation_Sum_Fields = {
  __typename?: 'CourseLocation_sum_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "CourseLocation" */
export type CourseLocation_Sum_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "CourseLocation" */
export enum CourseLocation_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DefaultSessionAddress = 'defaultSessionAddress',
  /** column name */
  Id = 'id',
  /** column name */
  LocationOption = 'locationOption',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type CourseLocation_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<CourseLocation_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseLocation_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseLocation_Bool_Exp;
};

/** aggregate var_pop on columns */
export type CourseLocation_Var_Pop_Fields = {
  __typename?: 'CourseLocation_var_pop_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "CourseLocation" */
export type CourseLocation_Var_Pop_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CourseLocation_Var_Samp_Fields = {
  __typename?: 'CourseLocation_var_samp_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "CourseLocation" */
export type CourseLocation_Var_Samp_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type CourseLocation_Variance_Fields = {
  __typename?: 'CourseLocation_variance_fields';
  /** The ID of the course for which the location is provided for */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "CourseLocation" */
export type CourseLocation_Variance_Order_By = {
  /** The ID of the course for which the location is provided for */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** The different status a course gets according to instructor's completion of the tabs in the course admin page. */
export type CourseStatus = {
  __typename?: 'CourseStatus';
  /** An array relationship */
  Courses: Array<Course>;
  /** An aggregate relationship */
  Courses_aggregate: Course_Aggregate;
  comment: Scalars['String']['output'];
  value: Scalars['String']['output'];
};


/** The different status a course gets according to instructor's completion of the tabs in the course admin page. */
export type CourseStatusCoursesArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


/** The different status a course gets according to instructor's completion of the tabs in the course admin page. */
export type CourseStatusCourses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};

/** aggregated selection of "CourseStatus" */
export type CourseStatus_Aggregate = {
  __typename?: 'CourseStatus_aggregate';
  aggregate?: Maybe<CourseStatus_Aggregate_Fields>;
  nodes: Array<CourseStatus>;
};

/** aggregate fields of "CourseStatus" */
export type CourseStatus_Aggregate_Fields = {
  __typename?: 'CourseStatus_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<CourseStatus_Max_Fields>;
  min?: Maybe<CourseStatus_Min_Fields>;
};


/** aggregate fields of "CourseStatus" */
export type CourseStatus_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CourseStatus_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "CourseStatus". All fields are combined with a logical 'AND'. */
export type CourseStatus_Bool_Exp = {
  Courses?: InputMaybe<Course_Bool_Exp>;
  Courses_aggregate?: InputMaybe<Course_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<CourseStatus_Bool_Exp>>;
  _not?: InputMaybe<CourseStatus_Bool_Exp>;
  _or?: InputMaybe<Array<CourseStatus_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "CourseStatus" */
export enum CourseStatus_Constraint {
  /** unique or primary key constraint on columns "value" */
  CourseStatusPkey = 'CourseStatus_pkey'
}

export enum CourseStatus_Enum {
  ApplicantsInvited = 'APPLICANTS_INVITED',
  Draft = 'DRAFT',
  ParticipantsRated = 'PARTICIPANTS_RATED',
  ReadyForApplication = 'READY_FOR_APPLICATION',
  ReadyForPublication = 'READY_FOR_PUBLICATION'
}

/** Boolean expression to compare columns of type "CourseStatus_enum". All fields are combined with logical 'AND'. */
export type CourseStatus_Enum_Comparison_Exp = {
  _eq?: InputMaybe<CourseStatus_Enum>;
  _in?: InputMaybe<Array<CourseStatus_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<CourseStatus_Enum>;
  _nin?: InputMaybe<Array<CourseStatus_Enum>>;
};

/** input type for inserting data into table "CourseStatus" */
export type CourseStatus_Insert_Input = {
  Courses?: InputMaybe<Course_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type CourseStatus_Max_Fields = {
  __typename?: 'CourseStatus_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type CourseStatus_Min_Fields = {
  __typename?: 'CourseStatus_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "CourseStatus" */
export type CourseStatus_Mutation_Response = {
  __typename?: 'CourseStatus_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CourseStatus>;
};

/** input type for inserting object relation for remote table "CourseStatus" */
export type CourseStatus_Obj_Rel_Insert_Input = {
  data: CourseStatus_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<CourseStatus_On_Conflict>;
};

/** on_conflict condition type for table "CourseStatus" */
export type CourseStatus_On_Conflict = {
  constraint: CourseStatus_Constraint;
  update_columns?: Array<CourseStatus_Update_Column>;
  where?: InputMaybe<CourseStatus_Bool_Exp>;
};

/** Ordering options when selecting data from "CourseStatus". */
export type CourseStatus_Order_By = {
  Courses_aggregate?: InputMaybe<Course_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: CourseStatus */
export type CourseStatus_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "CourseStatus" */
export enum CourseStatus_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "CourseStatus" */
export type CourseStatus_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "CourseStatus" */
export type CourseStatus_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CourseStatus_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CourseStatus_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "CourseStatus" */
export enum CourseStatus_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type CourseStatus_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CourseStatus_Set_Input>;
  /** filter the rows which have to be updated */
  where: CourseStatus_Bool_Exp;
};

/** aggregated selection of "Course" */
export type Course_Aggregate = {
  __typename?: 'Course_aggregate';
  aggregate?: Maybe<Course_Aggregate_Fields>;
  nodes: Array<Course>;
};

export type Course_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Course_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Course_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Course_Aggregate_Bool_Exp_Count>;
};

export type Course_Aggregate_Bool_Exp_Bool_And = {
  arguments: Course_Select_Column_Course_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Course_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Course_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Course_Select_Column_Course_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Course_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Course_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Course_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Course_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "Course" */
export type Course_Aggregate_Fields = {
  __typename?: 'Course_aggregate_fields';
  avg?: Maybe<Course_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Course_Max_Fields>;
  min?: Maybe<Course_Min_Fields>;
  stddev?: Maybe<Course_Stddev_Fields>;
  stddev_pop?: Maybe<Course_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Course_Stddev_Samp_Fields>;
  sum?: Maybe<Course_Sum_Fields>;
  var_pop?: Maybe<Course_Var_Pop_Fields>;
  var_samp?: Maybe<Course_Var_Samp_Fields>;
  variance?: Maybe<Course_Variance_Fields>;
};


/** aggregate fields of "Course" */
export type Course_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Course_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "Course" */
export type Course_Aggregate_Order_By = {
  avg?: InputMaybe<Course_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Course_Max_Order_By>;
  min?: InputMaybe<Course_Min_Order_By>;
  stddev?: InputMaybe<Course_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Course_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Course_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Course_Sum_Order_By>;
  var_pop?: InputMaybe<Course_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Course_Var_Samp_Order_By>;
  variance?: InputMaybe<Course_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Course" */
export type Course_Arr_Rel_Insert_Input = {
  data: Array<Course_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Course_On_Conflict>;
};

/** aggregate avg on columns */
export type Course_Avg_Fields = {
  __typename?: 'Course_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Float']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Float']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "Course" */
export type Course_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Course". All fields are combined with a logical 'AND'. */
export type Course_Bool_Exp = {
  AchievementOptionCourses?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
  AchievementOptionCourses_aggregate?: InputMaybe<AchievementOptionCourse_Aggregate_Bool_Exp>;
  CourseDegrees?: InputMaybe<CourseDegree_Bool_Exp>;
  CourseDegrees_aggregate?: InputMaybe<CourseDegree_Aggregate_Bool_Exp>;
  CourseEnrollments?: InputMaybe<CourseEnrollment_Bool_Exp>;
  CourseEnrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Bool_Exp>;
  CourseGroups?: InputMaybe<CourseGroup_Bool_Exp>;
  CourseGroups_aggregate?: InputMaybe<CourseGroup_Aggregate_Bool_Exp>;
  CourseInstructors?: InputMaybe<CourseInstructor_Bool_Exp>;
  CourseInstructors_aggregate?: InputMaybe<CourseInstructor_Aggregate_Bool_Exp>;
  CourseLocations?: InputMaybe<CourseLocation_Bool_Exp>;
  CourseLocations_aggregate?: InputMaybe<CourseLocation_Aggregate_Bool_Exp>;
  CourseStatus?: InputMaybe<CourseStatus_Bool_Exp>;
  DegreeCourses?: InputMaybe<CourseDegree_Bool_Exp>;
  DegreeCourses_aggregate?: InputMaybe<CourseDegree_Aggregate_Bool_Exp>;
  Language?: InputMaybe<Language_Bool_Exp>;
  Program?: InputMaybe<Program_Bool_Exp>;
  Sessions?: InputMaybe<Session_Bool_Exp>;
  Sessions_aggregate?: InputMaybe<Session_Aggregate_Bool_Exp>;
  Weekday?: InputMaybe<Weekday_Bool_Exp>;
  _and?: InputMaybe<Array<Course_Bool_Exp>>;
  _not?: InputMaybe<Course_Bool_Exp>;
  _or?: InputMaybe<Array<Course_Bool_Exp>>;
  achievementCertificatePossible?: InputMaybe<Boolean_Comparison_Exp>;
  applicationEnd?: InputMaybe<Date_Comparison_Exp>;
  attendanceCertificatePossible?: InputMaybe<Boolean_Comparison_Exp>;
  chatLink?: InputMaybe<String_Comparison_Exp>;
  contentDescriptionField1?: InputMaybe<String_Comparison_Exp>;
  contentDescriptionField2?: InputMaybe<String_Comparison_Exp>;
  cost?: InputMaybe<String_Comparison_Exp>;
  coverImage?: InputMaybe<String_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  ects?: InputMaybe<String_Comparison_Exp>;
  endTime?: InputMaybe<Time_Comparison_Exp>;
  externalRegistrationLink?: InputMaybe<String_Comparison_Exp>;
  headingDescriptionField1?: InputMaybe<String_Comparison_Exp>;
  headingDescriptionField2?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  language?: InputMaybe<String_Comparison_Exp>;
  learningGoals?: InputMaybe<String_Comparison_Exp>;
  maxMissedSessions?: InputMaybe<Int_Comparison_Exp>;
  maxParticipants?: InputMaybe<Int_Comparison_Exp>;
  programId?: InputMaybe<Int_Comparison_Exp>;
  published?: InputMaybe<Boolean_Comparison_Exp>;
  startTime?: InputMaybe<Time_Comparison_Exp>;
  status?: InputMaybe<CourseStatus_Enum_Comparison_Exp>;
  tagline?: InputMaybe<String_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  weekDay?: InputMaybe<Weekday_Enum_Comparison_Exp>;
};

/** unique or primary key constraints on table "Course" */
export enum Course_Constraint {
  /** unique or primary key constraint on columns "id" */
  CoursePkey = 'Course_pkey'
}

/** input type for incrementing numeric columns in table "Course" */
export type Course_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Scalars['Int']['input']>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "Course" */
export type Course_Insert_Input = {
  AchievementOptionCourses?: InputMaybe<AchievementOptionCourse_Arr_Rel_Insert_Input>;
  CourseDegrees?: InputMaybe<CourseDegree_Arr_Rel_Insert_Input>;
  CourseEnrollments?: InputMaybe<CourseEnrollment_Arr_Rel_Insert_Input>;
  CourseGroups?: InputMaybe<CourseGroup_Arr_Rel_Insert_Input>;
  CourseInstructors?: InputMaybe<CourseInstructor_Arr_Rel_Insert_Input>;
  CourseLocations?: InputMaybe<CourseLocation_Arr_Rel_Insert_Input>;
  CourseStatus?: InputMaybe<CourseStatus_Obj_Rel_Insert_Input>;
  DegreeCourses?: InputMaybe<CourseDegree_Arr_Rel_Insert_Input>;
  Language?: InputMaybe<Language_Obj_Rel_Insert_Input>;
  Program?: InputMaybe<Program_Obj_Rel_Insert_Input>;
  Sessions?: InputMaybe<Session_Arr_Rel_Insert_Input>;
  Weekday?: InputMaybe<Weekday_Obj_Rel_Insert_Input>;
  /** Indicates whether participants can get an achievement certificate. If the course is offering ECTS, it must be possible to obtain this certificate for the course */
  achievementCertificatePossible?: InputMaybe<Scalars['Boolean']['input']>;
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd?: InputMaybe<Scalars['date']['input']>;
  /** Indicates whether participants will get a certificate showing the list of attendances (only issued if the did not miss then maxMissedCourses) */
  attendanceCertificatePossible?: InputMaybe<Scalars['Boolean']['input']>;
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: InputMaybe<Scalars['String']['input']>;
  /** Content of the first course description field */
  contentDescriptionField1?: InputMaybe<Scalars['String']['input']>;
  /** Content of the second course description field */
  contentDescriptionField2?: InputMaybe<Scalars['String']['input']>;
  /** A text providing info about the costs of a participation. */
  cost?: InputMaybe<Scalars['String']['input']>;
  /** The cover image for the course */
  coverImage?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects?: InputMaybe<Scalars['String']['input']>;
  /** The time the course ends each week. */
  endTime?: InputMaybe<Scalars['time']['input']>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: InputMaybe<Scalars['String']['input']>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: InputMaybe<Scalars['String']['input']>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The language the course is given in. */
  language?: InputMaybe<Scalars['String']['input']>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: InputMaybe<Scalars['String']['input']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Scalars['Int']['input']>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Scalars['Int']['input']>;
  /** Decides whether the course is published for all users or not. */
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** The time the course starts each week. */
  startTime?: InputMaybe<Scalars['time']['input']>;
  /** Shows whether the current status is DRAFT, READY_FOR_PUBLICATION, READY_FOR_APPLICATION, APPLICANTS_INVITED, or PARTICIPANTS_RATED, which is set in correspondance to the tabs completed on the course administration page */
  status?: InputMaybe<CourseStatus_Enum>;
  /** Shown below the title on the course page */
  tagline?: InputMaybe<Scalars['String']['input']>;
  /** The title of the course (only editable by an admin user) */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The day of the week the course takes place. */
  weekDay?: InputMaybe<Weekday_Enum>;
};

/** aggregate max on columns */
export type Course_Max_Fields = {
  __typename?: 'Course_max_fields';
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd?: Maybe<Scalars['date']['output']>;
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: Maybe<Scalars['String']['output']>;
  /** Content of the first course description field */
  contentDescriptionField1?: Maybe<Scalars['String']['output']>;
  /** Content of the second course description field */
  contentDescriptionField2?: Maybe<Scalars['String']['output']>;
  /** A text providing info about the costs of a participation. */
  cost?: Maybe<Scalars['String']['output']>;
  /** The cover image for the course */
  coverImage?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects?: Maybe<Scalars['String']['output']>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: Maybe<Scalars['String']['output']>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: Maybe<Scalars['String']['output']>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The language the course is given in. */
  language?: Maybe<Scalars['String']['output']>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: Maybe<Scalars['String']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Int']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Int']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Int']['output']>;
  /** Shown below the title on the course page */
  tagline?: Maybe<Scalars['String']['output']>;
  /** The title of the course (only editable by an admin user) */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "Course" */
export type Course_Max_Order_By = {
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd?: InputMaybe<Order_By>;
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: InputMaybe<Order_By>;
  /** Content of the first course description field */
  contentDescriptionField1?: InputMaybe<Order_By>;
  /** Content of the second course description field */
  contentDescriptionField2?: InputMaybe<Order_By>;
  /** A text providing info about the costs of a participation. */
  cost?: InputMaybe<Order_By>;
  /** The cover image for the course */
  coverImage?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects?: InputMaybe<Order_By>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: InputMaybe<Order_By>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: InputMaybe<Order_By>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The language the course is given in. */
  language?: InputMaybe<Order_By>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
  /** Shown below the title on the course page */
  tagline?: InputMaybe<Order_By>;
  /** The title of the course (only editable by an admin user) */
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Course_Min_Fields = {
  __typename?: 'Course_min_fields';
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd?: Maybe<Scalars['date']['output']>;
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: Maybe<Scalars['String']['output']>;
  /** Content of the first course description field */
  contentDescriptionField1?: Maybe<Scalars['String']['output']>;
  /** Content of the second course description field */
  contentDescriptionField2?: Maybe<Scalars['String']['output']>;
  /** A text providing info about the costs of a participation. */
  cost?: Maybe<Scalars['String']['output']>;
  /** The cover image for the course */
  coverImage?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects?: Maybe<Scalars['String']['output']>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: Maybe<Scalars['String']['output']>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: Maybe<Scalars['String']['output']>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The language the course is given in. */
  language?: Maybe<Scalars['String']['output']>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: Maybe<Scalars['String']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Int']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Int']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Int']['output']>;
  /** Shown below the title on the course page */
  tagline?: Maybe<Scalars['String']['output']>;
  /** The title of the course (only editable by an admin user) */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "Course" */
export type Course_Min_Order_By = {
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd?: InputMaybe<Order_By>;
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: InputMaybe<Order_By>;
  /** Content of the first course description field */
  contentDescriptionField1?: InputMaybe<Order_By>;
  /** Content of the second course description field */
  contentDescriptionField2?: InputMaybe<Order_By>;
  /** A text providing info about the costs of a participation. */
  cost?: InputMaybe<Order_By>;
  /** The cover image for the course */
  coverImage?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects?: InputMaybe<Order_By>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: InputMaybe<Order_By>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: InputMaybe<Order_By>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The language the course is given in. */
  language?: InputMaybe<Order_By>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
  /** Shown below the title on the course page */
  tagline?: InputMaybe<Order_By>;
  /** The title of the course (only editable by an admin user) */
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "Course" */
export type Course_Mutation_Response = {
  __typename?: 'Course_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Course>;
};

/** input type for inserting object relation for remote table "Course" */
export type Course_Obj_Rel_Insert_Input = {
  data: Course_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Course_On_Conflict>;
};

/** on_conflict condition type for table "Course" */
export type Course_On_Conflict = {
  constraint: Course_Constraint;
  update_columns?: Array<Course_Update_Column>;
  where?: InputMaybe<Course_Bool_Exp>;
};

/** Ordering options when selecting data from "Course". */
export type Course_Order_By = {
  AchievementOptionCourses_aggregate?: InputMaybe<AchievementOptionCourse_Aggregate_Order_By>;
  CourseDegrees_aggregate?: InputMaybe<CourseDegree_Aggregate_Order_By>;
  CourseEnrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Order_By>;
  CourseGroups_aggregate?: InputMaybe<CourseGroup_Aggregate_Order_By>;
  CourseInstructors_aggregate?: InputMaybe<CourseInstructor_Aggregate_Order_By>;
  CourseLocations_aggregate?: InputMaybe<CourseLocation_Aggregate_Order_By>;
  CourseStatus?: InputMaybe<CourseStatus_Order_By>;
  DegreeCourses_aggregate?: InputMaybe<CourseDegree_Aggregate_Order_By>;
  Language?: InputMaybe<Language_Order_By>;
  Program?: InputMaybe<Program_Order_By>;
  Sessions_aggregate?: InputMaybe<Session_Aggregate_Order_By>;
  Weekday?: InputMaybe<Weekday_Order_By>;
  achievementCertificatePossible?: InputMaybe<Order_By>;
  applicationEnd?: InputMaybe<Order_By>;
  attendanceCertificatePossible?: InputMaybe<Order_By>;
  chatLink?: InputMaybe<Order_By>;
  contentDescriptionField1?: InputMaybe<Order_By>;
  contentDescriptionField2?: InputMaybe<Order_By>;
  cost?: InputMaybe<Order_By>;
  coverImage?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  ects?: InputMaybe<Order_By>;
  endTime?: InputMaybe<Order_By>;
  externalRegistrationLink?: InputMaybe<Order_By>;
  headingDescriptionField1?: InputMaybe<Order_By>;
  headingDescriptionField2?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  language?: InputMaybe<Order_By>;
  learningGoals?: InputMaybe<Order_By>;
  maxMissedSessions?: InputMaybe<Order_By>;
  maxParticipants?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
  published?: InputMaybe<Order_By>;
  startTime?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  tagline?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  weekDay?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Course */
export type Course_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "Course" */
export enum Course_Select_Column {
  /** column name */
  AchievementCertificatePossible = 'achievementCertificatePossible',
  /** column name */
  ApplicationEnd = 'applicationEnd',
  /** column name */
  AttendanceCertificatePossible = 'attendanceCertificatePossible',
  /** column name */
  ChatLink = 'chatLink',
  /** column name */
  ContentDescriptionField1 = 'contentDescriptionField1',
  /** column name */
  ContentDescriptionField2 = 'contentDescriptionField2',
  /** column name */
  Cost = 'cost',
  /** column name */
  CoverImage = 'coverImage',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Ects = 'ects',
  /** column name */
  EndTime = 'endTime',
  /** column name */
  ExternalRegistrationLink = 'externalRegistrationLink',
  /** column name */
  HeadingDescriptionField1 = 'headingDescriptionField1',
  /** column name */
  HeadingDescriptionField2 = 'headingDescriptionField2',
  /** column name */
  Id = 'id',
  /** column name */
  Language = 'language',
  /** column name */
  LearningGoals = 'learningGoals',
  /** column name */
  MaxMissedSessions = 'maxMissedSessions',
  /** column name */
  MaxParticipants = 'maxParticipants',
  /** column name */
  ProgramId = 'programId',
  /** column name */
  Published = 'published',
  /** column name */
  StartTime = 'startTime',
  /** column name */
  Status = 'status',
  /** column name */
  Tagline = 'tagline',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WeekDay = 'weekDay'
}

/** select "Course_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Course" */
export enum Course_Select_Column_Course_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  AchievementCertificatePossible = 'achievementCertificatePossible',
  /** column name */
  AttendanceCertificatePossible = 'attendanceCertificatePossible',
  /** column name */
  Published = 'published'
}

/** select "Course_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Course" */
export enum Course_Select_Column_Course_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  AchievementCertificatePossible = 'achievementCertificatePossible',
  /** column name */
  AttendanceCertificatePossible = 'attendanceCertificatePossible',
  /** column name */
  Published = 'published'
}

/** input type for updating data in table "Course" */
export type Course_Set_Input = {
  /** Indicates whether participants can get an achievement certificate. If the course is offering ECTS, it must be possible to obtain this certificate for the course */
  achievementCertificatePossible?: InputMaybe<Scalars['Boolean']['input']>;
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd?: InputMaybe<Scalars['date']['input']>;
  /** Indicates whether participants will get a certificate showing the list of attendances (only issued if the did not miss then maxMissedCourses) */
  attendanceCertificatePossible?: InputMaybe<Scalars['Boolean']['input']>;
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: InputMaybe<Scalars['String']['input']>;
  /** Content of the first course description field */
  contentDescriptionField1?: InputMaybe<Scalars['String']['input']>;
  /** Content of the second course description field */
  contentDescriptionField2?: InputMaybe<Scalars['String']['input']>;
  /** A text providing info about the costs of a participation. */
  cost?: InputMaybe<Scalars['String']['input']>;
  /** The cover image for the course */
  coverImage?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects?: InputMaybe<Scalars['String']['input']>;
  /** The time the course ends each week. */
  endTime?: InputMaybe<Scalars['time']['input']>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: InputMaybe<Scalars['String']['input']>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: InputMaybe<Scalars['String']['input']>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The language the course is given in. */
  language?: InputMaybe<Scalars['String']['input']>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: InputMaybe<Scalars['String']['input']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Scalars['Int']['input']>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Scalars['Int']['input']>;
  /** Decides whether the course is published for all users or not. */
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** The time the course starts each week. */
  startTime?: InputMaybe<Scalars['time']['input']>;
  /** Shows whether the current status is DRAFT, READY_FOR_PUBLICATION, READY_FOR_APPLICATION, APPLICANTS_INVITED, or PARTICIPANTS_RATED, which is set in correspondance to the tabs completed on the course administration page */
  status?: InputMaybe<CourseStatus_Enum>;
  /** Shown below the title on the course page */
  tagline?: InputMaybe<Scalars['String']['input']>;
  /** The title of the course (only editable by an admin user) */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The day of the week the course takes place. */
  weekDay?: InputMaybe<Weekday_Enum>;
};

/** aggregate stddev on columns */
export type Course_Stddev_Fields = {
  __typename?: 'Course_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Float']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Float']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "Course" */
export type Course_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Course_Stddev_Pop_Fields = {
  __typename?: 'Course_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Float']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Float']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "Course" */
export type Course_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Course_Stddev_Samp_Fields = {
  __typename?: 'Course_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Float']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Float']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "Course" */
export type Course_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "Course" */
export type Course_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Course_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Course_Stream_Cursor_Value_Input = {
  /** Indicates whether participants can get an achievement certificate. If the course is offering ECTS, it must be possible to obtain this certificate for the course */
  achievementCertificatePossible?: InputMaybe<Scalars['Boolean']['input']>;
  /** Last day before applications are closed. (Set to the program's default value when the course is created.) */
  applicationEnd?: InputMaybe<Scalars['date']['input']>;
  /** Indicates whether participants will get a certificate showing the list of attendances (only issued if the did not miss then maxMissedCourses) */
  attendanceCertificatePossible?: InputMaybe<Scalars['Boolean']['input']>;
  /** The link to the chat of the course (e.g. a mattermost channel) */
  chatLink?: InputMaybe<Scalars['String']['input']>;
  /** Content of the first course description field */
  contentDescriptionField1?: InputMaybe<Scalars['String']['input']>;
  /** Content of the second course description field */
  contentDescriptionField2?: InputMaybe<Scalars['String']['input']>;
  /** A text providing info about the costs of a participation. */
  cost?: InputMaybe<Scalars['String']['input']>;
  /** The cover image for the course */
  coverImage?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The number of ECTS of the course (only editable by an admin user)) */
  ects?: InputMaybe<Scalars['String']['input']>;
  /** The time the course ends each week. */
  endTime?: InputMaybe<Scalars['time']['input']>;
  /** URL to direct users to an appropriate registration page outside of the application. The internal registration is only used if this field is null. */
  externalRegistrationLink?: InputMaybe<Scalars['String']['input']>;
  /** Heading of the the first course description field */
  headingDescriptionField1?: InputMaybe<Scalars['String']['input']>;
  /** Heading of the the second course description field */
  headingDescriptionField2?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The language the course is given in. */
  language?: InputMaybe<Scalars['String']['input']>;
  /** An array of texts including the learning goals for the course */
  learningGoals?: InputMaybe<Scalars['String']['input']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Scalars['Int']['input']>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Scalars['Int']['input']>;
  /** Decides whether the course is published for all users or not. */
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** The time the course starts each week. */
  startTime?: InputMaybe<Scalars['time']['input']>;
  /** Shows whether the current status is DRAFT, READY_FOR_PUBLICATION, READY_FOR_APPLICATION, APPLICANTS_INVITED, or PARTICIPANTS_RATED, which is set in correspondance to the tabs completed on the course administration page */
  status?: InputMaybe<CourseStatus_Enum>;
  /** Shown below the title on the course page */
  tagline?: InputMaybe<Scalars['String']['input']>;
  /** The title of the course (only editable by an admin user) */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The day of the week the course takes place. */
  weekDay?: InputMaybe<Weekday_Enum>;
};

/** aggregate sum on columns */
export type Course_Sum_Fields = {
  __typename?: 'Course_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Int']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Int']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "Course" */
export type Course_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** update columns of table "Course" */
export enum Course_Update_Column {
  /** column name */
  AchievementCertificatePossible = 'achievementCertificatePossible',
  /** column name */
  ApplicationEnd = 'applicationEnd',
  /** column name */
  AttendanceCertificatePossible = 'attendanceCertificatePossible',
  /** column name */
  ChatLink = 'chatLink',
  /** column name */
  ContentDescriptionField1 = 'contentDescriptionField1',
  /** column name */
  ContentDescriptionField2 = 'contentDescriptionField2',
  /** column name */
  Cost = 'cost',
  /** column name */
  CoverImage = 'coverImage',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Ects = 'ects',
  /** column name */
  EndTime = 'endTime',
  /** column name */
  ExternalRegistrationLink = 'externalRegistrationLink',
  /** column name */
  HeadingDescriptionField1 = 'headingDescriptionField1',
  /** column name */
  HeadingDescriptionField2 = 'headingDescriptionField2',
  /** column name */
  Id = 'id',
  /** column name */
  Language = 'language',
  /** column name */
  LearningGoals = 'learningGoals',
  /** column name */
  MaxMissedSessions = 'maxMissedSessions',
  /** column name */
  MaxParticipants = 'maxParticipants',
  /** column name */
  ProgramId = 'programId',
  /** column name */
  Published = 'published',
  /** column name */
  StartTime = 'startTime',
  /** column name */
  Status = 'status',
  /** column name */
  Tagline = 'tagline',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  WeekDay = 'weekDay'
}

export type Course_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Course_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Course_Set_Input>;
  /** filter the rows which have to be updated */
  where: Course_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Course_Var_Pop_Fields = {
  __typename?: 'Course_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Float']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Float']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "Course" */
export type Course_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Course_Var_Samp_Fields = {
  __typename?: 'Course_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Float']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Float']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "Course" */
export type Course_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Course_Variance_Fields = {
  __typename?: 'Course_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: Maybe<Scalars['Float']['output']>;
  /** The number of maximum participants in the course. */
  maxParticipants?: Maybe<Scalars['Float']['output']>;
  /** Id of the program to which the course belongs. */
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "Course" */
export type Course_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The maximum number of sessions a participant can miss while still receiving a certificate */
  maxMissedSessions?: InputMaybe<Order_By>;
  /** The number of maximum participants in the course. */
  maxParticipants?: InputMaybe<Order_By>;
  /** Id of the program to which the course belongs. */
  programId?: InputMaybe<Order_By>;
};

/** The different status of employment that a user can provide */
export type Employment = {
  __typename?: 'Employment';
  /** An array relationship */
  Users: Array<User>;
  /** An aggregate relationship */
  Users_aggregate: User_Aggregate;
  comment: Scalars['String']['output'];
  value: Scalars['String']['output'];
};


/** The different status of employment that a user can provide */
export type EmploymentUsersArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};


/** The different status of employment that a user can provide */
export type EmploymentUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};

/** aggregated selection of "Employment" */
export type Employment_Aggregate = {
  __typename?: 'Employment_aggregate';
  aggregate?: Maybe<Employment_Aggregate_Fields>;
  nodes: Array<Employment>;
};

/** aggregate fields of "Employment" */
export type Employment_Aggregate_Fields = {
  __typename?: 'Employment_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<Employment_Max_Fields>;
  min?: Maybe<Employment_Min_Fields>;
};


/** aggregate fields of "Employment" */
export type Employment_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Employment_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "Employment". All fields are combined with a logical 'AND'. */
export type Employment_Bool_Exp = {
  Users?: InputMaybe<User_Bool_Exp>;
  Users_aggregate?: InputMaybe<User_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<Employment_Bool_Exp>>;
  _not?: InputMaybe<Employment_Bool_Exp>;
  _or?: InputMaybe<Array<Employment_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Employment" */
export enum Employment_Constraint {
  /** unique or primary key constraint on columns "value" */
  EmploymentPkey = 'Employment_pkey'
}

export enum Employment_Enum {
  Academia = 'ACADEMIA',
  Employed = 'EMPLOYED',
  Other = 'OTHER',
  /** For students in High School */
  Pupil = 'PUPIL',
  Retiree = 'RETIREE',
  Selfemployed = 'SELFEMPLOYED',
  Student = 'STUDENT',
  /** This is for teachers */
  Teacher = 'TEACHER',
  Unemployed = 'UNEMPLOYED'
}

/** Boolean expression to compare columns of type "Employment_enum". All fields are combined with logical 'AND'. */
export type Employment_Enum_Comparison_Exp = {
  _eq?: InputMaybe<Employment_Enum>;
  _in?: InputMaybe<Array<Employment_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<Employment_Enum>;
  _nin?: InputMaybe<Array<Employment_Enum>>;
};

/** input type for inserting data into table "Employment" */
export type Employment_Insert_Input = {
  Users?: InputMaybe<User_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Employment_Max_Fields = {
  __typename?: 'Employment_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Employment_Min_Fields = {
  __typename?: 'Employment_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "Employment" */
export type Employment_Mutation_Response = {
  __typename?: 'Employment_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Employment>;
};

/** input type for inserting object relation for remote table "Employment" */
export type Employment_Obj_Rel_Insert_Input = {
  data: Employment_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Employment_On_Conflict>;
};

/** on_conflict condition type for table "Employment" */
export type Employment_On_Conflict = {
  constraint: Employment_Constraint;
  update_columns?: Array<Employment_Update_Column>;
  where?: InputMaybe<Employment_Bool_Exp>;
};

/** Ordering options when selecting data from "Employment". */
export type Employment_Order_By = {
  Users_aggregate?: InputMaybe<User_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Employment */
export type Employment_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "Employment" */
export enum Employment_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "Employment" */
export type Employment_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "Employment" */
export type Employment_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Employment_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Employment_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "Employment" */
export enum Employment_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type Employment_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Employment_Set_Input>;
  /** filter the rows which have to be updated */
  where: Employment_Bool_Exp;
};

/** Whenever a user is chosen to be an instructor or speaker and he has not been so before, a new entry is added. */
export type Expert = {
  __typename?: 'Expert';
  /** An array relationship */
  CourseInstructors: Array<CourseInstructor>;
  /** An aggregate relationship */
  CourseInstructors_aggregate: CourseInstructor_Aggregate;
  /** An array relationship */
  SessionSpeakers: Array<SessionSpeaker>;
  /** An aggregate relationship */
  SessionSpeakers_aggregate: SessionSpeaker_Aggregate;
  /** An object relationship */
  User: User;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** A short description on the expert's background */
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user that is instructor */
  userId: Scalars['uuid']['output'];
};


/** Whenever a user is chosen to be an instructor or speaker and he has not been so before, a new entry is added. */
export type ExpertCourseInstructorsArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


/** Whenever a user is chosen to be an instructor or speaker and he has not been so before, a new entry is added. */
export type ExpertCourseInstructors_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


/** Whenever a user is chosen to be an instructor or speaker and he has not been so before, a new entry is added. */
export type ExpertSessionSpeakersArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};


/** Whenever a user is chosen to be an instructor or speaker and he has not been so before, a new entry is added. */
export type ExpertSessionSpeakers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};

/** aggregated selection of "Expert" */
export type Expert_Aggregate = {
  __typename?: 'Expert_aggregate';
  aggregate?: Maybe<Expert_Aggregate_Fields>;
  nodes: Array<Expert>;
};

export type Expert_Aggregate_Bool_Exp = {
  count?: InputMaybe<Expert_Aggregate_Bool_Exp_Count>;
};

export type Expert_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Expert_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Expert_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "Expert" */
export type Expert_Aggregate_Fields = {
  __typename?: 'Expert_aggregate_fields';
  avg?: Maybe<Expert_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Expert_Max_Fields>;
  min?: Maybe<Expert_Min_Fields>;
  stddev?: Maybe<Expert_Stddev_Fields>;
  stddev_pop?: Maybe<Expert_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Expert_Stddev_Samp_Fields>;
  sum?: Maybe<Expert_Sum_Fields>;
  var_pop?: Maybe<Expert_Var_Pop_Fields>;
  var_samp?: Maybe<Expert_Var_Samp_Fields>;
  variance?: Maybe<Expert_Variance_Fields>;
};


/** aggregate fields of "Expert" */
export type Expert_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Expert_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "Expert" */
export type Expert_Aggregate_Order_By = {
  avg?: InputMaybe<Expert_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Expert_Max_Order_By>;
  min?: InputMaybe<Expert_Min_Order_By>;
  stddev?: InputMaybe<Expert_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Expert_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Expert_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Expert_Sum_Order_By>;
  var_pop?: InputMaybe<Expert_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Expert_Var_Samp_Order_By>;
  variance?: InputMaybe<Expert_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Expert" */
export type Expert_Arr_Rel_Insert_Input = {
  data: Array<Expert_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Expert_On_Conflict>;
};

/** aggregate avg on columns */
export type Expert_Avg_Fields = {
  __typename?: 'Expert_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "Expert" */
export type Expert_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Expert". All fields are combined with a logical 'AND'. */
export type Expert_Bool_Exp = {
  CourseInstructors?: InputMaybe<CourseInstructor_Bool_Exp>;
  CourseInstructors_aggregate?: InputMaybe<CourseInstructor_Aggregate_Bool_Exp>;
  SessionSpeakers?: InputMaybe<SessionSpeaker_Bool_Exp>;
  SessionSpeakers_aggregate?: InputMaybe<SessionSpeaker_Aggregate_Bool_Exp>;
  User?: InputMaybe<User_Bool_Exp>;
  _and?: InputMaybe<Array<Expert_Bool_Exp>>;
  _not?: InputMaybe<Expert_Bool_Exp>;
  _or?: InputMaybe<Array<Expert_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  description?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "Expert" */
export enum Expert_Constraint {
  /** unique or primary key constraint on columns "id" */
  InstructorPkey = 'Instructor_pkey'
}

/** input type for incrementing numeric columns in table "Expert" */
export type Expert_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "Expert" */
export type Expert_Insert_Input = {
  CourseInstructors?: InputMaybe<CourseInstructor_Arr_Rel_Insert_Input>;
  SessionSpeakers?: InputMaybe<SessionSpeaker_Arr_Rel_Insert_Input>;
  User?: InputMaybe<User_Obj_Rel_Insert_Input>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** A short description on the expert's background */
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user that is instructor */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Expert_Max_Fields = {
  __typename?: 'Expert_max_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** A short description on the expert's background */
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user that is instructor */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "Expert" */
export type Expert_Max_Order_By = {
  created_at?: InputMaybe<Order_By>;
  /** A short description on the expert's background */
  description?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The ID of the user that is instructor */
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Expert_Min_Fields = {
  __typename?: 'Expert_min_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** A short description on the expert's background */
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The ID of the user that is instructor */
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "Expert" */
export type Expert_Min_Order_By = {
  created_at?: InputMaybe<Order_By>;
  /** A short description on the expert's background */
  description?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  /** The ID of the user that is instructor */
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "Expert" */
export type Expert_Mutation_Response = {
  __typename?: 'Expert_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Expert>;
};

/** input type for inserting object relation for remote table "Expert" */
export type Expert_Obj_Rel_Insert_Input = {
  data: Expert_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Expert_On_Conflict>;
};

/** on_conflict condition type for table "Expert" */
export type Expert_On_Conflict = {
  constraint: Expert_Constraint;
  update_columns?: Array<Expert_Update_Column>;
  where?: InputMaybe<Expert_Bool_Exp>;
};

/** Ordering options when selecting data from "Expert". */
export type Expert_Order_By = {
  CourseInstructors_aggregate?: InputMaybe<CourseInstructor_Aggregate_Order_By>;
  SessionSpeakers_aggregate?: InputMaybe<SessionSpeaker_Aggregate_Order_By>;
  User?: InputMaybe<User_Order_By>;
  created_at?: InputMaybe<Order_By>;
  description?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Expert */
export type Expert_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "Expert" */
export enum Expert_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "Expert" */
export type Expert_Set_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** A short description on the expert's background */
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user that is instructor */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type Expert_Stddev_Fields = {
  __typename?: 'Expert_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "Expert" */
export type Expert_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Expert_Stddev_Pop_Fields = {
  __typename?: 'Expert_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "Expert" */
export type Expert_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Expert_Stddev_Samp_Fields = {
  __typename?: 'Expert_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "Expert" */
export type Expert_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "Expert" */
export type Expert_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Expert_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Expert_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** A short description on the expert's background */
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The ID of the user that is instructor */
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type Expert_Sum_Fields = {
  __typename?: 'Expert_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "Expert" */
export type Expert_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** update columns of table "Expert" */
export enum Expert_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'userId'
}

export type Expert_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Expert_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Expert_Set_Input>;
  /** filter the rows which have to be updated */
  where: Expert_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Expert_Var_Pop_Fields = {
  __typename?: 'Expert_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "Expert" */
export type Expert_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Expert_Var_Samp_Fields = {
  __typename?: 'Expert_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "Expert" */
export type Expert_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Expert_Variance_Fields = {
  __typename?: 'Expert_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "Expert" */
export type Expert_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
};

export type Image = {
  __typename?: 'Image';
  alt: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Int']['input']>;
  _gt?: InputMaybe<Scalars['Int']['input']>;
  _gte?: InputMaybe<Scalars['Int']['input']>;
  _in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['Int']['input']>;
  _lte?: InputMaybe<Scalars['Int']['input']>;
  _neq?: InputMaybe<Scalars['Int']['input']>;
  _nin?: InputMaybe<Array<Scalars['Int']['input']>>;
};

/** Available languages to select from, e.g., to set the primary instruction language of a course. */
export type Language = {
  __typename?: 'Language';
  /** An array relationship */
  Courses: Array<Course>;
  /** An aggregate relationship */
  Courses_aggregate: Course_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** Available languages to select from, e.g., to set the primary instruction language of a course. */
export type LanguageCoursesArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


/** Available languages to select from, e.g., to set the primary instruction language of a course. */
export type LanguageCourses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};

/** aggregated selection of "Language" */
export type Language_Aggregate = {
  __typename?: 'Language_aggregate';
  aggregate?: Maybe<Language_Aggregate_Fields>;
  nodes: Array<Language>;
};

/** aggregate fields of "Language" */
export type Language_Aggregate_Fields = {
  __typename?: 'Language_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<Language_Max_Fields>;
  min?: Maybe<Language_Min_Fields>;
};


/** aggregate fields of "Language" */
export type Language_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Language_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "Language". All fields are combined with a logical 'AND'. */
export type Language_Bool_Exp = {
  Courses?: InputMaybe<Course_Bool_Exp>;
  Courses_aggregate?: InputMaybe<Course_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<Language_Bool_Exp>>;
  _not?: InputMaybe<Language_Bool_Exp>;
  _or?: InputMaybe<Array<Language_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Language" */
export enum Language_Constraint {
  /** unique or primary key constraint on columns "value" */
  LanguagesPkey = 'Languages_pkey'
}

/** input type for inserting data into table "Language" */
export type Language_Insert_Input = {
  Courses?: InputMaybe<Course_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Language_Max_Fields = {
  __typename?: 'Language_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Language_Min_Fields = {
  __typename?: 'Language_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "Language" */
export type Language_Mutation_Response = {
  __typename?: 'Language_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Language>;
};

/** input type for inserting object relation for remote table "Language" */
export type Language_Obj_Rel_Insert_Input = {
  data: Language_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Language_On_Conflict>;
};

/** on_conflict condition type for table "Language" */
export type Language_On_Conflict = {
  constraint: Language_Constraint;
  update_columns?: Array<Language_Update_Column>;
  where?: InputMaybe<Language_Bool_Exp>;
};

/** Ordering options when selecting data from "Language". */
export type Language_Order_By = {
  Courses_aggregate?: InputMaybe<Course_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Language */
export type Language_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "Language" */
export enum Language_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "Language" */
export type Language_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "Language" */
export type Language_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Language_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Language_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "Language" */
export enum Language_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type Language_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Language_Set_Input>;
  /** filter the rows which have to be updated */
  where: Language_Bool_Exp;
};

export type Links = {
  __typename?: 'Links';
  self: Scalars['String']['output'];
};

/** Possible general location options where a course can be administered. */
export type LocationOption = {
  __typename?: 'LocationOption';
  /** An array relationship */
  Locations: Array<CourseLocation>;
  /** An aggregate relationship */
  Locations_aggregate: CourseLocation_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** Possible general location options where a course can be administered. */
export type LocationOptionLocationsArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


/** Possible general location options where a course can be administered. */
export type LocationOptionLocations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};

/** aggregated selection of "LocationOption" */
export type LocationOption_Aggregate = {
  __typename?: 'LocationOption_aggregate';
  aggregate?: Maybe<LocationOption_Aggregate_Fields>;
  nodes: Array<LocationOption>;
};

/** aggregate fields of "LocationOption" */
export type LocationOption_Aggregate_Fields = {
  __typename?: 'LocationOption_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<LocationOption_Max_Fields>;
  min?: Maybe<LocationOption_Min_Fields>;
};


/** aggregate fields of "LocationOption" */
export type LocationOption_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<LocationOption_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "LocationOption". All fields are combined with a logical 'AND'. */
export type LocationOption_Bool_Exp = {
  Locations?: InputMaybe<CourseLocation_Bool_Exp>;
  Locations_aggregate?: InputMaybe<CourseLocation_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<LocationOption_Bool_Exp>>;
  _not?: InputMaybe<LocationOption_Bool_Exp>;
  _or?: InputMaybe<Array<LocationOption_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "LocationOption" */
export enum LocationOption_Constraint {
  /** unique or primary key constraint on columns "value" */
  LocationOptionsPkey = 'LocationOptions_pkey'
}

export enum LocationOption_Enum {
  Kiel = 'KIEL',
  Online = 'ONLINE'
}

/** Boolean expression to compare columns of type "LocationOption_enum". All fields are combined with logical 'AND'. */
export type LocationOption_Enum_Comparison_Exp = {
  _eq?: InputMaybe<LocationOption_Enum>;
  _in?: InputMaybe<Array<LocationOption_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<LocationOption_Enum>;
  _nin?: InputMaybe<Array<LocationOption_Enum>>;
};

/** input type for inserting data into table "LocationOption" */
export type LocationOption_Insert_Input = {
  Locations?: InputMaybe<CourseLocation_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type LocationOption_Max_Fields = {
  __typename?: 'LocationOption_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type LocationOption_Min_Fields = {
  __typename?: 'LocationOption_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "LocationOption" */
export type LocationOption_Mutation_Response = {
  __typename?: 'LocationOption_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<LocationOption>;
};

/** input type for inserting object relation for remote table "LocationOption" */
export type LocationOption_Obj_Rel_Insert_Input = {
  data: LocationOption_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<LocationOption_On_Conflict>;
};

/** on_conflict condition type for table "LocationOption" */
export type LocationOption_On_Conflict = {
  constraint: LocationOption_Constraint;
  update_columns?: Array<LocationOption_Update_Column>;
  where?: InputMaybe<LocationOption_Bool_Exp>;
};

/** Ordering options when selecting data from "LocationOption". */
export type LocationOption_Order_By = {
  Locations_aggregate?: InputMaybe<CourseLocation_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: LocationOption */
export type LocationOption_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "LocationOption" */
export enum LocationOption_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "LocationOption" */
export type LocationOption_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "LocationOption" */
export type LocationOption_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: LocationOption_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type LocationOption_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "LocationOption" */
export enum LocationOption_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type LocationOption_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<LocationOption_Set_Input>;
  /** filter the rows which have to be updated */
  where: LocationOption_Bool_Exp;
};

/** Whenever a new mail is to be sent, a new row with the necessary information to send it is added. After sending it (done by a triggered serverless function) the mailing status is set or changed respectively... */
export type MailLog = {
  __typename?: 'MailLog';
  /** An object relationship */
  MailStatus?: Maybe<MailStatus>;
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: Maybe<Scalars['String']['output']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: Maybe<Scalars['String']['output']>;
  /** The (html) text content of the email */
  content: Scalars['String']['output'];
  created_at: Scalars['timestamptz']['output'];
  /** The sender address of the email */
  from: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  /** Mailing status of the given mail */
  status?: Maybe<Scalars['String']['output']>;
  /** The subject of the email */
  subject: Scalars['String']['output'];
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Int']['output']>;
  /** The email address(es) of the recipient(s) */
  to: Scalars['String']['output'];
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "MailLog" */
export type MailLog_Aggregate = {
  __typename?: 'MailLog_aggregate';
  aggregate?: Maybe<MailLog_Aggregate_Fields>;
  nodes: Array<MailLog>;
};

export type MailLog_Aggregate_Bool_Exp = {
  count?: InputMaybe<MailLog_Aggregate_Bool_Exp_Count>;
};

export type MailLog_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<MailLog_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MailLog_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "MailLog" */
export type MailLog_Aggregate_Fields = {
  __typename?: 'MailLog_aggregate_fields';
  avg?: Maybe<MailLog_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<MailLog_Max_Fields>;
  min?: Maybe<MailLog_Min_Fields>;
  stddev?: Maybe<MailLog_Stddev_Fields>;
  stddev_pop?: Maybe<MailLog_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MailLog_Stddev_Samp_Fields>;
  sum?: Maybe<MailLog_Sum_Fields>;
  var_pop?: Maybe<MailLog_Var_Pop_Fields>;
  var_samp?: Maybe<MailLog_Var_Samp_Fields>;
  variance?: Maybe<MailLog_Variance_Fields>;
};


/** aggregate fields of "MailLog" */
export type MailLog_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<MailLog_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "MailLog" */
export type MailLog_Aggregate_Order_By = {
  avg?: InputMaybe<MailLog_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<MailLog_Max_Order_By>;
  min?: InputMaybe<MailLog_Min_Order_By>;
  stddev?: InputMaybe<MailLog_Stddev_Order_By>;
  stddev_pop?: InputMaybe<MailLog_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<MailLog_Stddev_Samp_Order_By>;
  sum?: InputMaybe<MailLog_Sum_Order_By>;
  var_pop?: InputMaybe<MailLog_Var_Pop_Order_By>;
  var_samp?: InputMaybe<MailLog_Var_Samp_Order_By>;
  variance?: InputMaybe<MailLog_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MailLog" */
export type MailLog_Arr_Rel_Insert_Input = {
  data: Array<MailLog_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<MailLog_On_Conflict>;
};

/** aggregate avg on columns */
export type MailLog_Avg_Fields = {
  __typename?: 'MailLog_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "MailLog" */
export type MailLog_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MailLog". All fields are combined with a logical 'AND'. */
export type MailLog_Bool_Exp = {
  MailStatus?: InputMaybe<MailStatus_Bool_Exp>;
  _and?: InputMaybe<Array<MailLog_Bool_Exp>>;
  _not?: InputMaybe<MailLog_Bool_Exp>;
  _or?: InputMaybe<Array<MailLog_Bool_Exp>>;
  bcc?: InputMaybe<String_Comparison_Exp>;
  cc?: InputMaybe<String_Comparison_Exp>;
  content?: InputMaybe<String_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  from?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  status?: InputMaybe<String_Comparison_Exp>;
  subject?: InputMaybe<String_Comparison_Exp>;
  templateId?: InputMaybe<Int_Comparison_Exp>;
  to?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "MailLog" */
export enum MailLog_Constraint {
  /** unique or primary key constraint on columns "id" */
  MailPkey = 'Mail_pkey'
}

/** input type for incrementing numeric columns in table "MailLog" */
export type MailLog_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "MailLog" */
export type MailLog_Insert_Input = {
  MailStatus?: InputMaybe<MailStatus_Obj_Rel_Insert_Input>;
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Scalars['String']['input']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Scalars['String']['input']>;
  /** The (html) text content of the email */
  content?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The sender address of the email */
  from?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Mailing status of the given mail */
  status?: InputMaybe<Scalars['String']['input']>;
  /** The subject of the email */
  subject?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** The email address(es) of the recipient(s) */
  to?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type MailLog_Max_Fields = {
  __typename?: 'MailLog_max_fields';
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: Maybe<Scalars['String']['output']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: Maybe<Scalars['String']['output']>;
  /** The (html) text content of the email */
  content?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The sender address of the email */
  from?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** Mailing status of the given mail */
  status?: Maybe<Scalars['String']['output']>;
  /** The subject of the email */
  subject?: Maybe<Scalars['String']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Int']['output']>;
  /** The email address(es) of the recipient(s) */
  to?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "MailLog" */
export type MailLog_Max_Order_By = {
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Order_By>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Order_By>;
  /** The (html) text content of the email */
  content?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** The sender address of the email */
  from?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Mailing status of the given mail */
  status?: InputMaybe<Order_By>;
  /** The subject of the email */
  subject?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
  /** The email address(es) of the recipient(s) */
  to?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type MailLog_Min_Fields = {
  __typename?: 'MailLog_min_fields';
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: Maybe<Scalars['String']['output']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: Maybe<Scalars['String']['output']>;
  /** The (html) text content of the email */
  content?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The sender address of the email */
  from?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** Mailing status of the given mail */
  status?: Maybe<Scalars['String']['output']>;
  /** The subject of the email */
  subject?: Maybe<Scalars['String']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Int']['output']>;
  /** The email address(es) of the recipient(s) */
  to?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "MailLog" */
export type MailLog_Min_Order_By = {
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Order_By>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Order_By>;
  /** The (html) text content of the email */
  content?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** The sender address of the email */
  from?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** Mailing status of the given mail */
  status?: InputMaybe<Order_By>;
  /** The subject of the email */
  subject?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
  /** The email address(es) of the recipient(s) */
  to?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "MailLog" */
export type MailLog_Mutation_Response = {
  __typename?: 'MailLog_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<MailLog>;
};

/** on_conflict condition type for table "MailLog" */
export type MailLog_On_Conflict = {
  constraint: MailLog_Constraint;
  update_columns?: Array<MailLog_Update_Column>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};

/** Ordering options when selecting data from "MailLog". */
export type MailLog_Order_By = {
  MailStatus?: InputMaybe<MailStatus_Order_By>;
  bcc?: InputMaybe<Order_By>;
  cc?: InputMaybe<Order_By>;
  content?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  from?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  subject?: InputMaybe<Order_By>;
  templateId?: InputMaybe<Order_By>;
  to?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: MailLog */
export type MailLog_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "MailLog" */
export enum MailLog_Select_Column {
  /** column name */
  Bcc = 'bcc',
  /** column name */
  Cc = 'cc',
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  From = 'from',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status',
  /** column name */
  Subject = 'subject',
  /** column name */
  TemplateId = 'templateId',
  /** column name */
  To = 'to',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "MailLog" */
export type MailLog_Set_Input = {
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Scalars['String']['input']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Scalars['String']['input']>;
  /** The (html) text content of the email */
  content?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The sender address of the email */
  from?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Mailing status of the given mail */
  status?: InputMaybe<Scalars['String']['input']>;
  /** The subject of the email */
  subject?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** The email address(es) of the recipient(s) */
  to?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type MailLog_Stddev_Fields = {
  __typename?: 'MailLog_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "MailLog" */
export type MailLog_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MailLog_Stddev_Pop_Fields = {
  __typename?: 'MailLog_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "MailLog" */
export type MailLog_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MailLog_Stddev_Samp_Fields = {
  __typename?: 'MailLog_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "MailLog" */
export type MailLog_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "MailLog" */
export type MailLog_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: MailLog_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type MailLog_Stream_Cursor_Value_Input = {
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Scalars['String']['input']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Scalars['String']['input']>;
  /** The (html) text content of the email */
  content?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The sender address of the email */
  from?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Mailing status of the given mail */
  status?: InputMaybe<Scalars['String']['input']>;
  /** The subject of the email */
  subject?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** The email address(es) of the recipient(s) */
  to?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type MailLog_Sum_Fields = {
  __typename?: 'MailLog_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "MailLog" */
export type MailLog_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** update columns of table "MailLog" */
export enum MailLog_Update_Column {
  /** column name */
  Bcc = 'bcc',
  /** column name */
  Cc = 'cc',
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  From = 'from',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status',
  /** column name */
  Subject = 'subject',
  /** column name */
  TemplateId = 'templateId',
  /** column name */
  To = 'to',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type MailLog_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<MailLog_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<MailLog_Set_Input>;
  /** filter the rows which have to be updated */
  where: MailLog_Bool_Exp;
};

/** aggregate var_pop on columns */
export type MailLog_Var_Pop_Fields = {
  __typename?: 'MailLog_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "MailLog" */
export type MailLog_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MailLog_Var_Samp_Fields = {
  __typename?: 'MailLog_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "MailLog" */
export type MailLog_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type MailLog_Variance_Fields = {
  __typename?: 'MailLog_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "MailLog" */
export type MailLog_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  /** The ID of the template that was used to generate the mail. */
  templateId?: InputMaybe<Order_By>;
};

/** The different status a mail in the MailLog can have. */
export type MailStatus = {
  __typename?: 'MailStatus';
  /** An array relationship */
  MailLogs: Array<MailLog>;
  /** An aggregate relationship */
  MailLogs_aggregate: MailLog_Aggregate;
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};


/** The different status a mail in the MailLog can have. */
export type MailStatusMailLogsArgs = {
  distinct_on?: InputMaybe<Array<MailLog_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailLog_Order_By>>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};


/** The different status a mail in the MailLog can have. */
export type MailStatusMailLogs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MailLog_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailLog_Order_By>>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};

/** aggregated selection of "MailStatus" */
export type MailStatus_Aggregate = {
  __typename?: 'MailStatus_aggregate';
  aggregate?: Maybe<MailStatus_Aggregate_Fields>;
  nodes: Array<MailStatus>;
};

/** aggregate fields of "MailStatus" */
export type MailStatus_Aggregate_Fields = {
  __typename?: 'MailStatus_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<MailStatus_Max_Fields>;
  min?: Maybe<MailStatus_Min_Fields>;
};


/** aggregate fields of "MailStatus" */
export type MailStatus_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<MailStatus_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "MailStatus". All fields are combined with a logical 'AND'. */
export type MailStatus_Bool_Exp = {
  MailLogs?: InputMaybe<MailLog_Bool_Exp>;
  MailLogs_aggregate?: InputMaybe<MailLog_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<MailStatus_Bool_Exp>>;
  _not?: InputMaybe<MailStatus_Bool_Exp>;
  _or?: InputMaybe<Array<MailStatus_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "MailStatus" */
export enum MailStatus_Constraint {
  /** unique or primary key constraint on columns "value" */
  MailStatusPkey = 'MailStatus_pkey'
}

/** input type for inserting data into table "MailStatus" */
export type MailStatus_Insert_Input = {
  MailLogs?: InputMaybe<MailLog_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type MailStatus_Max_Fields = {
  __typename?: 'MailStatus_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type MailStatus_Min_Fields = {
  __typename?: 'MailStatus_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "MailStatus" */
export type MailStatus_Mutation_Response = {
  __typename?: 'MailStatus_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<MailStatus>;
};

/** input type for inserting object relation for remote table "MailStatus" */
export type MailStatus_Obj_Rel_Insert_Input = {
  data: MailStatus_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<MailStatus_On_Conflict>;
};

/** on_conflict condition type for table "MailStatus" */
export type MailStatus_On_Conflict = {
  constraint: MailStatus_Constraint;
  update_columns?: Array<MailStatus_Update_Column>;
  where?: InputMaybe<MailStatus_Bool_Exp>;
};

/** Ordering options when selecting data from "MailStatus". */
export type MailStatus_Order_By = {
  MailLogs_aggregate?: InputMaybe<MailLog_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: MailStatus */
export type MailStatus_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "MailStatus" */
export enum MailStatus_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "MailStatus" */
export type MailStatus_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "MailStatus" */
export type MailStatus_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: MailStatus_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type MailStatus_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "MailStatus" */
export enum MailStatus_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type MailStatus_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<MailStatus_Set_Input>;
  /** filter the rows which have to be updated */
  where: MailStatus_Bool_Exp;
};

/** Mail templates to send users relevant information when certain conditions are met. The conditions are checked by a serverless function or are directly initiated by events in the frontend, which then also sends the mails. */
export type MailTemplate = {
  __typename?: 'MailTemplate';
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: Maybe<Scalars['String']['output']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: Maybe<Scalars['String']['output']>;
  /** The (html) text content of the email */
  content: Scalars['String']['output'];
  created_at: Scalars['timestamptz']['output'];
  /** Mail adress provided as sender address */
  from?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** The subject of the email */
  subject: Scalars['String']['output'];
  /** Title of the mail template (to provide basic info on what it's used for) */
  title?: Maybe<Scalars['String']['output']>;
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "MailTemplate" */
export type MailTemplate_Aggregate = {
  __typename?: 'MailTemplate_aggregate';
  aggregate?: Maybe<MailTemplate_Aggregate_Fields>;
  nodes: Array<MailTemplate>;
};

/** aggregate fields of "MailTemplate" */
export type MailTemplate_Aggregate_Fields = {
  __typename?: 'MailTemplate_aggregate_fields';
  avg?: Maybe<MailTemplate_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<MailTemplate_Max_Fields>;
  min?: Maybe<MailTemplate_Min_Fields>;
  stddev?: Maybe<MailTemplate_Stddev_Fields>;
  stddev_pop?: Maybe<MailTemplate_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MailTemplate_Stddev_Samp_Fields>;
  sum?: Maybe<MailTemplate_Sum_Fields>;
  var_pop?: Maybe<MailTemplate_Var_Pop_Fields>;
  var_samp?: Maybe<MailTemplate_Var_Samp_Fields>;
  variance?: Maybe<MailTemplate_Variance_Fields>;
};


/** aggregate fields of "MailTemplate" */
export type MailTemplate_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<MailTemplate_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type MailTemplate_Avg_Fields = {
  __typename?: 'MailTemplate_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "MailTemplate". All fields are combined with a logical 'AND'. */
export type MailTemplate_Bool_Exp = {
  _and?: InputMaybe<Array<MailTemplate_Bool_Exp>>;
  _not?: InputMaybe<MailTemplate_Bool_Exp>;
  _or?: InputMaybe<Array<MailTemplate_Bool_Exp>>;
  bcc?: InputMaybe<String_Comparison_Exp>;
  cc?: InputMaybe<String_Comparison_Exp>;
  content?: InputMaybe<String_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  from?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  subject?: InputMaybe<String_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "MailTemplate" */
export enum MailTemplate_Constraint {
  /** unique or primary key constraint on columns "id" */
  MailTemplatePkey = 'MailTemplate_pkey'
}

/** input type for incrementing numeric columns in table "MailTemplate" */
export type MailTemplate_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "MailTemplate" */
export type MailTemplate_Insert_Input = {
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Scalars['String']['input']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Scalars['String']['input']>;
  /** The (html) text content of the email */
  content?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Mail adress provided as sender address */
  from?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The subject of the email */
  subject?: InputMaybe<Scalars['String']['input']>;
  /** Title of the mail template (to provide basic info on what it's used for) */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type MailTemplate_Max_Fields = {
  __typename?: 'MailTemplate_max_fields';
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: Maybe<Scalars['String']['output']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: Maybe<Scalars['String']['output']>;
  /** The (html) text content of the email */
  content?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Mail adress provided as sender address */
  from?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The subject of the email */
  subject?: Maybe<Scalars['String']['output']>;
  /** Title of the mail template (to provide basic info on what it's used for) */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** aggregate min on columns */
export type MailTemplate_Min_Fields = {
  __typename?: 'MailTemplate_min_fields';
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: Maybe<Scalars['String']['output']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: Maybe<Scalars['String']['output']>;
  /** The (html) text content of the email */
  content?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** Mail adress provided as sender address */
  from?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The subject of the email */
  subject?: Maybe<Scalars['String']['output']>;
  /** Title of the mail template (to provide basic info on what it's used for) */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** response of any mutation on the table "MailTemplate" */
export type MailTemplate_Mutation_Response = {
  __typename?: 'MailTemplate_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<MailTemplate>;
};

/** on_conflict condition type for table "MailTemplate" */
export type MailTemplate_On_Conflict = {
  constraint: MailTemplate_Constraint;
  update_columns?: Array<MailTemplate_Update_Column>;
  where?: InputMaybe<MailTemplate_Bool_Exp>;
};

/** Ordering options when selecting data from "MailTemplate". */
export type MailTemplate_Order_By = {
  bcc?: InputMaybe<Order_By>;
  cc?: InputMaybe<Order_By>;
  content?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  from?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  subject?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: MailTemplate */
export type MailTemplate_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "MailTemplate" */
export enum MailTemplate_Select_Column {
  /** column name */
  Bcc = 'bcc',
  /** column name */
  Cc = 'cc',
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  From = 'from',
  /** column name */
  Id = 'id',
  /** column name */
  Subject = 'subject',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "MailTemplate" */
export type MailTemplate_Set_Input = {
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Scalars['String']['input']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Scalars['String']['input']>;
  /** The (html) text content of the email */
  content?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Mail adress provided as sender address */
  from?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The subject of the email */
  subject?: InputMaybe<Scalars['String']['input']>;
  /** Title of the mail template (to provide basic info on what it's used for) */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type MailTemplate_Stddev_Fields = {
  __typename?: 'MailTemplate_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type MailTemplate_Stddev_Pop_Fields = {
  __typename?: 'MailTemplate_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type MailTemplate_Stddev_Samp_Fields = {
  __typename?: 'MailTemplate_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "MailTemplate" */
export type MailTemplate_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: MailTemplate_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type MailTemplate_Stream_Cursor_Value_Input = {
  /** Mail adresses that are receiving a blind carbon copy */
  bcc?: InputMaybe<Scalars['String']['input']>;
  /** Mail adresses that are receiving a carbon copy */
  cc?: InputMaybe<Scalars['String']['input']>;
  /** The (html) text content of the email */
  content?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** Mail adress provided as sender address */
  from?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The subject of the email */
  subject?: InputMaybe<Scalars['String']['input']>;
  /** Title of the mail template (to provide basic info on what it's used for) */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type MailTemplate_Sum_Fields = {
  __typename?: 'MailTemplate_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
};

/** update columns of table "MailTemplate" */
export enum MailTemplate_Update_Column {
  /** column name */
  Bcc = 'bcc',
  /** column name */
  Cc = 'cc',
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  From = 'from',
  /** column name */
  Id = 'id',
  /** column name */
  Subject = 'subject',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type MailTemplate_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<MailTemplate_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<MailTemplate_Set_Input>;
  /** filter the rows which have to be updated */
  where: MailTemplate_Bool_Exp;
};

/** aggregate var_pop on columns */
export type MailTemplate_Var_Pop_Fields = {
  __typename?: 'MailTemplate_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type MailTemplate_Var_Samp_Fields = {
  __typename?: 'MailTemplate_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type MailTemplate_Variance_Fields = {
  __typename?: 'MailTemplate_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type MoocHubCourse = {
  __typename?: 'MoocHubCourse';
  attributes: CourseAttributes;
  id: Scalars['ID']['output'];
  type: Scalars['String']['output'];
};

/** The rating for a motivation letter to apply for a course. It stores the info on whether an applicant gets an invitation or not. */
export type MotivationRating = {
  __typename?: 'MotivationRating';
  /** An array relationship */
  Enrollments: Array<CourseEnrollment>;
  /** An aggregate relationship */
  Enrollments_aggregate: CourseEnrollment_Aggregate;
  comment: Scalars['String']['output'];
  value: Scalars['String']['output'];
};


/** The rating for a motivation letter to apply for a course. It stores the info on whether an applicant gets an invitation or not. */
export type MotivationRatingEnrollmentsArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


/** The rating for a motivation letter to apply for a course. It stores the info on whether an applicant gets an invitation or not. */
export type MotivationRatingEnrollments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};

/** aggregated selection of "MotivationRating" */
export type MotivationRating_Aggregate = {
  __typename?: 'MotivationRating_aggregate';
  aggregate?: Maybe<MotivationRating_Aggregate_Fields>;
  nodes: Array<MotivationRating>;
};

/** aggregate fields of "MotivationRating" */
export type MotivationRating_Aggregate_Fields = {
  __typename?: 'MotivationRating_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<MotivationRating_Max_Fields>;
  min?: Maybe<MotivationRating_Min_Fields>;
};


/** aggregate fields of "MotivationRating" */
export type MotivationRating_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<MotivationRating_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "MotivationRating". All fields are combined with a logical 'AND'. */
export type MotivationRating_Bool_Exp = {
  Enrollments?: InputMaybe<CourseEnrollment_Bool_Exp>;
  Enrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<MotivationRating_Bool_Exp>>;
  _not?: InputMaybe<MotivationRating_Bool_Exp>;
  _or?: InputMaybe<Array<MotivationRating_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "MotivationRating" */
export enum MotivationRating_Constraint {
  /** unique or primary key constraint on columns "value" */
  MotivationGradePkey = 'MotivationGrade_pkey'
}

export enum MotivationRating_Enum {
  /** The application shall be declined. */
  Decline = 'DECLINE',
  /** The applicant shall be invited. */
  Invite = 'INVITE',
  /** The motivation letter shall be further reviewed. */
  Review = 'REVIEW',
  /** The motivation letter has not been reviewed yet. */
  Unrated = 'UNRATED'
}

/** Boolean expression to compare columns of type "MotivationRating_enum". All fields are combined with logical 'AND'. */
export type MotivationRating_Enum_Comparison_Exp = {
  _eq?: InputMaybe<MotivationRating_Enum>;
  _in?: InputMaybe<Array<MotivationRating_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<MotivationRating_Enum>;
  _nin?: InputMaybe<Array<MotivationRating_Enum>>;
};

/** input type for inserting data into table "MotivationRating" */
export type MotivationRating_Insert_Input = {
  Enrollments?: InputMaybe<CourseEnrollment_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type MotivationRating_Max_Fields = {
  __typename?: 'MotivationRating_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type MotivationRating_Min_Fields = {
  __typename?: 'MotivationRating_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "MotivationRating" */
export type MotivationRating_Mutation_Response = {
  __typename?: 'MotivationRating_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<MotivationRating>;
};

/** input type for inserting object relation for remote table "MotivationRating" */
export type MotivationRating_Obj_Rel_Insert_Input = {
  data: MotivationRating_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<MotivationRating_On_Conflict>;
};

/** on_conflict condition type for table "MotivationRating" */
export type MotivationRating_On_Conflict = {
  constraint: MotivationRating_Constraint;
  update_columns?: Array<MotivationRating_Update_Column>;
  where?: InputMaybe<MotivationRating_Bool_Exp>;
};

/** Ordering options when selecting data from "MotivationRating". */
export type MotivationRating_Order_By = {
  Enrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: MotivationRating */
export type MotivationRating_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "MotivationRating" */
export enum MotivationRating_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "MotivationRating" */
export type MotivationRating_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "MotivationRating" */
export type MotivationRating_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: MotivationRating_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type MotivationRating_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "MotivationRating" */
export enum MotivationRating_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type MotivationRating_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<MotivationRating_Set_Input>;
  /** filter the rows which have to be updated */
  where: MotivationRating_Bool_Exp;
};

/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type Program = {
  __typename?: 'Program';
  /** An array relationship */
  CertificateTemplatePrograms: Array<CertificateTemplateProgram>;
  /** An aggregate relationship */
  CertificateTemplatePrograms_aggregate: CertificateTemplateProgram_Aggregate;
  /** An array relationship */
  Courses: Array<Course>;
  /** An aggregate relationship */
  Courses_aggregate: Course_Aggregate;
  /** An array relationship */
  RentAScientistConfigs: Array<RentAScientistConfig>;
  /** An aggregate relationship */
  RentAScientistConfigs_aggregate: RentAScientistConfig_Aggregate;
  /** An array relationship */
  ScientistOffers: Array<ScientistOffer>;
  /** An aggregate relationship */
  ScientistOffers_aggregate: ScientistOffer_Aggregate;
  achievementCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: Maybe<Scalars['String']['output']>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: Maybe<Scalars['date']['output']>;
  /** The day the application for all courses of the program start. */
  applicationStart?: Maybe<Scalars['date']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: Maybe<Scalars['date']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Int']['output']>;
  id: Scalars['Int']['output'];
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: Maybe<Scalars['date']['output']>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: Maybe<Scalars['date']['output']>;
  /** Decides whether the courses of this program can be published or not. (Courses are ony published if the filed publised in the Course table is also set to true.) */
  published: Scalars['Boolean']['output'];
  /** The 6 letter short title for the program. */
  shortTitle?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The title of the program */
  title: Scalars['String']['output'];
  /** Defines whether the tab for this course program is shown or not. */
  visibility: Scalars['Boolean']['output'];
  /** Sets the achievement certificates for all courses of htis program to be visible for the recipients. */
  visibilityAchievementCertificate?: Maybe<Scalars['Boolean']['output']>;
  /** Sets the participation certificates for all courses of htis program to be visible for the recipients. */
  visibilityAttendanceCertificate?: Maybe<Scalars['Boolean']['output']>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramCertificateTemplateProgramsArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramCertificateTemplatePrograms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramCoursesArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramCourses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramRentAScientistConfigsArgs = {
  distinct_on?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RentAScientistConfig_Order_By>>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramRentAScientistConfigs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RentAScientistConfig_Order_By>>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramScientistOffersArgs = {
  distinct_on?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOffer_Order_By>>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};


/** Admins can add new program, which are basically a set of courses with similar characteristics and a similar time frame. The table also includes default values for the courses, which might be adapted on the course level though. */
export type ProgramScientistOffers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOffer_Order_By>>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};

/** aggregated selection of "Program" */
export type Program_Aggregate = {
  __typename?: 'Program_aggregate';
  aggregate?: Maybe<Program_Aggregate_Fields>;
  nodes: Array<Program>;
};

export type Program_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Program_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Program_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Program_Aggregate_Bool_Exp_Count>;
};

export type Program_Aggregate_Bool_Exp_Bool_And = {
  arguments: Program_Select_Column_Program_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Program_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Program_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Program_Select_Column_Program_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Program_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Program_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Program_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Program_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "Program" */
export type Program_Aggregate_Fields = {
  __typename?: 'Program_aggregate_fields';
  avg?: Maybe<Program_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Program_Max_Fields>;
  min?: Maybe<Program_Min_Fields>;
  stddev?: Maybe<Program_Stddev_Fields>;
  stddev_pop?: Maybe<Program_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Program_Stddev_Samp_Fields>;
  sum?: Maybe<Program_Sum_Fields>;
  var_pop?: Maybe<Program_Var_Pop_Fields>;
  var_samp?: Maybe<Program_Var_Samp_Fields>;
  variance?: Maybe<Program_Variance_Fields>;
};


/** aggregate fields of "Program" */
export type Program_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Program_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "Program" */
export type Program_Aggregate_Order_By = {
  avg?: InputMaybe<Program_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Program_Max_Order_By>;
  min?: InputMaybe<Program_Min_Order_By>;
  stddev?: InputMaybe<Program_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Program_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Program_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Program_Sum_Order_By>;
  var_pop?: InputMaybe<Program_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Program_Var_Samp_Order_By>;
  variance?: InputMaybe<Program_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Program" */
export type Program_Arr_Rel_Insert_Input = {
  data: Array<Program_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Program_On_Conflict>;
};

/** aggregate avg on columns */
export type Program_Avg_Fields = {
  __typename?: 'Program_avg_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "Program" */
export type Program_Avg_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Program". All fields are combined with a logical 'AND'. */
export type Program_Bool_Exp = {
  CertificateTemplatePrograms?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
  CertificateTemplatePrograms_aggregate?: InputMaybe<CertificateTemplateProgram_Aggregate_Bool_Exp>;
  Courses?: InputMaybe<Course_Bool_Exp>;
  Courses_aggregate?: InputMaybe<Course_Aggregate_Bool_Exp>;
  RentAScientistConfigs?: InputMaybe<RentAScientistConfig_Bool_Exp>;
  RentAScientistConfigs_aggregate?: InputMaybe<RentAScientistConfig_Aggregate_Bool_Exp>;
  ScientistOffers?: InputMaybe<ScientistOffer_Bool_Exp>;
  ScientistOffers_aggregate?: InputMaybe<ScientistOffer_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<Program_Bool_Exp>>;
  _not?: InputMaybe<Program_Bool_Exp>;
  _or?: InputMaybe<Array<Program_Bool_Exp>>;
  achievementCertificateTemplateTextId?: InputMaybe<Int_Comparison_Exp>;
  achievementCertificateTemplateURL?: InputMaybe<String_Comparison_Exp>;
  achievementRecordUploadDeadline?: InputMaybe<Date_Comparison_Exp>;
  applicationStart?: InputMaybe<Date_Comparison_Exp>;
  attendanceCertificateTemplateTextId?: InputMaybe<Int_Comparison_Exp>;
  attendanceCertificateTemplateURL?: InputMaybe<String_Comparison_Exp>;
  closingQuestionnaire?: InputMaybe<String_Comparison_Exp>;
  defaultApplicationEnd?: InputMaybe<Date_Comparison_Exp>;
  defaultMaxMissedSessions?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  lectureEnd?: InputMaybe<Date_Comparison_Exp>;
  lectureStart?: InputMaybe<Date_Comparison_Exp>;
  published?: InputMaybe<Boolean_Comparison_Exp>;
  shortTitle?: InputMaybe<String_Comparison_Exp>;
  speakerQuestionnaire?: InputMaybe<String_Comparison_Exp>;
  startQuestionnaire?: InputMaybe<String_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  visibility?: InputMaybe<Boolean_Comparison_Exp>;
  visibilityAchievementCertificate?: InputMaybe<Boolean_Comparison_Exp>;
  visibilityAttendanceCertificate?: InputMaybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "Program" */
export enum Program_Constraint {
  /** unique or primary key constraint on columns "id" */
  SemesterPkey = 'Semester_pkey'
}

/** input type for incrementing numeric columns in table "Program" */
export type Program_Inc_Input = {
  achievementCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  attendanceCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "Program" */
export type Program_Insert_Input = {
  CertificateTemplatePrograms?: InputMaybe<CertificateTemplateProgram_Arr_Rel_Insert_Input>;
  Courses?: InputMaybe<Course_Arr_Rel_Insert_Input>;
  RentAScientistConfigs?: InputMaybe<RentAScientistConfig_Arr_Rel_Insert_Input>;
  ScientistOffers?: InputMaybe<ScientistOffer_Arr_Rel_Insert_Input>;
  achievementCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: InputMaybe<Scalars['String']['input']>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: InputMaybe<Scalars['date']['input']>;
  /** The day the application for all courses of the program start. */
  applicationStart?: InputMaybe<Scalars['date']['input']>;
  attendanceCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: InputMaybe<Scalars['date']['input']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: InputMaybe<Scalars['date']['input']>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: InputMaybe<Scalars['date']['input']>;
  /** Decides whether the courses of this program can be published or not. (Courses are ony published if the filed publised in the Course table is also set to true.) */
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** The 6 letter short title for the program. */
  shortTitle?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The title of the program */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Defines whether the tab for this course program is shown or not. */
  visibility?: InputMaybe<Scalars['Boolean']['input']>;
  /** Sets the achievement certificates for all courses of htis program to be visible for the recipients. */
  visibilityAchievementCertificate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Sets the participation certificates for all courses of htis program to be visible for the recipients. */
  visibilityAttendanceCertificate?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate max on columns */
export type Program_Max_Fields = {
  __typename?: 'Program_max_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: Maybe<Scalars['String']['output']>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: Maybe<Scalars['date']['output']>;
  /** The day the application for all courses of the program start. */
  applicationStart?: Maybe<Scalars['date']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: Maybe<Scalars['date']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: Maybe<Scalars['date']['output']>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: Maybe<Scalars['date']['output']>;
  /** The 6 letter short title for the program. */
  shortTitle?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The title of the program */
  title?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "Program" */
export type Program_Max_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: InputMaybe<Order_By>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: InputMaybe<Order_By>;
  /** The day the application for all courses of the program start. */
  applicationStart?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: InputMaybe<Order_By>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: InputMaybe<Order_By>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: InputMaybe<Order_By>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: InputMaybe<Order_By>;
  /** The 6 letter short title for the program. */
  shortTitle?: InputMaybe<Order_By>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: InputMaybe<Order_By>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: InputMaybe<Order_By>;
  /** The title of the program */
  title?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Program_Min_Fields = {
  __typename?: 'Program_min_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: Maybe<Scalars['String']['output']>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: Maybe<Scalars['date']['output']>;
  /** The day the application for all courses of the program start. */
  applicationStart?: Maybe<Scalars['date']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: Maybe<Scalars['date']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: Maybe<Scalars['date']['output']>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: Maybe<Scalars['date']['output']>;
  /** The 6 letter short title for the program. */
  shortTitle?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: Maybe<Scalars['String']['output']>;
  /** The title of the program */
  title?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "Program" */
export type Program_Min_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: InputMaybe<Order_By>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: InputMaybe<Order_By>;
  /** The day the application for all courses of the program start. */
  applicationStart?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: InputMaybe<Order_By>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: InputMaybe<Order_By>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: InputMaybe<Order_By>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: InputMaybe<Order_By>;
  /** The 6 letter short title for the program. */
  shortTitle?: InputMaybe<Order_By>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: InputMaybe<Order_By>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: InputMaybe<Order_By>;
  /** The title of the program */
  title?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "Program" */
export type Program_Mutation_Response = {
  __typename?: 'Program_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Program>;
};

/** input type for inserting object relation for remote table "Program" */
export type Program_Obj_Rel_Insert_Input = {
  data: Program_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Program_On_Conflict>;
};

/** on_conflict condition type for table "Program" */
export type Program_On_Conflict = {
  constraint: Program_Constraint;
  update_columns?: Array<Program_Update_Column>;
  where?: InputMaybe<Program_Bool_Exp>;
};

/** Ordering options when selecting data from "Program". */
export type Program_Order_By = {
  CertificateTemplatePrograms_aggregate?: InputMaybe<CertificateTemplateProgram_Aggregate_Order_By>;
  Courses_aggregate?: InputMaybe<Course_Aggregate_Order_By>;
  RentAScientistConfigs_aggregate?: InputMaybe<RentAScientistConfig_Aggregate_Order_By>;
  ScientistOffers_aggregate?: InputMaybe<ScientistOffer_Aggregate_Order_By>;
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  achievementCertificateTemplateURL?: InputMaybe<Order_By>;
  achievementRecordUploadDeadline?: InputMaybe<Order_By>;
  applicationStart?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateURL?: InputMaybe<Order_By>;
  closingQuestionnaire?: InputMaybe<Order_By>;
  defaultApplicationEnd?: InputMaybe<Order_By>;
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  lectureEnd?: InputMaybe<Order_By>;
  lectureStart?: InputMaybe<Order_By>;
  published?: InputMaybe<Order_By>;
  shortTitle?: InputMaybe<Order_By>;
  speakerQuestionnaire?: InputMaybe<Order_By>;
  startQuestionnaire?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  visibility?: InputMaybe<Order_By>;
  visibilityAchievementCertificate?: InputMaybe<Order_By>;
  visibilityAttendanceCertificate?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Program */
export type Program_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "Program" */
export enum Program_Select_Column {
  /** column name */
  AchievementCertificateTemplateTextId = 'achievementCertificateTemplateTextId',
  /** column name */
  AchievementCertificateTemplateUrl = 'achievementCertificateTemplateURL',
  /** column name */
  AchievementRecordUploadDeadline = 'achievementRecordUploadDeadline',
  /** column name */
  ApplicationStart = 'applicationStart',
  /** column name */
  AttendanceCertificateTemplateTextId = 'attendanceCertificateTemplateTextId',
  /** column name */
  AttendanceCertificateTemplateUrl = 'attendanceCertificateTemplateURL',
  /** column name */
  ClosingQuestionnaire = 'closingQuestionnaire',
  /** column name */
  DefaultApplicationEnd = 'defaultApplicationEnd',
  /** column name */
  DefaultMaxMissedSessions = 'defaultMaxMissedSessions',
  /** column name */
  Id = 'id',
  /** column name */
  LectureEnd = 'lectureEnd',
  /** column name */
  LectureStart = 'lectureStart',
  /** column name */
  Published = 'published',
  /** column name */
  ShortTitle = 'shortTitle',
  /** column name */
  SpeakerQuestionnaire = 'speakerQuestionnaire',
  /** column name */
  StartQuestionnaire = 'startQuestionnaire',
  /** column name */
  Title = 'title',
  /** column name */
  Visibility = 'visibility',
  /** column name */
  VisibilityAchievementCertificate = 'visibilityAchievementCertificate',
  /** column name */
  VisibilityAttendanceCertificate = 'visibilityAttendanceCertificate'
}

/** select "Program_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Program" */
export enum Program_Select_Column_Program_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  Published = 'published',
  /** column name */
  Visibility = 'visibility',
  /** column name */
  VisibilityAchievementCertificate = 'visibilityAchievementCertificate',
  /** column name */
  VisibilityAttendanceCertificate = 'visibilityAttendanceCertificate'
}

/** select "Program_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Program" */
export enum Program_Select_Column_Program_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  Published = 'published',
  /** column name */
  Visibility = 'visibility',
  /** column name */
  VisibilityAchievementCertificate = 'visibilityAchievementCertificate',
  /** column name */
  VisibilityAttendanceCertificate = 'visibilityAttendanceCertificate'
}

/** input type for updating data in table "Program" */
export type Program_Set_Input = {
  achievementCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: InputMaybe<Scalars['String']['input']>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: InputMaybe<Scalars['date']['input']>;
  /** The day the application for all courses of the program start. */
  applicationStart?: InputMaybe<Scalars['date']['input']>;
  attendanceCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: InputMaybe<Scalars['date']['input']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: InputMaybe<Scalars['date']['input']>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: InputMaybe<Scalars['date']['input']>;
  /** Decides whether the courses of this program can be published or not. (Courses are ony published if the filed publised in the Course table is also set to true.) */
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** The 6 letter short title for the program. */
  shortTitle?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The title of the program */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Defines whether the tab for this course program is shown or not. */
  visibility?: InputMaybe<Scalars['Boolean']['input']>;
  /** Sets the achievement certificates for all courses of htis program to be visible for the recipients. */
  visibilityAchievementCertificate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Sets the participation certificates for all courses of htis program to be visible for the recipients. */
  visibilityAttendanceCertificate?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate stddev on columns */
export type Program_Stddev_Fields = {
  __typename?: 'Program_stddev_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "Program" */
export type Program_Stddev_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Program_Stddev_Pop_Fields = {
  __typename?: 'Program_stddev_pop_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "Program" */
export type Program_Stddev_Pop_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Program_Stddev_Samp_Fields = {
  __typename?: 'Program_stddev_samp_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "Program" */
export type Program_Stddev_Samp_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "Program" */
export type Program_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Program_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Program_Stream_Cursor_Value_Input = {
  achievementCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  /** The URL to the pdf template for the attendance certificate */
  achievementCertificateTemplateURL?: InputMaybe<Scalars['String']['input']>;
  /** The deadline for the achievement record uploads. */
  achievementRecordUploadDeadline?: InputMaybe<Scalars['date']['input']>;
  /** The day the application for all courses of the program start. */
  applicationStart?: InputMaybe<Scalars['date']['input']>;
  attendanceCertificateTemplateTextId?: InputMaybe<Scalars['Int']['input']>;
  /** The URL to the pdf template for the attendance certificate */
  attendanceCertificateTemplateURL?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that the participants of all courses get sent after the last session of their course. */
  closingQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The default application deadline for a course. It can be changed on the course level. */
  defaultApplicationEnd?: InputMaybe<Scalars['date']['input']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The last day a course lecture can possibly be in this program. */
  lectureEnd?: InputMaybe<Scalars['date']['input']>;
  /** The first day a course lecture can possibly be in this program. */
  lectureStart?: InputMaybe<Scalars['date']['input']>;
  /** Decides whether the courses of this program can be published or not. (Courses are ony published if the filed publised in the Course table is also set to true.) */
  published?: InputMaybe<Scalars['Boolean']['input']>;
  /** The 6 letter short title for the program. */
  shortTitle?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that is sent after all course sessions including a speaker. */
  speakerQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The questionnaire that the participants of all courses get sent after the first session of their course. */
  startQuestionnaire?: InputMaybe<Scalars['String']['input']>;
  /** The title of the program */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Defines whether the tab for this course program is shown or not. */
  visibility?: InputMaybe<Scalars['Boolean']['input']>;
  /** Sets the achievement certificates for all courses of htis program to be visible for the recipients. */
  visibilityAchievementCertificate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Sets the participation certificates for all courses of htis program to be visible for the recipients. */
  visibilityAttendanceCertificate?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate sum on columns */
export type Program_Sum_Fields = {
  __typename?: 'Program_sum_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Int']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "Program" */
export type Program_Sum_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "Program" */
export enum Program_Update_Column {
  /** column name */
  AchievementCertificateTemplateTextId = 'achievementCertificateTemplateTextId',
  /** column name */
  AchievementCertificateTemplateUrl = 'achievementCertificateTemplateURL',
  /** column name */
  AchievementRecordUploadDeadline = 'achievementRecordUploadDeadline',
  /** column name */
  ApplicationStart = 'applicationStart',
  /** column name */
  AttendanceCertificateTemplateTextId = 'attendanceCertificateTemplateTextId',
  /** column name */
  AttendanceCertificateTemplateUrl = 'attendanceCertificateTemplateURL',
  /** column name */
  ClosingQuestionnaire = 'closingQuestionnaire',
  /** column name */
  DefaultApplicationEnd = 'defaultApplicationEnd',
  /** column name */
  DefaultMaxMissedSessions = 'defaultMaxMissedSessions',
  /** column name */
  Id = 'id',
  /** column name */
  LectureEnd = 'lectureEnd',
  /** column name */
  LectureStart = 'lectureStart',
  /** column name */
  Published = 'published',
  /** column name */
  ShortTitle = 'shortTitle',
  /** column name */
  SpeakerQuestionnaire = 'speakerQuestionnaire',
  /** column name */
  StartQuestionnaire = 'startQuestionnaire',
  /** column name */
  Title = 'title',
  /** column name */
  Visibility = 'visibility',
  /** column name */
  VisibilityAchievementCertificate = 'visibilityAchievementCertificate',
  /** column name */
  VisibilityAttendanceCertificate = 'visibilityAttendanceCertificate'
}

export type Program_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Program_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Program_Set_Input>;
  /** filter the rows which have to be updated */
  where: Program_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Program_Var_Pop_Fields = {
  __typename?: 'Program_var_pop_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "Program" */
export type Program_Var_Pop_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Program_Var_Samp_Fields = {
  __typename?: 'Program_var_samp_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "Program" */
export type Program_Var_Samp_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Program_Variance_Fields = {
  __typename?: 'Program_variance_fields';
  achievementCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  attendanceCertificateTemplateTextId?: Maybe<Scalars['Float']['output']>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "Program" */
export type Program_Variance_Order_By = {
  achievementCertificateTemplateTextId?: InputMaybe<Order_By>;
  attendanceCertificateTemplateTextId?: InputMaybe<Order_By>;
  /** The default maximum number of sessions a participant can miss in a course while still receiving a certificate. It can be changed on the course level. */
  defaultMaxMissedSessions?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** table configures rent-a-scientist: Which program to use? Needs to be switched once a year... */
export type RentAScientistConfig = {
  __typename?: 'RentAScientistConfig';
  /** An object relationship */
  Program: Program;
  id: Scalars['Int']['output'];
  mailFrom?: Maybe<Scalars['String']['output']>;
  program_id: Scalars['Int']['output'];
  test_operation: Scalars['Boolean']['output'];
};

/** aggregated selection of "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Aggregate = {
  __typename?: 'RentAScientistConfig_aggregate';
  aggregate?: Maybe<RentAScientistConfig_Aggregate_Fields>;
  nodes: Array<RentAScientistConfig>;
};

export type RentAScientistConfig_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<RentAScientistConfig_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<RentAScientistConfig_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<RentAScientistConfig_Aggregate_Bool_Exp_Count>;
};

export type RentAScientistConfig_Aggregate_Bool_Exp_Bool_And = {
  arguments: RentAScientistConfig_Select_Column_RentAScientistConfig_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<RentAScientistConfig_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type RentAScientistConfig_Aggregate_Bool_Exp_Bool_Or = {
  arguments: RentAScientistConfig_Select_Column_RentAScientistConfig_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<RentAScientistConfig_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type RentAScientistConfig_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<RentAScientistConfig_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Aggregate_Fields = {
  __typename?: 'RentAScientistConfig_aggregate_fields';
  avg?: Maybe<RentAScientistConfig_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<RentAScientistConfig_Max_Fields>;
  min?: Maybe<RentAScientistConfig_Min_Fields>;
  stddev?: Maybe<RentAScientistConfig_Stddev_Fields>;
  stddev_pop?: Maybe<RentAScientistConfig_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RentAScientistConfig_Stddev_Samp_Fields>;
  sum?: Maybe<RentAScientistConfig_Sum_Fields>;
  var_pop?: Maybe<RentAScientistConfig_Var_Pop_Fields>;
  var_samp?: Maybe<RentAScientistConfig_Var_Samp_Fields>;
  variance?: Maybe<RentAScientistConfig_Variance_Fields>;
};


/** aggregate fields of "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Aggregate_Order_By = {
  avg?: InputMaybe<RentAScientistConfig_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<RentAScientistConfig_Max_Order_By>;
  min?: InputMaybe<RentAScientistConfig_Min_Order_By>;
  stddev?: InputMaybe<RentAScientistConfig_Stddev_Order_By>;
  stddev_pop?: InputMaybe<RentAScientistConfig_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<RentAScientistConfig_Stddev_Samp_Order_By>;
  sum?: InputMaybe<RentAScientistConfig_Sum_Order_By>;
  var_pop?: InputMaybe<RentAScientistConfig_Var_Pop_Order_By>;
  var_samp?: InputMaybe<RentAScientistConfig_Var_Samp_Order_By>;
  variance?: InputMaybe<RentAScientistConfig_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Arr_Rel_Insert_Input = {
  data: Array<RentAScientistConfig_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<RentAScientistConfig_On_Conflict>;
};

/** aggregate avg on columns */
export type RentAScientistConfig_Avg_Fields = {
  __typename?: 'RentAScientistConfig_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
  program_id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "rentAScientist.RentAScientistConfig". All fields are combined with a logical 'AND'. */
export type RentAScientistConfig_Bool_Exp = {
  Program?: InputMaybe<Program_Bool_Exp>;
  _and?: InputMaybe<Array<RentAScientistConfig_Bool_Exp>>;
  _not?: InputMaybe<RentAScientistConfig_Bool_Exp>;
  _or?: InputMaybe<Array<RentAScientistConfig_Bool_Exp>>;
  id?: InputMaybe<Int_Comparison_Exp>;
  mailFrom?: InputMaybe<String_Comparison_Exp>;
  program_id?: InputMaybe<Int_Comparison_Exp>;
  test_operation?: InputMaybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.RentAScientistConfig" */
export enum RentAScientistConfig_Constraint {
  /** unique or primary key constraint on columns "id" */
  RentAScientistConfigPkey = 'RentAScientistConfig_pkey'
}

/** input type for incrementing numeric columns in table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  program_id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Insert_Input = {
  Program?: InputMaybe<Program_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mailFrom?: InputMaybe<Scalars['String']['input']>;
  program_id?: InputMaybe<Scalars['Int']['input']>;
  test_operation?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate max on columns */
export type RentAScientistConfig_Max_Fields = {
  __typename?: 'RentAScientistConfig_max_fields';
  id?: Maybe<Scalars['Int']['output']>;
  mailFrom?: Maybe<Scalars['String']['output']>;
  program_id?: Maybe<Scalars['Int']['output']>;
};

/** order by max() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  mailFrom?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type RentAScientistConfig_Min_Fields = {
  __typename?: 'RentAScientistConfig_min_fields';
  id?: Maybe<Scalars['Int']['output']>;
  mailFrom?: Maybe<Scalars['String']['output']>;
  program_id?: Maybe<Scalars['Int']['output']>;
};

/** order by min() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  mailFrom?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Mutation_Response = {
  __typename?: 'RentAScientistConfig_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<RentAScientistConfig>;
};

/** on_conflict condition type for table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_On_Conflict = {
  constraint: RentAScientistConfig_Constraint;
  update_columns?: Array<RentAScientistConfig_Update_Column>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.RentAScientistConfig". */
export type RentAScientistConfig_Order_By = {
  Program?: InputMaybe<Program_Order_By>;
  id?: InputMaybe<Order_By>;
  mailFrom?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
  test_operation?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.RentAScientistConfig */
export type RentAScientistConfig_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "rentAScientist.RentAScientistConfig" */
export enum RentAScientistConfig_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  MailFrom = 'mailFrom',
  /** column name */
  ProgramId = 'program_id',
  /** column name */
  TestOperation = 'test_operation'
}

/** select "RentAScientistConfig_aggregate_bool_exp_bool_and_arguments_columns" columns of table "rentAScientist.RentAScientistConfig" */
export enum RentAScientistConfig_Select_Column_RentAScientistConfig_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  TestOperation = 'test_operation'
}

/** select "RentAScientistConfig_aggregate_bool_exp_bool_or_arguments_columns" columns of table "rentAScientist.RentAScientistConfig" */
export enum RentAScientistConfig_Select_Column_RentAScientistConfig_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  TestOperation = 'test_operation'
}

/** input type for updating data in table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Set_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  mailFrom?: InputMaybe<Scalars['String']['input']>;
  program_id?: InputMaybe<Scalars['Int']['input']>;
  test_operation?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate stddev on columns */
export type RentAScientistConfig_Stddev_Fields = {
  __typename?: 'RentAScientistConfig_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
  program_id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RentAScientistConfig_Stddev_Pop_Fields = {
  __typename?: 'RentAScientistConfig_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  program_id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RentAScientistConfig_Stddev_Samp_Fields = {
  __typename?: 'RentAScientistConfig_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  program_id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "RentAScientistConfig" */
export type RentAScientistConfig_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: RentAScientistConfig_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type RentAScientistConfig_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  mailFrom?: InputMaybe<Scalars['String']['input']>;
  program_id?: InputMaybe<Scalars['Int']['input']>;
  test_operation?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate sum on columns */
export type RentAScientistConfig_Sum_Fields = {
  __typename?: 'RentAScientistConfig_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
  program_id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** update columns of table "rentAScientist.RentAScientistConfig" */
export enum RentAScientistConfig_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  MailFrom = 'mailFrom',
  /** column name */
  ProgramId = 'program_id',
  /** column name */
  TestOperation = 'test_operation'
}

export type RentAScientistConfig_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<RentAScientistConfig_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<RentAScientistConfig_Set_Input>;
  /** filter the rows which have to be updated */
  where: RentAScientistConfig_Bool_Exp;
};

/** aggregate var_pop on columns */
export type RentAScientistConfig_Var_Pop_Fields = {
  __typename?: 'RentAScientistConfig_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  program_id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RentAScientistConfig_Var_Samp_Fields = {
  __typename?: 'RentAScientistConfig_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  program_id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type RentAScientistConfig_Variance_Fields = {
  __typename?: 'RentAScientistConfig_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
  program_id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "rentAScientist.RentAScientistConfig" */
export type RentAScientistConfig_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  program_id?: InputMaybe<Order_By>;
};

/** all the schools that exist in Schleswig Holstein. dstnr is the primary key: "Dienstnummer" */
export type School = {
  __typename?: 'School';
  /** An array relationship */
  SchoolClasses: Array<SchoolClass>;
  /** An aggregate relationship */
  SchoolClasses_aggregate: SchoolClass_Aggregate;
  city: Scalars['String']['output'];
  district: Scalars['String']['output'];
  dstnr: Scalars['String']['output'];
  name: Scalars['String']['output'];
  postalCode: Scalars['String']['output'];
  schoolType: Scalars['String']['output'];
  street: Scalars['String']['output'];
};


/** all the schools that exist in Schleswig Holstein. dstnr is the primary key: "Dienstnummer" */
export type SchoolSchoolClassesArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};


/** all the schools that exist in Schleswig Holstein. dstnr is the primary key: "Dienstnummer" */
export type SchoolSchoolClasses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};

/** A class of a school enrolled into rent-a-scientist by a teacher */
export type SchoolClass = {
  __typename?: 'SchoolClass';
  /** An object relationship */
  School: School;
  /** An array relationship */
  SchoolClassRequests: Array<SchoolClassRequest>;
  /** An aggregate relationship */
  SchoolClassRequests_aggregate: SchoolClassRequest_Aggregate;
  /** An object relationship */
  Teacher: Teacher;
  contact?: Maybe<Scalars['String']['output']>;
  grade: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  schoolId: Scalars['String']['output'];
  studensCount: Scalars['Int']['output'];
  teacherId: Scalars['Int']['output'];
};


/** A class of a school enrolled into rent-a-scientist by a teacher */
export type SchoolClassSchoolClassRequestsArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


/** A class of a school enrolled into rent-a-scientist by a teacher */
export type SchoolClassSchoolClassRequests_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};

/** A request from a school class for a specific offer from a scientist. It can be fulfilled by given an assignment. */
export type SchoolClassRequest = {
  __typename?: 'SchoolClassRequest';
  /** An object relationship */
  SchoolClass: SchoolClass;
  /** An object relationship */
  ScientistOffer: ScientistOffer;
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Int']['output']>;
  classId: Scalars['Int']['output'];
  commentGeneral?: Maybe<Scalars['String']['output']>;
  commentTime?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  offerId: Scalars['Int']['output'];
  possibleDays: Scalars['_int4']['output'];
};

/** aggregated selection of "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Aggregate = {
  __typename?: 'SchoolClassRequest_aggregate';
  aggregate?: Maybe<SchoolClassRequest_Aggregate_Fields>;
  nodes: Array<SchoolClassRequest>;
};

export type SchoolClassRequest_Aggregate_Bool_Exp = {
  count?: InputMaybe<SchoolClassRequest_Aggregate_Bool_Exp_Count>;
};

export type SchoolClassRequest_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<SchoolClassRequest_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Aggregate_Fields = {
  __typename?: 'SchoolClassRequest_aggregate_fields';
  avg?: Maybe<SchoolClassRequest_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<SchoolClassRequest_Max_Fields>;
  min?: Maybe<SchoolClassRequest_Min_Fields>;
  stddev?: Maybe<SchoolClassRequest_Stddev_Fields>;
  stddev_pop?: Maybe<SchoolClassRequest_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<SchoolClassRequest_Stddev_Samp_Fields>;
  sum?: Maybe<SchoolClassRequest_Sum_Fields>;
  var_pop?: Maybe<SchoolClassRequest_Var_Pop_Fields>;
  var_samp?: Maybe<SchoolClassRequest_Var_Samp_Fields>;
  variance?: Maybe<SchoolClassRequest_Variance_Fields>;
};


/** aggregate fields of "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Aggregate_Order_By = {
  avg?: InputMaybe<SchoolClassRequest_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<SchoolClassRequest_Max_Order_By>;
  min?: InputMaybe<SchoolClassRequest_Min_Order_By>;
  stddev?: InputMaybe<SchoolClassRequest_Stddev_Order_By>;
  stddev_pop?: InputMaybe<SchoolClassRequest_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<SchoolClassRequest_Stddev_Samp_Order_By>;
  sum?: InputMaybe<SchoolClassRequest_Sum_Order_By>;
  var_pop?: InputMaybe<SchoolClassRequest_Var_Pop_Order_By>;
  var_samp?: InputMaybe<SchoolClassRequest_Var_Samp_Order_By>;
  variance?: InputMaybe<SchoolClassRequest_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Arr_Rel_Insert_Input = {
  data: Array<SchoolClassRequest_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<SchoolClassRequest_On_Conflict>;
};

/** aggregate avg on columns */
export type SchoolClassRequest_Avg_Fields = {
  __typename?: 'SchoolClassRequest_avg_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Float']['output']>;
  classId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  offerId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Avg_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "rentAScientist.SchoolClassRequest". All fields are combined with a logical 'AND'. */
export type SchoolClassRequest_Bool_Exp = {
  SchoolClass?: InputMaybe<SchoolClass_Bool_Exp>;
  ScientistOffer?: InputMaybe<ScientistOffer_Bool_Exp>;
  _and?: InputMaybe<Array<SchoolClassRequest_Bool_Exp>>;
  _not?: InputMaybe<SchoolClassRequest_Bool_Exp>;
  _or?: InputMaybe<Array<SchoolClassRequest_Bool_Exp>>;
  assigned_day?: InputMaybe<Int_Comparison_Exp>;
  classId?: InputMaybe<Int_Comparison_Exp>;
  commentGeneral?: InputMaybe<String_Comparison_Exp>;
  commentTime?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  offerId?: InputMaybe<Int_Comparison_Exp>;
  possibleDays?: InputMaybe<_Int4_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.SchoolClassRequest" */
export enum SchoolClassRequest_Constraint {
  /** unique or primary key constraint on columns "id" */
  SchoolClassRequestPkey = 'SchoolClassRequest_pkey'
}

/** input type for incrementing numeric columns in table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Inc_Input = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Scalars['Int']['input']>;
  classId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  offerId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Insert_Input = {
  SchoolClass?: InputMaybe<SchoolClass_Obj_Rel_Insert_Input>;
  ScientistOffer?: InputMaybe<ScientistOffer_Obj_Rel_Insert_Input>;
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Scalars['Int']['input']>;
  classId?: InputMaybe<Scalars['Int']['input']>;
  commentGeneral?: InputMaybe<Scalars['String']['input']>;
  commentTime?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  offerId?: InputMaybe<Scalars['Int']['input']>;
  possibleDays?: InputMaybe<Scalars['_int4']['input']>;
};

/** aggregate max on columns */
export type SchoolClassRequest_Max_Fields = {
  __typename?: 'SchoolClassRequest_max_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Int']['output']>;
  classId?: Maybe<Scalars['Int']['output']>;
  commentGeneral?: Maybe<Scalars['String']['output']>;
  commentTime?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  offerId?: Maybe<Scalars['Int']['output']>;
};

/** order by max() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Max_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  commentGeneral?: InputMaybe<Order_By>;
  commentTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type SchoolClassRequest_Min_Fields = {
  __typename?: 'SchoolClassRequest_min_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Int']['output']>;
  classId?: Maybe<Scalars['Int']['output']>;
  commentGeneral?: Maybe<Scalars['String']['output']>;
  commentTime?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  offerId?: Maybe<Scalars['Int']['output']>;
};

/** order by min() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Min_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  commentGeneral?: InputMaybe<Order_By>;
  commentTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Mutation_Response = {
  __typename?: 'SchoolClassRequest_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<SchoolClassRequest>;
};

/** on_conflict condition type for table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_On_Conflict = {
  constraint: SchoolClassRequest_Constraint;
  update_columns?: Array<SchoolClassRequest_Update_Column>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.SchoolClassRequest". */
export type SchoolClassRequest_Order_By = {
  SchoolClass?: InputMaybe<SchoolClass_Order_By>;
  ScientistOffer?: InputMaybe<ScientistOffer_Order_By>;
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  commentGeneral?: InputMaybe<Order_By>;
  commentTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
  possibleDays?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.SchoolClassRequest */
export type SchoolClassRequest_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "rentAScientist.SchoolClassRequest" */
export enum SchoolClassRequest_Select_Column {
  /** column name */
  AssignedDay = 'assigned_day',
  /** column name */
  ClassId = 'classId',
  /** column name */
  CommentGeneral = 'commentGeneral',
  /** column name */
  CommentTime = 'commentTime',
  /** column name */
  Id = 'id',
  /** column name */
  OfferId = 'offerId',
  /** column name */
  PossibleDays = 'possibleDays'
}

/** input type for updating data in table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Set_Input = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Scalars['Int']['input']>;
  classId?: InputMaybe<Scalars['Int']['input']>;
  commentGeneral?: InputMaybe<Scalars['String']['input']>;
  commentTime?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  offerId?: InputMaybe<Scalars['Int']['input']>;
  possibleDays?: InputMaybe<Scalars['_int4']['input']>;
};

/** aggregate stddev on columns */
export type SchoolClassRequest_Stddev_Fields = {
  __typename?: 'SchoolClassRequest_stddev_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Float']['output']>;
  classId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  offerId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Stddev_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type SchoolClassRequest_Stddev_Pop_Fields = {
  __typename?: 'SchoolClassRequest_stddev_pop_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Float']['output']>;
  classId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  offerId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Stddev_Pop_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type SchoolClassRequest_Stddev_Samp_Fields = {
  __typename?: 'SchoolClassRequest_stddev_samp_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Float']['output']>;
  classId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  offerId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Stddev_Samp_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "SchoolClassRequest" */
export type SchoolClassRequest_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: SchoolClassRequest_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type SchoolClassRequest_Stream_Cursor_Value_Input = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Scalars['Int']['input']>;
  classId?: InputMaybe<Scalars['Int']['input']>;
  commentGeneral?: InputMaybe<Scalars['String']['input']>;
  commentTime?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  offerId?: InputMaybe<Scalars['Int']['input']>;
  possibleDays?: InputMaybe<Scalars['_int4']['input']>;
};

/** aggregate sum on columns */
export type SchoolClassRequest_Sum_Fields = {
  __typename?: 'SchoolClassRequest_sum_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Int']['output']>;
  classId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  offerId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Sum_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** update columns of table "rentAScientist.SchoolClassRequest" */
export enum SchoolClassRequest_Update_Column {
  /** column name */
  AssignedDay = 'assigned_day',
  /** column name */
  ClassId = 'classId',
  /** column name */
  CommentGeneral = 'commentGeneral',
  /** column name */
  CommentTime = 'commentTime',
  /** column name */
  Id = 'id',
  /** column name */
  OfferId = 'offerId',
  /** column name */
  PossibleDays = 'possibleDays'
}

export type SchoolClassRequest_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<SchoolClassRequest_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<SchoolClassRequest_Set_Input>;
  /** filter the rows which have to be updated */
  where: SchoolClassRequest_Bool_Exp;
};

/** aggregate var_pop on columns */
export type SchoolClassRequest_Var_Pop_Fields = {
  __typename?: 'SchoolClassRequest_var_pop_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Float']['output']>;
  classId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  offerId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Var_Pop_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type SchoolClassRequest_Var_Samp_Fields = {
  __typename?: 'SchoolClassRequest_var_samp_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Float']['output']>;
  classId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  offerId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Var_Samp_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type SchoolClassRequest_Variance_Fields = {
  __typename?: 'SchoolClassRequest_variance_fields';
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: Maybe<Scalars['Float']['output']>;
  classId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  offerId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "rentAScientist.SchoolClassRequest" */
export type SchoolClassRequest_Variance_Order_By = {
  /** Needs to be one of the possibleDays values to be valid. -1 is used as value to indicate rejection. */
  assigned_day?: InputMaybe<Order_By>;
  classId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  offerId?: InputMaybe<Order_By>;
};

/** aggregated selection of "rentAScientist.SchoolClass" */
export type SchoolClass_Aggregate = {
  __typename?: 'SchoolClass_aggregate';
  aggregate?: Maybe<SchoolClass_Aggregate_Fields>;
  nodes: Array<SchoolClass>;
};

export type SchoolClass_Aggregate_Bool_Exp = {
  count?: InputMaybe<SchoolClass_Aggregate_Bool_Exp_Count>;
};

export type SchoolClass_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<SchoolClass_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<SchoolClass_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "rentAScientist.SchoolClass" */
export type SchoolClass_Aggregate_Fields = {
  __typename?: 'SchoolClass_aggregate_fields';
  avg?: Maybe<SchoolClass_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<SchoolClass_Max_Fields>;
  min?: Maybe<SchoolClass_Min_Fields>;
  stddev?: Maybe<SchoolClass_Stddev_Fields>;
  stddev_pop?: Maybe<SchoolClass_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<SchoolClass_Stddev_Samp_Fields>;
  sum?: Maybe<SchoolClass_Sum_Fields>;
  var_pop?: Maybe<SchoolClass_Var_Pop_Fields>;
  var_samp?: Maybe<SchoolClass_Var_Samp_Fields>;
  variance?: Maybe<SchoolClass_Variance_Fields>;
};


/** aggregate fields of "rentAScientist.SchoolClass" */
export type SchoolClass_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<SchoolClass_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "rentAScientist.SchoolClass" */
export type SchoolClass_Aggregate_Order_By = {
  avg?: InputMaybe<SchoolClass_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<SchoolClass_Max_Order_By>;
  min?: InputMaybe<SchoolClass_Min_Order_By>;
  stddev?: InputMaybe<SchoolClass_Stddev_Order_By>;
  stddev_pop?: InputMaybe<SchoolClass_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<SchoolClass_Stddev_Samp_Order_By>;
  sum?: InputMaybe<SchoolClass_Sum_Order_By>;
  var_pop?: InputMaybe<SchoolClass_Var_Pop_Order_By>;
  var_samp?: InputMaybe<SchoolClass_Var_Samp_Order_By>;
  variance?: InputMaybe<SchoolClass_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "rentAScientist.SchoolClass" */
export type SchoolClass_Arr_Rel_Insert_Input = {
  data: Array<SchoolClass_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<SchoolClass_On_Conflict>;
};

/** aggregate avg on columns */
export type SchoolClass_Avg_Fields = {
  __typename?: 'SchoolClass_avg_fields';
  grade?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  studensCount?: Maybe<Scalars['Float']['output']>;
  teacherId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Avg_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "rentAScientist.SchoolClass". All fields are combined with a logical 'AND'. */
export type SchoolClass_Bool_Exp = {
  School?: InputMaybe<School_Bool_Exp>;
  SchoolClassRequests?: InputMaybe<SchoolClassRequest_Bool_Exp>;
  SchoolClassRequests_aggregate?: InputMaybe<SchoolClassRequest_Aggregate_Bool_Exp>;
  Teacher?: InputMaybe<Teacher_Bool_Exp>;
  _and?: InputMaybe<Array<SchoolClass_Bool_Exp>>;
  _not?: InputMaybe<SchoolClass_Bool_Exp>;
  _or?: InputMaybe<Array<SchoolClass_Bool_Exp>>;
  contact?: InputMaybe<String_Comparison_Exp>;
  grade?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  schoolId?: InputMaybe<String_Comparison_Exp>;
  studensCount?: InputMaybe<Int_Comparison_Exp>;
  teacherId?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.SchoolClass" */
export enum SchoolClass_Constraint {
  /** unique or primary key constraint on columns "id" */
  SchoolClassPkey = 'SchoolClass_pkey'
}

/** input type for incrementing numeric columns in table "rentAScientist.SchoolClass" */
export type SchoolClass_Inc_Input = {
  grade?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  studensCount?: InputMaybe<Scalars['Int']['input']>;
  teacherId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "rentAScientist.SchoolClass" */
export type SchoolClass_Insert_Input = {
  School?: InputMaybe<School_Obj_Rel_Insert_Input>;
  SchoolClassRequests?: InputMaybe<SchoolClassRequest_Arr_Rel_Insert_Input>;
  Teacher?: InputMaybe<Teacher_Obj_Rel_Insert_Input>;
  contact?: InputMaybe<Scalars['String']['input']>;
  grade?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  schoolId?: InputMaybe<Scalars['String']['input']>;
  studensCount?: InputMaybe<Scalars['Int']['input']>;
  teacherId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate max on columns */
export type SchoolClass_Max_Fields = {
  __typename?: 'SchoolClass_max_fields';
  contact?: Maybe<Scalars['String']['output']>;
  grade?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  schoolId?: Maybe<Scalars['String']['output']>;
  studensCount?: Maybe<Scalars['Int']['output']>;
  teacherId?: Maybe<Scalars['Int']['output']>;
};

/** order by max() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Max_Order_By = {
  contact?: InputMaybe<Order_By>;
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  schoolId?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type SchoolClass_Min_Fields = {
  __typename?: 'SchoolClass_min_fields';
  contact?: Maybe<Scalars['String']['output']>;
  grade?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  schoolId?: Maybe<Scalars['String']['output']>;
  studensCount?: Maybe<Scalars['Int']['output']>;
  teacherId?: Maybe<Scalars['Int']['output']>;
};

/** order by min() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Min_Order_By = {
  contact?: InputMaybe<Order_By>;
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  schoolId?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "rentAScientist.SchoolClass" */
export type SchoolClass_Mutation_Response = {
  __typename?: 'SchoolClass_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<SchoolClass>;
};

/** input type for inserting object relation for remote table "rentAScientist.SchoolClass" */
export type SchoolClass_Obj_Rel_Insert_Input = {
  data: SchoolClass_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<SchoolClass_On_Conflict>;
};

/** on_conflict condition type for table "rentAScientist.SchoolClass" */
export type SchoolClass_On_Conflict = {
  constraint: SchoolClass_Constraint;
  update_columns?: Array<SchoolClass_Update_Column>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.SchoolClass". */
export type SchoolClass_Order_By = {
  School?: InputMaybe<School_Order_By>;
  SchoolClassRequests_aggregate?: InputMaybe<SchoolClassRequest_Aggregate_Order_By>;
  Teacher?: InputMaybe<Teacher_Order_By>;
  contact?: InputMaybe<Order_By>;
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  schoolId?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.SchoolClass */
export type SchoolClass_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "rentAScientist.SchoolClass" */
export enum SchoolClass_Select_Column {
  /** column name */
  Contact = 'contact',
  /** column name */
  Grade = 'grade',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SchoolId = 'schoolId',
  /** column name */
  StudensCount = 'studensCount',
  /** column name */
  TeacherId = 'teacherId'
}

/** input type for updating data in table "rentAScientist.SchoolClass" */
export type SchoolClass_Set_Input = {
  contact?: InputMaybe<Scalars['String']['input']>;
  grade?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  schoolId?: InputMaybe<Scalars['String']['input']>;
  studensCount?: InputMaybe<Scalars['Int']['input']>;
  teacherId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate stddev on columns */
export type SchoolClass_Stddev_Fields = {
  __typename?: 'SchoolClass_stddev_fields';
  grade?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  studensCount?: Maybe<Scalars['Float']['output']>;
  teacherId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Stddev_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type SchoolClass_Stddev_Pop_Fields = {
  __typename?: 'SchoolClass_stddev_pop_fields';
  grade?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  studensCount?: Maybe<Scalars['Float']['output']>;
  teacherId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Stddev_Pop_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type SchoolClass_Stddev_Samp_Fields = {
  __typename?: 'SchoolClass_stddev_samp_fields';
  grade?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  studensCount?: Maybe<Scalars['Float']['output']>;
  teacherId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Stddev_Samp_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "SchoolClass" */
export type SchoolClass_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: SchoolClass_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type SchoolClass_Stream_Cursor_Value_Input = {
  contact?: InputMaybe<Scalars['String']['input']>;
  grade?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  schoolId?: InputMaybe<Scalars['String']['input']>;
  studensCount?: InputMaybe<Scalars['Int']['input']>;
  teacherId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate sum on columns */
export type SchoolClass_Sum_Fields = {
  __typename?: 'SchoolClass_sum_fields';
  grade?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  studensCount?: Maybe<Scalars['Int']['output']>;
  teacherId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Sum_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** update columns of table "rentAScientist.SchoolClass" */
export enum SchoolClass_Update_Column {
  /** column name */
  Contact = 'contact',
  /** column name */
  Grade = 'grade',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SchoolId = 'schoolId',
  /** column name */
  StudensCount = 'studensCount',
  /** column name */
  TeacherId = 'teacherId'
}

export type SchoolClass_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<SchoolClass_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<SchoolClass_Set_Input>;
  /** filter the rows which have to be updated */
  where: SchoolClass_Bool_Exp;
};

/** aggregate var_pop on columns */
export type SchoolClass_Var_Pop_Fields = {
  __typename?: 'SchoolClass_var_pop_fields';
  grade?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  studensCount?: Maybe<Scalars['Float']['output']>;
  teacherId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Var_Pop_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type SchoolClass_Var_Samp_Fields = {
  __typename?: 'SchoolClass_var_samp_fields';
  grade?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  studensCount?: Maybe<Scalars['Float']['output']>;
  teacherId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Var_Samp_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type SchoolClass_Variance_Fields = {
  __typename?: 'SchoolClass_variance_fields';
  grade?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  studensCount?: Maybe<Scalars['Float']['output']>;
  teacherId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "rentAScientist.SchoolClass" */
export type SchoolClass_Variance_Order_By = {
  grade?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  studensCount?: InputMaybe<Order_By>;
  teacherId?: InputMaybe<Order_By>;
};

/** aggregated selection of "rentAScientist.School" */
export type School_Aggregate = {
  __typename?: 'School_aggregate';
  aggregate?: Maybe<School_Aggregate_Fields>;
  nodes: Array<School>;
};

/** aggregate fields of "rentAScientist.School" */
export type School_Aggregate_Fields = {
  __typename?: 'School_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<School_Max_Fields>;
  min?: Maybe<School_Min_Fields>;
};


/** aggregate fields of "rentAScientist.School" */
export type School_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<School_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "rentAScientist.School". All fields are combined with a logical 'AND'. */
export type School_Bool_Exp = {
  SchoolClasses?: InputMaybe<SchoolClass_Bool_Exp>;
  SchoolClasses_aggregate?: InputMaybe<SchoolClass_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<School_Bool_Exp>>;
  _not?: InputMaybe<School_Bool_Exp>;
  _or?: InputMaybe<Array<School_Bool_Exp>>;
  city?: InputMaybe<String_Comparison_Exp>;
  district?: InputMaybe<String_Comparison_Exp>;
  dstnr?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  postalCode?: InputMaybe<String_Comparison_Exp>;
  schoolType?: InputMaybe<String_Comparison_Exp>;
  street?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.School" */
export enum School_Constraint {
  /** unique or primary key constraint on columns "dstnr" */
  SchoolPkey = 'School_pkey'
}

/** input type for inserting data into table "rentAScientist.School" */
export type School_Insert_Input = {
  SchoolClasses?: InputMaybe<SchoolClass_Arr_Rel_Insert_Input>;
  city?: InputMaybe<Scalars['String']['input']>;
  district?: InputMaybe<Scalars['String']['input']>;
  dstnr?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  schoolType?: InputMaybe<Scalars['String']['input']>;
  street?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type School_Max_Fields = {
  __typename?: 'School_max_fields';
  city?: Maybe<Scalars['String']['output']>;
  district?: Maybe<Scalars['String']['output']>;
  dstnr?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  schoolType?: Maybe<Scalars['String']['output']>;
  street?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type School_Min_Fields = {
  __typename?: 'School_min_fields';
  city?: Maybe<Scalars['String']['output']>;
  district?: Maybe<Scalars['String']['output']>;
  dstnr?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  schoolType?: Maybe<Scalars['String']['output']>;
  street?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "rentAScientist.School" */
export type School_Mutation_Response = {
  __typename?: 'School_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<School>;
};

/** input type for inserting object relation for remote table "rentAScientist.School" */
export type School_Obj_Rel_Insert_Input = {
  data: School_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<School_On_Conflict>;
};

/** on_conflict condition type for table "rentAScientist.School" */
export type School_On_Conflict = {
  constraint: School_Constraint;
  update_columns?: Array<School_Update_Column>;
  where?: InputMaybe<School_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.School". */
export type School_Order_By = {
  SchoolClasses_aggregate?: InputMaybe<SchoolClass_Aggregate_Order_By>;
  city?: InputMaybe<Order_By>;
  district?: InputMaybe<Order_By>;
  dstnr?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  postalCode?: InputMaybe<Order_By>;
  schoolType?: InputMaybe<Order_By>;
  street?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.School */
export type School_Pk_Columns_Input = {
  dstnr: Scalars['String']['input'];
};

/** select columns of table "rentAScientist.School" */
export enum School_Select_Column {
  /** column name */
  City = 'city',
  /** column name */
  District = 'district',
  /** column name */
  Dstnr = 'dstnr',
  /** column name */
  Name = 'name',
  /** column name */
  PostalCode = 'postalCode',
  /** column name */
  SchoolType = 'schoolType',
  /** column name */
  Street = 'street'
}

/** input type for updating data in table "rentAScientist.School" */
export type School_Set_Input = {
  city?: InputMaybe<Scalars['String']['input']>;
  district?: InputMaybe<Scalars['String']['input']>;
  dstnr?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  schoolType?: InputMaybe<Scalars['String']['input']>;
  street?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "School" */
export type School_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: School_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type School_Stream_Cursor_Value_Input = {
  city?: InputMaybe<Scalars['String']['input']>;
  district?: InputMaybe<Scalars['String']['input']>;
  dstnr?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  schoolType?: InputMaybe<Scalars['String']['input']>;
  street?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "rentAScientist.School" */
export enum School_Update_Column {
  /** column name */
  City = 'city',
  /** column name */
  District = 'district',
  /** column name */
  Dstnr = 'dstnr',
  /** column name */
  Name = 'name',
  /** column name */
  PostalCode = 'postalCode',
  /** column name */
  SchoolType = 'schoolType',
  /** column name */
  Street = 'street'
}

export type School_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<School_Set_Input>;
  /** filter the rows which have to be updated */
  where: School_Bool_Exp;
};

/** Rent-A-Scientist scientist offers courses */
export type Scientist = {
  __typename?: 'Scientist';
  /** An array relationship */
  ScientistOfferRelations: Array<ScientistOfferRelation>;
  /** An aggregate relationship */
  ScientistOfferRelations_aggregate: ScientistOfferRelation_Aggregate;
  forename: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  image?: Maybe<Scalars['String']['output']>;
  surname: Scalars['String']['output'];
  title: Scalars['String']['output'];
};


/** Rent-A-Scientist scientist offers courses */
export type ScientistScientistOfferRelationsArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};


/** Rent-A-Scientist scientist offers courses */
export type ScientistScientistOfferRelations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};

/** An offer from a scientist for Rent-A-Scientist */
export type ScientistOffer = {
  __typename?: 'ScientistOffer';
  /** An object relationship */
  Program: Program;
  /** An array relationship */
  SchoolClassRequests: Array<SchoolClassRequest>;
  /** An aggregate relationship */
  SchoolClassRequests_aggregate: SchoolClassRequest_Aggregate;
  /** An array relationship */
  ScientistOfferRelations: Array<ScientistOfferRelation>;
  /** An aggregate relationship */
  ScientistOfferRelations_aggregate: ScientistOfferRelation_Aggregate;
  categories: Scalars['_text']['output'];
  classPreparation: Scalars['String']['output'];
  contactEmail?: Maybe<Scalars['String']['output']>;
  contactName?: Maybe<Scalars['String']['output']>;
  contactPhone?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  duration: Scalars['String']['output'];
  equipmentRequired: Scalars['String']['output'];
  extraComment: Scalars['String']['output'];
  format: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  institutionLogo: Scalars['String']['output'];
  institutionName: Scalars['String']['output'];
  maxDeployments: Scalars['Int']['output'];
  maximumGrade: Scalars['Int']['output'];
  minimumGrade: Scalars['Int']['output'];
  possibleDays: Scalars['_int4']['output'];
  possibleLocations: Scalars['_text']['output'];
  programId: Scalars['Int']['output'];
  researchSubject?: Maybe<Scalars['String']['output']>;
  roomRequirements: Scalars['String']['output'];
  subjectComment: Scalars['String']['output'];
  timeWindow: Scalars['_text']['output'];
  title: Scalars['String']['output'];
};


/** An offer from a scientist for Rent-A-Scientist */
export type ScientistOfferSchoolClassRequestsArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


/** An offer from a scientist for Rent-A-Scientist */
export type ScientistOfferSchoolClassRequests_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


/** An offer from a scientist for Rent-A-Scientist */
export type ScientistOfferScientistOfferRelationsArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};


/** An offer from a scientist for Rent-A-Scientist */
export type ScientistOfferScientistOfferRelations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};

/** relation between scientists and their offer */
export type ScientistOfferRelation = {
  __typename?: 'ScientistOfferRelation';
  /** An object relationship */
  Scientist: Scientist;
  /** An object relationship */
  ScientistOffer: ScientistOffer;
  offerId: Scalars['Int']['output'];
  scientistId: Scalars['Int']['output'];
};

/** aggregated selection of "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Aggregate = {
  __typename?: 'ScientistOfferRelation_aggregate';
  aggregate?: Maybe<ScientistOfferRelation_Aggregate_Fields>;
  nodes: Array<ScientistOfferRelation>;
};

export type ScientistOfferRelation_Aggregate_Bool_Exp = {
  count?: InputMaybe<ScientistOfferRelation_Aggregate_Bool_Exp_Count>;
};

export type ScientistOfferRelation_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Aggregate_Fields = {
  __typename?: 'ScientistOfferRelation_aggregate_fields';
  avg?: Maybe<ScientistOfferRelation_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<ScientistOfferRelation_Max_Fields>;
  min?: Maybe<ScientistOfferRelation_Min_Fields>;
  stddev?: Maybe<ScientistOfferRelation_Stddev_Fields>;
  stddev_pop?: Maybe<ScientistOfferRelation_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ScientistOfferRelation_Stddev_Samp_Fields>;
  sum?: Maybe<ScientistOfferRelation_Sum_Fields>;
  var_pop?: Maybe<ScientistOfferRelation_Var_Pop_Fields>;
  var_samp?: Maybe<ScientistOfferRelation_Var_Samp_Fields>;
  variance?: Maybe<ScientistOfferRelation_Variance_Fields>;
};


/** aggregate fields of "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Aggregate_Order_By = {
  avg?: InputMaybe<ScientistOfferRelation_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ScientistOfferRelation_Max_Order_By>;
  min?: InputMaybe<ScientistOfferRelation_Min_Order_By>;
  stddev?: InputMaybe<ScientistOfferRelation_Stddev_Order_By>;
  stddev_pop?: InputMaybe<ScientistOfferRelation_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<ScientistOfferRelation_Stddev_Samp_Order_By>;
  sum?: InputMaybe<ScientistOfferRelation_Sum_Order_By>;
  var_pop?: InputMaybe<ScientistOfferRelation_Var_Pop_Order_By>;
  var_samp?: InputMaybe<ScientistOfferRelation_Var_Samp_Order_By>;
  variance?: InputMaybe<ScientistOfferRelation_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Arr_Rel_Insert_Input = {
  data: Array<ScientistOfferRelation_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ScientistOfferRelation_On_Conflict>;
};

/** aggregate avg on columns */
export type ScientistOfferRelation_Avg_Fields = {
  __typename?: 'ScientistOfferRelation_avg_fields';
  offerId?: Maybe<Scalars['Float']['output']>;
  scientistId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Avg_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "rentAScientist.ScientistOfferRelation". All fields are combined with a logical 'AND'. */
export type ScientistOfferRelation_Bool_Exp = {
  Scientist?: InputMaybe<Scientist_Bool_Exp>;
  ScientistOffer?: InputMaybe<ScientistOffer_Bool_Exp>;
  _and?: InputMaybe<Array<ScientistOfferRelation_Bool_Exp>>;
  _not?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
  _or?: InputMaybe<Array<ScientistOfferRelation_Bool_Exp>>;
  offerId?: InputMaybe<Int_Comparison_Exp>;
  scientistId?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.ScientistOfferRelation" */
export enum ScientistOfferRelation_Constraint {
  /** unique or primary key constraint on columns "offerId", "scientistId" */
  ScientistOfferRelationPkey = 'ScientistOfferRelation_pkey'
}

/** input type for incrementing numeric columns in table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Inc_Input = {
  offerId?: InputMaybe<Scalars['Int']['input']>;
  scientistId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Insert_Input = {
  Scientist?: InputMaybe<Scientist_Obj_Rel_Insert_Input>;
  ScientistOffer?: InputMaybe<ScientistOffer_Obj_Rel_Insert_Input>;
  offerId?: InputMaybe<Scalars['Int']['input']>;
  scientistId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate max on columns */
export type ScientistOfferRelation_Max_Fields = {
  __typename?: 'ScientistOfferRelation_max_fields';
  offerId?: Maybe<Scalars['Int']['output']>;
  scientistId?: Maybe<Scalars['Int']['output']>;
};

/** order by max() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Max_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ScientistOfferRelation_Min_Fields = {
  __typename?: 'ScientistOfferRelation_min_fields';
  offerId?: Maybe<Scalars['Int']['output']>;
  scientistId?: Maybe<Scalars['Int']['output']>;
};

/** order by min() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Min_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Mutation_Response = {
  __typename?: 'ScientistOfferRelation_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ScientistOfferRelation>;
};

/** on_conflict condition type for table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_On_Conflict = {
  constraint: ScientistOfferRelation_Constraint;
  update_columns?: Array<ScientistOfferRelation_Update_Column>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.ScientistOfferRelation". */
export type ScientistOfferRelation_Order_By = {
  Scientist?: InputMaybe<Scientist_Order_By>;
  ScientistOffer?: InputMaybe<ScientistOffer_Order_By>;
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.ScientistOfferRelation */
export type ScientistOfferRelation_Pk_Columns_Input = {
  offerId: Scalars['Int']['input'];
  scientistId: Scalars['Int']['input'];
};

/** select columns of table "rentAScientist.ScientistOfferRelation" */
export enum ScientistOfferRelation_Select_Column {
  /** column name */
  OfferId = 'offerId',
  /** column name */
  ScientistId = 'scientistId'
}

/** input type for updating data in table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Set_Input = {
  offerId?: InputMaybe<Scalars['Int']['input']>;
  scientistId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate stddev on columns */
export type ScientistOfferRelation_Stddev_Fields = {
  __typename?: 'ScientistOfferRelation_stddev_fields';
  offerId?: Maybe<Scalars['Float']['output']>;
  scientistId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Stddev_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ScientistOfferRelation_Stddev_Pop_Fields = {
  __typename?: 'ScientistOfferRelation_stddev_pop_fields';
  offerId?: Maybe<Scalars['Float']['output']>;
  scientistId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Stddev_Pop_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ScientistOfferRelation_Stddev_Samp_Fields = {
  __typename?: 'ScientistOfferRelation_stddev_samp_fields';
  offerId?: Maybe<Scalars['Float']['output']>;
  scientistId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Stddev_Samp_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "ScientistOfferRelation" */
export type ScientistOfferRelation_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ScientistOfferRelation_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ScientistOfferRelation_Stream_Cursor_Value_Input = {
  offerId?: InputMaybe<Scalars['Int']['input']>;
  scientistId?: InputMaybe<Scalars['Int']['input']>;
};

/** aggregate sum on columns */
export type ScientistOfferRelation_Sum_Fields = {
  __typename?: 'ScientistOfferRelation_sum_fields';
  offerId?: Maybe<Scalars['Int']['output']>;
  scientistId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Sum_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** update columns of table "rentAScientist.ScientistOfferRelation" */
export enum ScientistOfferRelation_Update_Column {
  /** column name */
  OfferId = 'offerId',
  /** column name */
  ScientistId = 'scientistId'
}

export type ScientistOfferRelation_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<ScientistOfferRelation_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ScientistOfferRelation_Set_Input>;
  /** filter the rows which have to be updated */
  where: ScientistOfferRelation_Bool_Exp;
};

/** aggregate var_pop on columns */
export type ScientistOfferRelation_Var_Pop_Fields = {
  __typename?: 'ScientistOfferRelation_var_pop_fields';
  offerId?: Maybe<Scalars['Float']['output']>;
  scientistId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Var_Pop_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ScientistOfferRelation_Var_Samp_Fields = {
  __typename?: 'ScientistOfferRelation_var_samp_fields';
  offerId?: Maybe<Scalars['Float']['output']>;
  scientistId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Var_Samp_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type ScientistOfferRelation_Variance_Fields = {
  __typename?: 'ScientistOfferRelation_variance_fields';
  offerId?: Maybe<Scalars['Float']['output']>;
  scientistId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "rentAScientist.ScientistOfferRelation" */
export type ScientistOfferRelation_Variance_Order_By = {
  offerId?: InputMaybe<Order_By>;
  scientistId?: InputMaybe<Order_By>;
};

/** aggregated selection of "rentAScientist.ScientistOffer" */
export type ScientistOffer_Aggregate = {
  __typename?: 'ScientistOffer_aggregate';
  aggregate?: Maybe<ScientistOffer_Aggregate_Fields>;
  nodes: Array<ScientistOffer>;
};

export type ScientistOffer_Aggregate_Bool_Exp = {
  count?: InputMaybe<ScientistOffer_Aggregate_Bool_Exp_Count>;
};

export type ScientistOffer_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ScientistOffer_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "rentAScientist.ScientistOffer" */
export type ScientistOffer_Aggregate_Fields = {
  __typename?: 'ScientistOffer_aggregate_fields';
  avg?: Maybe<ScientistOffer_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<ScientistOffer_Max_Fields>;
  min?: Maybe<ScientistOffer_Min_Fields>;
  stddev?: Maybe<ScientistOffer_Stddev_Fields>;
  stddev_pop?: Maybe<ScientistOffer_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ScientistOffer_Stddev_Samp_Fields>;
  sum?: Maybe<ScientistOffer_Sum_Fields>;
  var_pop?: Maybe<ScientistOffer_Var_Pop_Fields>;
  var_samp?: Maybe<ScientistOffer_Var_Samp_Fields>;
  variance?: Maybe<ScientistOffer_Variance_Fields>;
};


/** aggregate fields of "rentAScientist.ScientistOffer" */
export type ScientistOffer_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Aggregate_Order_By = {
  avg?: InputMaybe<ScientistOffer_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ScientistOffer_Max_Order_By>;
  min?: InputMaybe<ScientistOffer_Min_Order_By>;
  stddev?: InputMaybe<ScientistOffer_Stddev_Order_By>;
  stddev_pop?: InputMaybe<ScientistOffer_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<ScientistOffer_Stddev_Samp_Order_By>;
  sum?: InputMaybe<ScientistOffer_Sum_Order_By>;
  var_pop?: InputMaybe<ScientistOffer_Var_Pop_Order_By>;
  var_samp?: InputMaybe<ScientistOffer_Var_Samp_Order_By>;
  variance?: InputMaybe<ScientistOffer_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Arr_Rel_Insert_Input = {
  data: Array<ScientistOffer_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ScientistOffer_On_Conflict>;
};

/** aggregate avg on columns */
export type ScientistOffer_Avg_Fields = {
  __typename?: 'ScientistOffer_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
  maxDeployments?: Maybe<Scalars['Float']['output']>;
  maximumGrade?: Maybe<Scalars['Float']['output']>;
  minimumGrade?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "rentAScientist.ScientistOffer". All fields are combined with a logical 'AND'. */
export type ScientistOffer_Bool_Exp = {
  Program?: InputMaybe<Program_Bool_Exp>;
  SchoolClassRequests?: InputMaybe<SchoolClassRequest_Bool_Exp>;
  SchoolClassRequests_aggregate?: InputMaybe<SchoolClassRequest_Aggregate_Bool_Exp>;
  ScientistOfferRelations?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
  ScientistOfferRelations_aggregate?: InputMaybe<ScientistOfferRelation_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<ScientistOffer_Bool_Exp>>;
  _not?: InputMaybe<ScientistOffer_Bool_Exp>;
  _or?: InputMaybe<Array<ScientistOffer_Bool_Exp>>;
  categories?: InputMaybe<_Text_Comparison_Exp>;
  classPreparation?: InputMaybe<String_Comparison_Exp>;
  contactEmail?: InputMaybe<String_Comparison_Exp>;
  contactName?: InputMaybe<String_Comparison_Exp>;
  contactPhone?: InputMaybe<String_Comparison_Exp>;
  description?: InputMaybe<String_Comparison_Exp>;
  duration?: InputMaybe<String_Comparison_Exp>;
  equipmentRequired?: InputMaybe<String_Comparison_Exp>;
  extraComment?: InputMaybe<String_Comparison_Exp>;
  format?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  institutionLogo?: InputMaybe<String_Comparison_Exp>;
  institutionName?: InputMaybe<String_Comparison_Exp>;
  maxDeployments?: InputMaybe<Int_Comparison_Exp>;
  maximumGrade?: InputMaybe<Int_Comparison_Exp>;
  minimumGrade?: InputMaybe<Int_Comparison_Exp>;
  possibleDays?: InputMaybe<_Int4_Comparison_Exp>;
  possibleLocations?: InputMaybe<_Text_Comparison_Exp>;
  programId?: InputMaybe<Int_Comparison_Exp>;
  researchSubject?: InputMaybe<String_Comparison_Exp>;
  roomRequirements?: InputMaybe<String_Comparison_Exp>;
  subjectComment?: InputMaybe<String_Comparison_Exp>;
  timeWindow?: InputMaybe<_Text_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.ScientistOffer" */
export enum ScientistOffer_Constraint {
  /** unique or primary key constraint on columns "id" */
  ScientistOfferPkey = 'ScientistOffer_pkey'
}

/** input type for incrementing numeric columns in table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  maxDeployments?: InputMaybe<Scalars['Int']['input']>;
  maximumGrade?: InputMaybe<Scalars['Int']['input']>;
  minimumGrade?: InputMaybe<Scalars['Int']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Insert_Input = {
  Program?: InputMaybe<Program_Obj_Rel_Insert_Input>;
  SchoolClassRequests?: InputMaybe<SchoolClassRequest_Arr_Rel_Insert_Input>;
  ScientistOfferRelations?: InputMaybe<ScientistOfferRelation_Arr_Rel_Insert_Input>;
  categories?: InputMaybe<Scalars['_text']['input']>;
  classPreparation?: InputMaybe<Scalars['String']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  contactName?: InputMaybe<Scalars['String']['input']>;
  contactPhone?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  equipmentRequired?: InputMaybe<Scalars['String']['input']>;
  extraComment?: InputMaybe<Scalars['String']['input']>;
  format?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  institutionLogo?: InputMaybe<Scalars['String']['input']>;
  institutionName?: InputMaybe<Scalars['String']['input']>;
  maxDeployments?: InputMaybe<Scalars['Int']['input']>;
  maximumGrade?: InputMaybe<Scalars['Int']['input']>;
  minimumGrade?: InputMaybe<Scalars['Int']['input']>;
  possibleDays?: InputMaybe<Scalars['_int4']['input']>;
  possibleLocations?: InputMaybe<Scalars['_text']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
  researchSubject?: InputMaybe<Scalars['String']['input']>;
  roomRequirements?: InputMaybe<Scalars['String']['input']>;
  subjectComment?: InputMaybe<Scalars['String']['input']>;
  timeWindow?: InputMaybe<Scalars['_text']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ScientistOffer_Max_Fields = {
  __typename?: 'ScientistOffer_max_fields';
  classPreparation?: Maybe<Scalars['String']['output']>;
  contactEmail?: Maybe<Scalars['String']['output']>;
  contactName?: Maybe<Scalars['String']['output']>;
  contactPhone?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['String']['output']>;
  equipmentRequired?: Maybe<Scalars['String']['output']>;
  extraComment?: Maybe<Scalars['String']['output']>;
  format?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  institutionLogo?: Maybe<Scalars['String']['output']>;
  institutionName?: Maybe<Scalars['String']['output']>;
  maxDeployments?: Maybe<Scalars['Int']['output']>;
  maximumGrade?: Maybe<Scalars['Int']['output']>;
  minimumGrade?: Maybe<Scalars['Int']['output']>;
  programId?: Maybe<Scalars['Int']['output']>;
  researchSubject?: Maybe<Scalars['String']['output']>;
  roomRequirements?: Maybe<Scalars['String']['output']>;
  subjectComment?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Max_Order_By = {
  classPreparation?: InputMaybe<Order_By>;
  contactEmail?: InputMaybe<Order_By>;
  contactName?: InputMaybe<Order_By>;
  contactPhone?: InputMaybe<Order_By>;
  description?: InputMaybe<Order_By>;
  duration?: InputMaybe<Order_By>;
  equipmentRequired?: InputMaybe<Order_By>;
  extraComment?: InputMaybe<Order_By>;
  format?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  institutionLogo?: InputMaybe<Order_By>;
  institutionName?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
  researchSubject?: InputMaybe<Order_By>;
  roomRequirements?: InputMaybe<Order_By>;
  subjectComment?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ScientistOffer_Min_Fields = {
  __typename?: 'ScientistOffer_min_fields';
  classPreparation?: Maybe<Scalars['String']['output']>;
  contactEmail?: Maybe<Scalars['String']['output']>;
  contactName?: Maybe<Scalars['String']['output']>;
  contactPhone?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['String']['output']>;
  equipmentRequired?: Maybe<Scalars['String']['output']>;
  extraComment?: Maybe<Scalars['String']['output']>;
  format?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  institutionLogo?: Maybe<Scalars['String']['output']>;
  institutionName?: Maybe<Scalars['String']['output']>;
  maxDeployments?: Maybe<Scalars['Int']['output']>;
  maximumGrade?: Maybe<Scalars['Int']['output']>;
  minimumGrade?: Maybe<Scalars['Int']['output']>;
  programId?: Maybe<Scalars['Int']['output']>;
  researchSubject?: Maybe<Scalars['String']['output']>;
  roomRequirements?: Maybe<Scalars['String']['output']>;
  subjectComment?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Min_Order_By = {
  classPreparation?: InputMaybe<Order_By>;
  contactEmail?: InputMaybe<Order_By>;
  contactName?: InputMaybe<Order_By>;
  contactPhone?: InputMaybe<Order_By>;
  description?: InputMaybe<Order_By>;
  duration?: InputMaybe<Order_By>;
  equipmentRequired?: InputMaybe<Order_By>;
  extraComment?: InputMaybe<Order_By>;
  format?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  institutionLogo?: InputMaybe<Order_By>;
  institutionName?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
  researchSubject?: InputMaybe<Order_By>;
  roomRequirements?: InputMaybe<Order_By>;
  subjectComment?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Mutation_Response = {
  __typename?: 'ScientistOffer_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ScientistOffer>;
};

/** input type for inserting object relation for remote table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Obj_Rel_Insert_Input = {
  data: ScientistOffer_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<ScientistOffer_On_Conflict>;
};

/** on_conflict condition type for table "rentAScientist.ScientistOffer" */
export type ScientistOffer_On_Conflict = {
  constraint: ScientistOffer_Constraint;
  update_columns?: Array<ScientistOffer_Update_Column>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.ScientistOffer". */
export type ScientistOffer_Order_By = {
  Program?: InputMaybe<Program_Order_By>;
  SchoolClassRequests_aggregate?: InputMaybe<SchoolClassRequest_Aggregate_Order_By>;
  ScientistOfferRelations_aggregate?: InputMaybe<ScientistOfferRelation_Aggregate_Order_By>;
  categories?: InputMaybe<Order_By>;
  classPreparation?: InputMaybe<Order_By>;
  contactEmail?: InputMaybe<Order_By>;
  contactName?: InputMaybe<Order_By>;
  contactPhone?: InputMaybe<Order_By>;
  description?: InputMaybe<Order_By>;
  duration?: InputMaybe<Order_By>;
  equipmentRequired?: InputMaybe<Order_By>;
  extraComment?: InputMaybe<Order_By>;
  format?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  institutionLogo?: InputMaybe<Order_By>;
  institutionName?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  possibleDays?: InputMaybe<Order_By>;
  possibleLocations?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
  researchSubject?: InputMaybe<Order_By>;
  roomRequirements?: InputMaybe<Order_By>;
  subjectComment?: InputMaybe<Order_By>;
  timeWindow?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.ScientistOffer */
export type ScientistOffer_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "rentAScientist.ScientistOffer" */
export enum ScientistOffer_Select_Column {
  /** column name */
  Categories = 'categories',
  /** column name */
  ClassPreparation = 'classPreparation',
  /** column name */
  ContactEmail = 'contactEmail',
  /** column name */
  ContactName = 'contactName',
  /** column name */
  ContactPhone = 'contactPhone',
  /** column name */
  Description = 'description',
  /** column name */
  Duration = 'duration',
  /** column name */
  EquipmentRequired = 'equipmentRequired',
  /** column name */
  ExtraComment = 'extraComment',
  /** column name */
  Format = 'format',
  /** column name */
  Id = 'id',
  /** column name */
  InstitutionLogo = 'institutionLogo',
  /** column name */
  InstitutionName = 'institutionName',
  /** column name */
  MaxDeployments = 'maxDeployments',
  /** column name */
  MaximumGrade = 'maximumGrade',
  /** column name */
  MinimumGrade = 'minimumGrade',
  /** column name */
  PossibleDays = 'possibleDays',
  /** column name */
  PossibleLocations = 'possibleLocations',
  /** column name */
  ProgramId = 'programId',
  /** column name */
  ResearchSubject = 'researchSubject',
  /** column name */
  RoomRequirements = 'roomRequirements',
  /** column name */
  SubjectComment = 'subjectComment',
  /** column name */
  TimeWindow = 'timeWindow',
  /** column name */
  Title = 'title'
}

/** input type for updating data in table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Set_Input = {
  categories?: InputMaybe<Scalars['_text']['input']>;
  classPreparation?: InputMaybe<Scalars['String']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  contactName?: InputMaybe<Scalars['String']['input']>;
  contactPhone?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  equipmentRequired?: InputMaybe<Scalars['String']['input']>;
  extraComment?: InputMaybe<Scalars['String']['input']>;
  format?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  institutionLogo?: InputMaybe<Scalars['String']['input']>;
  institutionName?: InputMaybe<Scalars['String']['input']>;
  maxDeployments?: InputMaybe<Scalars['Int']['input']>;
  maximumGrade?: InputMaybe<Scalars['Int']['input']>;
  minimumGrade?: InputMaybe<Scalars['Int']['input']>;
  possibleDays?: InputMaybe<Scalars['_int4']['input']>;
  possibleLocations?: InputMaybe<Scalars['_text']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
  researchSubject?: InputMaybe<Scalars['String']['input']>;
  roomRequirements?: InputMaybe<Scalars['String']['input']>;
  subjectComment?: InputMaybe<Scalars['String']['input']>;
  timeWindow?: InputMaybe<Scalars['_text']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate stddev on columns */
export type ScientistOffer_Stddev_Fields = {
  __typename?: 'ScientistOffer_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
  maxDeployments?: Maybe<Scalars['Float']['output']>;
  maximumGrade?: Maybe<Scalars['Float']['output']>;
  minimumGrade?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ScientistOffer_Stddev_Pop_Fields = {
  __typename?: 'ScientistOffer_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  maxDeployments?: Maybe<Scalars['Float']['output']>;
  maximumGrade?: Maybe<Scalars['Float']['output']>;
  minimumGrade?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ScientistOffer_Stddev_Samp_Fields = {
  __typename?: 'ScientistOffer_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  maxDeployments?: Maybe<Scalars['Float']['output']>;
  maximumGrade?: Maybe<Scalars['Float']['output']>;
  minimumGrade?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "ScientistOffer" */
export type ScientistOffer_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ScientistOffer_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ScientistOffer_Stream_Cursor_Value_Input = {
  categories?: InputMaybe<Scalars['_text']['input']>;
  classPreparation?: InputMaybe<Scalars['String']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  contactName?: InputMaybe<Scalars['String']['input']>;
  contactPhone?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  equipmentRequired?: InputMaybe<Scalars['String']['input']>;
  extraComment?: InputMaybe<Scalars['String']['input']>;
  format?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  institutionLogo?: InputMaybe<Scalars['String']['input']>;
  institutionName?: InputMaybe<Scalars['String']['input']>;
  maxDeployments?: InputMaybe<Scalars['Int']['input']>;
  maximumGrade?: InputMaybe<Scalars['Int']['input']>;
  minimumGrade?: InputMaybe<Scalars['Int']['input']>;
  possibleDays?: InputMaybe<Scalars['_int4']['input']>;
  possibleLocations?: InputMaybe<Scalars['_text']['input']>;
  programId?: InputMaybe<Scalars['Int']['input']>;
  researchSubject?: InputMaybe<Scalars['String']['input']>;
  roomRequirements?: InputMaybe<Scalars['String']['input']>;
  subjectComment?: InputMaybe<Scalars['String']['input']>;
  timeWindow?: InputMaybe<Scalars['_text']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate sum on columns */
export type ScientistOffer_Sum_Fields = {
  __typename?: 'ScientistOffer_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
  maxDeployments?: Maybe<Scalars['Int']['output']>;
  maximumGrade?: Maybe<Scalars['Int']['output']>;
  minimumGrade?: Maybe<Scalars['Int']['output']>;
  programId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** update columns of table "rentAScientist.ScientistOffer" */
export enum ScientistOffer_Update_Column {
  /** column name */
  Categories = 'categories',
  /** column name */
  ClassPreparation = 'classPreparation',
  /** column name */
  ContactEmail = 'contactEmail',
  /** column name */
  ContactName = 'contactName',
  /** column name */
  ContactPhone = 'contactPhone',
  /** column name */
  Description = 'description',
  /** column name */
  Duration = 'duration',
  /** column name */
  EquipmentRequired = 'equipmentRequired',
  /** column name */
  ExtraComment = 'extraComment',
  /** column name */
  Format = 'format',
  /** column name */
  Id = 'id',
  /** column name */
  InstitutionLogo = 'institutionLogo',
  /** column name */
  InstitutionName = 'institutionName',
  /** column name */
  MaxDeployments = 'maxDeployments',
  /** column name */
  MaximumGrade = 'maximumGrade',
  /** column name */
  MinimumGrade = 'minimumGrade',
  /** column name */
  PossibleDays = 'possibleDays',
  /** column name */
  PossibleLocations = 'possibleLocations',
  /** column name */
  ProgramId = 'programId',
  /** column name */
  ResearchSubject = 'researchSubject',
  /** column name */
  RoomRequirements = 'roomRequirements',
  /** column name */
  SubjectComment = 'subjectComment',
  /** column name */
  TimeWindow = 'timeWindow',
  /** column name */
  Title = 'title'
}

export type ScientistOffer_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<ScientistOffer_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ScientistOffer_Set_Input>;
  /** filter the rows which have to be updated */
  where: ScientistOffer_Bool_Exp;
};

/** aggregate var_pop on columns */
export type ScientistOffer_Var_Pop_Fields = {
  __typename?: 'ScientistOffer_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
  maxDeployments?: Maybe<Scalars['Float']['output']>;
  maximumGrade?: Maybe<Scalars['Float']['output']>;
  minimumGrade?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ScientistOffer_Var_Samp_Fields = {
  __typename?: 'ScientistOffer_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
  maxDeployments?: Maybe<Scalars['Float']['output']>;
  maximumGrade?: Maybe<Scalars['Float']['output']>;
  minimumGrade?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type ScientistOffer_Variance_Fields = {
  __typename?: 'ScientistOffer_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
  maxDeployments?: Maybe<Scalars['Float']['output']>;
  maximumGrade?: Maybe<Scalars['Float']['output']>;
  minimumGrade?: Maybe<Scalars['Float']['output']>;
  programId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "rentAScientist.ScientistOffer" */
export type ScientistOffer_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  maxDeployments?: InputMaybe<Order_By>;
  maximumGrade?: InputMaybe<Order_By>;
  minimumGrade?: InputMaybe<Order_By>;
  programId?: InputMaybe<Order_By>;
};

/** aggregated selection of "rentAScientist.Scientist" */
export type Scientist_Aggregate = {
  __typename?: 'Scientist_aggregate';
  aggregate?: Maybe<Scientist_Aggregate_Fields>;
  nodes: Array<Scientist>;
};

/** aggregate fields of "rentAScientist.Scientist" */
export type Scientist_Aggregate_Fields = {
  __typename?: 'Scientist_aggregate_fields';
  avg?: Maybe<Scientist_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Scientist_Max_Fields>;
  min?: Maybe<Scientist_Min_Fields>;
  stddev?: Maybe<Scientist_Stddev_Fields>;
  stddev_pop?: Maybe<Scientist_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Scientist_Stddev_Samp_Fields>;
  sum?: Maybe<Scientist_Sum_Fields>;
  var_pop?: Maybe<Scientist_Var_Pop_Fields>;
  var_samp?: Maybe<Scientist_Var_Samp_Fields>;
  variance?: Maybe<Scientist_Variance_Fields>;
};


/** aggregate fields of "rentAScientist.Scientist" */
export type Scientist_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Scientist_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type Scientist_Avg_Fields = {
  __typename?: 'Scientist_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "rentAScientist.Scientist". All fields are combined with a logical 'AND'. */
export type Scientist_Bool_Exp = {
  ScientistOfferRelations?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
  ScientistOfferRelations_aggregate?: InputMaybe<ScientistOfferRelation_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<Scientist_Bool_Exp>>;
  _not?: InputMaybe<Scientist_Bool_Exp>;
  _or?: InputMaybe<Array<Scientist_Bool_Exp>>;
  forename?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  image?: InputMaybe<String_Comparison_Exp>;
  surname?: InputMaybe<String_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.Scientist" */
export enum Scientist_Constraint {
  /** unique or primary key constraint on columns "id" */
  ScientistPkey = 'Scientist_pkey'
}

/** input type for incrementing numeric columns in table "rentAScientist.Scientist" */
export type Scientist_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "rentAScientist.Scientist" */
export type Scientist_Insert_Input = {
  ScientistOfferRelations?: InputMaybe<ScientistOfferRelation_Arr_Rel_Insert_Input>;
  forename?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  surname?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Scientist_Max_Fields = {
  __typename?: 'Scientist_max_fields';
  forename?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  surname?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Scientist_Min_Fields = {
  __typename?: 'Scientist_min_fields';
  forename?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  surname?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "rentAScientist.Scientist" */
export type Scientist_Mutation_Response = {
  __typename?: 'Scientist_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Scientist>;
};

/** input type for inserting object relation for remote table "rentAScientist.Scientist" */
export type Scientist_Obj_Rel_Insert_Input = {
  data: Scientist_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Scientist_On_Conflict>;
};

/** on_conflict condition type for table "rentAScientist.Scientist" */
export type Scientist_On_Conflict = {
  constraint: Scientist_Constraint;
  update_columns?: Array<Scientist_Update_Column>;
  where?: InputMaybe<Scientist_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.Scientist". */
export type Scientist_Order_By = {
  ScientistOfferRelations_aggregate?: InputMaybe<ScientistOfferRelation_Aggregate_Order_By>;
  forename?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  image?: InputMaybe<Order_By>;
  surname?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.Scientist */
export type Scientist_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "rentAScientist.Scientist" */
export enum Scientist_Select_Column {
  /** column name */
  Forename = 'forename',
  /** column name */
  Id = 'id',
  /** column name */
  Image = 'image',
  /** column name */
  Surname = 'surname',
  /** column name */
  Title = 'title'
}

/** input type for updating data in table "rentAScientist.Scientist" */
export type Scientist_Set_Input = {
  forename?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  surname?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate stddev on columns */
export type Scientist_Stddev_Fields = {
  __typename?: 'Scientist_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type Scientist_Stddev_Pop_Fields = {
  __typename?: 'Scientist_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type Scientist_Stddev_Samp_Fields = {
  __typename?: 'Scientist_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "Scientist" */
export type Scientist_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Scientist_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Scientist_Stream_Cursor_Value_Input = {
  forename?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  surname?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate sum on columns */
export type Scientist_Sum_Fields = {
  __typename?: 'Scientist_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
};

/** update columns of table "rentAScientist.Scientist" */
export enum Scientist_Update_Column {
  /** column name */
  Forename = 'forename',
  /** column name */
  Id = 'id',
  /** column name */
  Image = 'image',
  /** column name */
  Surname = 'surname',
  /** column name */
  Title = 'title'
}

export type Scientist_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Scientist_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Scientist_Set_Input>;
  /** filter the rows which have to be updated */
  where: Scientist_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Scientist_Var_Pop_Fields = {
  __typename?: 'Scientist_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type Scientist_Var_Samp_Fields = {
  __typename?: 'Scientist_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type Scientist_Variance_Fields = {
  __typename?: 'Scientist_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Includes all information about the individual sessions in a course. */
export type Session = {
  __typename?: 'Session';
  /** An array relationship */
  Attendances: Array<Attendance>;
  /** An aggregate relationship */
  Attendances_aggregate: Attendance_Aggregate;
  /** An object relationship */
  Course: Course;
  /** An array relationship */
  SessionAddresses: Array<SessionAddress>;
  /** An aggregate relationship */
  SessionAddresses_aggregate: SessionAddress_Aggregate;
  /** An array relationship */
  SessionSpeakers: Array<SessionSpeaker>;
  /** An aggregate relationship */
  SessionSpeakers_aggregate: SessionSpeaker_Aggregate;
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: Maybe<Scalars['String']['output']>;
  /** The ID of the course the session belongs to */
  courseId: Scalars['Int']['output'];
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** A description of the session */
  description: Scalars['String']['output'];
  /** The day and time of the end of the session */
  endDateTime: Scalars['timestamptz']['output'];
  id: Scalars['Int']['output'];
  /** indicates whether a questionaire has been sent out yet. will also be true if it was determined that no questionaire should be send out due to session speaker is course instructor restriction */
  questionaire_sent: Scalars['Boolean']['output'];
  /** The day and time of the start of the session */
  startDateTime: Scalars['timestamptz']['output'];
  /** The title of the session */
  title: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};


/** Includes all information about the individual sessions in a course. */
export type SessionAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** Includes all information about the individual sessions in a course. */
export type SessionAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** Includes all information about the individual sessions in a course. */
export type SessionSessionAddressesArgs = {
  distinct_on?: InputMaybe<Array<SessionAddress_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionAddress_Order_By>>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};


/** Includes all information about the individual sessions in a course. */
export type SessionSessionAddresses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SessionAddress_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionAddress_Order_By>>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};


/** Includes all information about the individual sessions in a course. */
export type SessionSessionSpeakersArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};


/** Includes all information about the individual sessions in a course. */
export type SessionSessionSpeakers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};

/** One or several addresses for a session. When a new course is added all sessions will initially get the default address(es) provided in the course table. */
export type SessionAddress = {
  __typename?: 'SessionAddress';
  /** An object relationship */
  CourseLocation?: Maybe<CourseLocation>;
  /** An object relationship */
  Session: Session;
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address: Scalars['String']['output'];
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Int']['output']>;
  created_at: Scalars['timestamptz']['output'];
  id: Scalars['Int']['output'];
  /** The ID of the session for which the address is provided. */
  sessionId: Scalars['Int']['output'];
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "SessionAddress" */
export type SessionAddress_Aggregate = {
  __typename?: 'SessionAddress_aggregate';
  aggregate?: Maybe<SessionAddress_Aggregate_Fields>;
  nodes: Array<SessionAddress>;
};

export type SessionAddress_Aggregate_Bool_Exp = {
  count?: InputMaybe<SessionAddress_Aggregate_Bool_Exp_Count>;
};

export type SessionAddress_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<SessionAddress_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<SessionAddress_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "SessionAddress" */
export type SessionAddress_Aggregate_Fields = {
  __typename?: 'SessionAddress_aggregate_fields';
  avg?: Maybe<SessionAddress_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<SessionAddress_Max_Fields>;
  min?: Maybe<SessionAddress_Min_Fields>;
  stddev?: Maybe<SessionAddress_Stddev_Fields>;
  stddev_pop?: Maybe<SessionAddress_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<SessionAddress_Stddev_Samp_Fields>;
  sum?: Maybe<SessionAddress_Sum_Fields>;
  var_pop?: Maybe<SessionAddress_Var_Pop_Fields>;
  var_samp?: Maybe<SessionAddress_Var_Samp_Fields>;
  variance?: Maybe<SessionAddress_Variance_Fields>;
};


/** aggregate fields of "SessionAddress" */
export type SessionAddress_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<SessionAddress_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "SessionAddress" */
export type SessionAddress_Aggregate_Order_By = {
  avg?: InputMaybe<SessionAddress_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<SessionAddress_Max_Order_By>;
  min?: InputMaybe<SessionAddress_Min_Order_By>;
  stddev?: InputMaybe<SessionAddress_Stddev_Order_By>;
  stddev_pop?: InputMaybe<SessionAddress_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<SessionAddress_Stddev_Samp_Order_By>;
  sum?: InputMaybe<SessionAddress_Sum_Order_By>;
  var_pop?: InputMaybe<SessionAddress_Var_Pop_Order_By>;
  var_samp?: InputMaybe<SessionAddress_Var_Samp_Order_By>;
  variance?: InputMaybe<SessionAddress_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "SessionAddress" */
export type SessionAddress_Arr_Rel_Insert_Input = {
  data: Array<SessionAddress_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<SessionAddress_On_Conflict>;
};

/** aggregate avg on columns */
export type SessionAddress_Avg_Fields = {
  __typename?: 'SessionAddress_avg_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "SessionAddress" */
export type SessionAddress_Avg_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "SessionAddress". All fields are combined with a logical 'AND'. */
export type SessionAddress_Bool_Exp = {
  CourseLocation?: InputMaybe<CourseLocation_Bool_Exp>;
  Session?: InputMaybe<Session_Bool_Exp>;
  _and?: InputMaybe<Array<SessionAddress_Bool_Exp>>;
  _not?: InputMaybe<SessionAddress_Bool_Exp>;
  _or?: InputMaybe<Array<SessionAddress_Bool_Exp>>;
  address?: InputMaybe<String_Comparison_Exp>;
  courseLocationId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  sessionId?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "SessionAddress" */
export enum SessionAddress_Constraint {
  /** unique or primary key constraint on columns "id" */
  SessionAddressPkey = 'SessionAddress_pkey'
}

/** input type for incrementing numeric columns in table "SessionAddress" */
export type SessionAddress_Inc_Input = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "SessionAddress" */
export type SessionAddress_Insert_Input = {
  CourseLocation?: InputMaybe<CourseLocation_Obj_Rel_Insert_Input>;
  Session?: InputMaybe<Session_Obj_Rel_Insert_Input>;
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address?: InputMaybe<Scalars['String']['input']>;
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type SessionAddress_Max_Fields = {
  __typename?: 'SessionAddress_max_fields';
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address?: Maybe<Scalars['String']['output']>;
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "SessionAddress" */
export type SessionAddress_Max_Order_By = {
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address?: InputMaybe<Order_By>;
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type SessionAddress_Min_Fields = {
  __typename?: 'SessionAddress_min_fields';
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address?: Maybe<Scalars['String']['output']>;
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "SessionAddress" */
export type SessionAddress_Min_Order_By = {
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address?: InputMaybe<Order_By>;
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "SessionAddress" */
export type SessionAddress_Mutation_Response = {
  __typename?: 'SessionAddress_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<SessionAddress>;
};

/** on_conflict condition type for table "SessionAddress" */
export type SessionAddress_On_Conflict = {
  constraint: SessionAddress_Constraint;
  update_columns?: Array<SessionAddress_Update_Column>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};

/** Ordering options when selecting data from "SessionAddress". */
export type SessionAddress_Order_By = {
  CourseLocation?: InputMaybe<CourseLocation_Order_By>;
  Session?: InputMaybe<Session_Order_By>;
  address?: InputMaybe<Order_By>;
  courseLocationId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  sessionId?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: SessionAddress */
export type SessionAddress_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "SessionAddress" */
export enum SessionAddress_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  CourseLocationId = 'courseLocationId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  SessionId = 'sessionId',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "SessionAddress" */
export type SessionAddress_Set_Input = {
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address?: InputMaybe<Scalars['String']['input']>;
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type SessionAddress_Stddev_Fields = {
  __typename?: 'SessionAddress_stddev_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "SessionAddress" */
export type SessionAddress_Stddev_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type SessionAddress_Stddev_Pop_Fields = {
  __typename?: 'SessionAddress_stddev_pop_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "SessionAddress" */
export type SessionAddress_Stddev_Pop_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type SessionAddress_Stddev_Samp_Fields = {
  __typename?: 'SessionAddress_stddev_samp_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "SessionAddress" */
export type SessionAddress_Stddev_Samp_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "SessionAddress" */
export type SessionAddress_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: SessionAddress_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type SessionAddress_Stream_Cursor_Value_Input = {
  /** Where the session will take place; might be an offline or online location which is provided according to the provided type */
  address?: InputMaybe<Scalars['String']['input']>;
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type SessionAddress_Sum_Fields = {
  __typename?: 'SessionAddress_sum_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "SessionAddress" */
export type SessionAddress_Sum_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** update columns of table "SessionAddress" */
export enum SessionAddress_Update_Column {
  /** column name */
  Address = 'address',
  /** column name */
  CourseLocationId = 'courseLocationId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  SessionId = 'sessionId',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type SessionAddress_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<SessionAddress_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<SessionAddress_Set_Input>;
  /** filter the rows which have to be updated */
  where: SessionAddress_Bool_Exp;
};

/** aggregate var_pop on columns */
export type SessionAddress_Var_Pop_Fields = {
  __typename?: 'SessionAddress_var_pop_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "SessionAddress" */
export type SessionAddress_Var_Pop_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type SessionAddress_Var_Samp_Fields = {
  __typename?: 'SessionAddress_var_samp_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "SessionAddress" */
export type SessionAddress_Var_Samp_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type SessionAddress_Variance_Fields = {
  __typename?: 'SessionAddress_variance_fields';
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** The ID of the session for which the address is provided. */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "SessionAddress" */
export type SessionAddress_Variance_Order_By = {
  /** Provide the id of the course location the address is referring to If the address is part of a course itThe id of a course. */
  courseLocationId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The ID of the session for which the address is provided. */
  sessionId?: InputMaybe<Order_By>;
};

/** A new session speaker is added as soon as an instructor selects an expert (or a user - which is then added to the expert table) as a speaker for a session. */
export type SessionSpeaker = {
  __typename?: 'SessionSpeaker';
  /** An object relationship */
  Expert: Expert;
  /** An object relationship */
  Session: Session;
  created_at: Scalars['timestamptz']['output'];
  /** ID of the expert, who is speaker for the given session */
  expertId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  /** ID of the session which has the given expert as a speaker */
  sessionId: Scalars['Int']['output'];
  updated_at: Scalars['timestamptz']['output'];
};

/** aggregated selection of "SessionSpeaker" */
export type SessionSpeaker_Aggregate = {
  __typename?: 'SessionSpeaker_aggregate';
  aggregate?: Maybe<SessionSpeaker_Aggregate_Fields>;
  nodes: Array<SessionSpeaker>;
};

export type SessionSpeaker_Aggregate_Bool_Exp = {
  count?: InputMaybe<SessionSpeaker_Aggregate_Bool_Exp_Count>;
};

export type SessionSpeaker_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<SessionSpeaker_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "SessionSpeaker" */
export type SessionSpeaker_Aggregate_Fields = {
  __typename?: 'SessionSpeaker_aggregate_fields';
  avg?: Maybe<SessionSpeaker_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<SessionSpeaker_Max_Fields>;
  min?: Maybe<SessionSpeaker_Min_Fields>;
  stddev?: Maybe<SessionSpeaker_Stddev_Fields>;
  stddev_pop?: Maybe<SessionSpeaker_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<SessionSpeaker_Stddev_Samp_Fields>;
  sum?: Maybe<SessionSpeaker_Sum_Fields>;
  var_pop?: Maybe<SessionSpeaker_Var_Pop_Fields>;
  var_samp?: Maybe<SessionSpeaker_Var_Samp_Fields>;
  variance?: Maybe<SessionSpeaker_Variance_Fields>;
};


/** aggregate fields of "SessionSpeaker" */
export type SessionSpeaker_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "SessionSpeaker" */
export type SessionSpeaker_Aggregate_Order_By = {
  avg?: InputMaybe<SessionSpeaker_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<SessionSpeaker_Max_Order_By>;
  min?: InputMaybe<SessionSpeaker_Min_Order_By>;
  stddev?: InputMaybe<SessionSpeaker_Stddev_Order_By>;
  stddev_pop?: InputMaybe<SessionSpeaker_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<SessionSpeaker_Stddev_Samp_Order_By>;
  sum?: InputMaybe<SessionSpeaker_Sum_Order_By>;
  var_pop?: InputMaybe<SessionSpeaker_Var_Pop_Order_By>;
  var_samp?: InputMaybe<SessionSpeaker_Var_Samp_Order_By>;
  variance?: InputMaybe<SessionSpeaker_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "SessionSpeaker" */
export type SessionSpeaker_Arr_Rel_Insert_Input = {
  data: Array<SessionSpeaker_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<SessionSpeaker_On_Conflict>;
};

/** aggregate avg on columns */
export type SessionSpeaker_Avg_Fields = {
  __typename?: 'SessionSpeaker_avg_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Avg_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "SessionSpeaker". All fields are combined with a logical 'AND'. */
export type SessionSpeaker_Bool_Exp = {
  Expert?: InputMaybe<Expert_Bool_Exp>;
  Session?: InputMaybe<Session_Bool_Exp>;
  _and?: InputMaybe<Array<SessionSpeaker_Bool_Exp>>;
  _not?: InputMaybe<SessionSpeaker_Bool_Exp>;
  _or?: InputMaybe<Array<SessionSpeaker_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  expertId?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  sessionId?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "SessionSpeaker" */
export enum SessionSpeaker_Constraint {
  /** unique or primary key constraint on columns "id" */
  SessionSpeakerPkey = 'SessionSpeaker_pkey'
}

/** input type for incrementing numeric columns in table "SessionSpeaker" */
export type SessionSpeaker_Inc_Input = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "SessionSpeaker" */
export type SessionSpeaker_Insert_Input = {
  Expert?: InputMaybe<Expert_Obj_Rel_Insert_Input>;
  Session?: InputMaybe<Session_Obj_Rel_Insert_Input>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type SessionSpeaker_Max_Fields = {
  __typename?: 'SessionSpeaker_max_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Max_Order_By = {
  created_at?: InputMaybe<Order_By>;
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type SessionSpeaker_Min_Fields = {
  __typename?: 'SessionSpeaker_min_fields';
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Min_Order_By = {
  created_at?: InputMaybe<Order_By>;
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "SessionSpeaker" */
export type SessionSpeaker_Mutation_Response = {
  __typename?: 'SessionSpeaker_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<SessionSpeaker>;
};

/** on_conflict condition type for table "SessionSpeaker" */
export type SessionSpeaker_On_Conflict = {
  constraint: SessionSpeaker_Constraint;
  update_columns?: Array<SessionSpeaker_Update_Column>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};

/** Ordering options when selecting data from "SessionSpeaker". */
export type SessionSpeaker_Order_By = {
  Expert?: InputMaybe<Expert_Order_By>;
  Session?: InputMaybe<Session_Order_By>;
  created_at?: InputMaybe<Order_By>;
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  sessionId?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: SessionSpeaker */
export type SessionSpeaker_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "SessionSpeaker" */
export enum SessionSpeaker_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpertId = 'expertId',
  /** column name */
  Id = 'id',
  /** column name */
  SessionId = 'sessionId',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "SessionSpeaker" */
export type SessionSpeaker_Set_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type SessionSpeaker_Stddev_Fields = {
  __typename?: 'SessionSpeaker_stddev_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Stddev_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type SessionSpeaker_Stddev_Pop_Fields = {
  __typename?: 'SessionSpeaker_stddev_pop_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Stddev_Pop_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type SessionSpeaker_Stddev_Samp_Fields = {
  __typename?: 'SessionSpeaker_stddev_samp_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Stddev_Samp_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "SessionSpeaker" */
export type SessionSpeaker_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: SessionSpeaker_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type SessionSpeaker_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Scalars['Int']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type SessionSpeaker_Sum_Fields = {
  __typename?: 'SessionSpeaker_sum_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Sum_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** update columns of table "SessionSpeaker" */
export enum SessionSpeaker_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  ExpertId = 'expertId',
  /** column name */
  Id = 'id',
  /** column name */
  SessionId = 'sessionId',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type SessionSpeaker_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<SessionSpeaker_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<SessionSpeaker_Set_Input>;
  /** filter the rows which have to be updated */
  where: SessionSpeaker_Bool_Exp;
};

/** aggregate var_pop on columns */
export type SessionSpeaker_Var_Pop_Fields = {
  __typename?: 'SessionSpeaker_var_pop_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Var_Pop_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type SessionSpeaker_Var_Samp_Fields = {
  __typename?: 'SessionSpeaker_var_samp_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Var_Samp_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type SessionSpeaker_Variance_Fields = {
  __typename?: 'SessionSpeaker_variance_fields';
  /** ID of the expert, who is speaker for the given session */
  expertId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "SessionSpeaker" */
export type SessionSpeaker_Variance_Order_By = {
  /** ID of the expert, who is speaker for the given session */
  expertId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** ID of the session which has the given expert as a speaker */
  sessionId?: InputMaybe<Order_By>;
};

/** aggregated selection of "Session" */
export type Session_Aggregate = {
  __typename?: 'Session_aggregate';
  aggregate?: Maybe<Session_Aggregate_Fields>;
  nodes: Array<Session>;
};

export type Session_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Session_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Session_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Session_Aggregate_Bool_Exp_Count>;
};

export type Session_Aggregate_Bool_Exp_Bool_And = {
  arguments: Session_Select_Column_Session_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Session_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Session_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Session_Select_Column_Session_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Session_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Session_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Session_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Session_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "Session" */
export type Session_Aggregate_Fields = {
  __typename?: 'Session_aggregate_fields';
  avg?: Maybe<Session_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Session_Max_Fields>;
  min?: Maybe<Session_Min_Fields>;
  stddev?: Maybe<Session_Stddev_Fields>;
  stddev_pop?: Maybe<Session_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Session_Stddev_Samp_Fields>;
  sum?: Maybe<Session_Sum_Fields>;
  var_pop?: Maybe<Session_Var_Pop_Fields>;
  var_samp?: Maybe<Session_Var_Samp_Fields>;
  variance?: Maybe<Session_Variance_Fields>;
};


/** aggregate fields of "Session" */
export type Session_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Session_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "Session" */
export type Session_Aggregate_Order_By = {
  avg?: InputMaybe<Session_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Session_Max_Order_By>;
  min?: InputMaybe<Session_Min_Order_By>;
  stddev?: InputMaybe<Session_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Session_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Session_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Session_Sum_Order_By>;
  var_pop?: InputMaybe<Session_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Session_Var_Samp_Order_By>;
  variance?: InputMaybe<Session_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Session" */
export type Session_Arr_Rel_Insert_Input = {
  data: Array<Session_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Session_On_Conflict>;
};

/** aggregate avg on columns */
export type Session_Avg_Fields = {
  __typename?: 'Session_avg_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "Session" */
export type Session_Avg_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Session". All fields are combined with a logical 'AND'. */
export type Session_Bool_Exp = {
  Attendances?: InputMaybe<Attendance_Bool_Exp>;
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  Course?: InputMaybe<Course_Bool_Exp>;
  SessionAddresses?: InputMaybe<SessionAddress_Bool_Exp>;
  SessionAddresses_aggregate?: InputMaybe<SessionAddress_Aggregate_Bool_Exp>;
  SessionSpeakers?: InputMaybe<SessionSpeaker_Bool_Exp>;
  SessionSpeakers_aggregate?: InputMaybe<SessionSpeaker_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<Session_Bool_Exp>>;
  _not?: InputMaybe<Session_Bool_Exp>;
  _or?: InputMaybe<Array<Session_Bool_Exp>>;
  attendanceData?: InputMaybe<String_Comparison_Exp>;
  courseId?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  description?: InputMaybe<String_Comparison_Exp>;
  endDateTime?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  questionaire_sent?: InputMaybe<Boolean_Comparison_Exp>;
  startDateTime?: InputMaybe<Timestamptz_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "Session" */
export enum Session_Constraint {
  /** unique or primary key constraint on columns "id" */
  DatePkey = 'Date_pkey'
}

/** input type for incrementing numeric columns in table "Session" */
export type Session_Inc_Input = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "Session" */
export type Session_Insert_Input = {
  Attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  Course?: InputMaybe<Course_Obj_Rel_Insert_Input>;
  SessionAddresses?: InputMaybe<SessionAddress_Arr_Rel_Insert_Input>;
  SessionSpeakers?: InputMaybe<SessionSpeaker_Arr_Rel_Insert_Input>;
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** A description of the session */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The day and time of the end of the session */
  endDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** indicates whether a questionaire has been sent out yet. will also be true if it was determined that no questionaire should be send out due to session speaker is course instructor restriction */
  questionaire_sent?: InputMaybe<Scalars['Boolean']['input']>;
  /** The day and time of the start of the session */
  startDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The title of the session */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type Session_Max_Fields = {
  __typename?: 'Session_max_fields';
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: Maybe<Scalars['String']['output']>;
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** A description of the session */
  description?: Maybe<Scalars['String']['output']>;
  /** The day and time of the end of the session */
  endDateTime?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The day and time of the start of the session */
  startDateTime?: Maybe<Scalars['timestamptz']['output']>;
  /** The title of the session */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "Session" */
export type Session_Max_Order_By = {
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: InputMaybe<Order_By>;
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** A description of the session */
  description?: InputMaybe<Order_By>;
  /** The day and time of the end of the session */
  endDateTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The day and time of the start of the session */
  startDateTime?: InputMaybe<Order_By>;
  /** The title of the session */
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Session_Min_Fields = {
  __typename?: 'Session_min_fields';
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: Maybe<Scalars['String']['output']>;
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Int']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** A description of the session */
  description?: Maybe<Scalars['String']['output']>;
  /** The day and time of the end of the session */
  endDateTime?: Maybe<Scalars['timestamptz']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  /** The day and time of the start of the session */
  startDateTime?: Maybe<Scalars['timestamptz']['output']>;
  /** The title of the session */
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "Session" */
export type Session_Min_Order_By = {
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: InputMaybe<Order_By>;
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** A description of the session */
  description?: InputMaybe<Order_By>;
  /** The day and time of the end of the session */
  endDateTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  /** The day and time of the start of the session */
  startDateTime?: InputMaybe<Order_By>;
  /** The title of the session */
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "Session" */
export type Session_Mutation_Response = {
  __typename?: 'Session_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Session>;
};

/** input type for inserting object relation for remote table "Session" */
export type Session_Obj_Rel_Insert_Input = {
  data: Session_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Session_On_Conflict>;
};

/** on_conflict condition type for table "Session" */
export type Session_On_Conflict = {
  constraint: Session_Constraint;
  update_columns?: Array<Session_Update_Column>;
  where?: InputMaybe<Session_Bool_Exp>;
};

/** Ordering options when selecting data from "Session". */
export type Session_Order_By = {
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  Course?: InputMaybe<Course_Order_By>;
  SessionAddresses_aggregate?: InputMaybe<SessionAddress_Aggregate_Order_By>;
  SessionSpeakers_aggregate?: InputMaybe<SessionSpeaker_Aggregate_Order_By>;
  attendanceData?: InputMaybe<Order_By>;
  courseId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  description?: InputMaybe<Order_By>;
  endDateTime?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  questionaire_sent?: InputMaybe<Order_By>;
  startDateTime?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Session */
export type Session_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "Session" */
export enum Session_Select_Column {
  /** column name */
  AttendanceData = 'attendanceData',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  EndDateTime = 'endDateTime',
  /** column name */
  Id = 'id',
  /** column name */
  QuestionaireSent = 'questionaire_sent',
  /** column name */
  StartDateTime = 'startDateTime',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** select "Session_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Session" */
export enum Session_Select_Column_Session_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  QuestionaireSent = 'questionaire_sent'
}

/** select "Session_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Session" */
export enum Session_Select_Column_Session_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  QuestionaireSent = 'questionaire_sent'
}

/** input type for updating data in table "Session" */
export type Session_Set_Input = {
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** A description of the session */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The day and time of the end of the session */
  endDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** indicates whether a questionaire has been sent out yet. will also be true if it was determined that no questionaire should be send out due to session speaker is course instructor restriction */
  questionaire_sent?: InputMaybe<Scalars['Boolean']['input']>;
  /** The day and time of the start of the session */
  startDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The title of the session */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type Session_Stddev_Fields = {
  __typename?: 'Session_stddev_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "Session" */
export type Session_Stddev_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Session_Stddev_Pop_Fields = {
  __typename?: 'Session_stddev_pop_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "Session" */
export type Session_Stddev_Pop_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Session_Stddev_Samp_Fields = {
  __typename?: 'Session_stddev_samp_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "Session" */
export type Session_Stddev_Samp_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "Session" */
export type Session_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Session_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Session_Stream_Cursor_Value_Input = {
  /** JSON string including all recorded participations for the session (also those that were not matched to registered participants) */
  attendanceData?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Scalars['Int']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** A description of the session */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The day and time of the end of the session */
  endDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  /** indicates whether a questionaire has been sent out yet. will also be true if it was determined that no questionaire should be send out due to session speaker is course instructor restriction */
  questionaire_sent?: InputMaybe<Scalars['Boolean']['input']>;
  /** The day and time of the start of the session */
  startDateTime?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The title of the session */
  title?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type Session_Sum_Fields = {
  __typename?: 'Session_sum_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "Session" */
export type Session_Sum_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "Session" */
export enum Session_Update_Column {
  /** column name */
  AttendanceData = 'attendanceData',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  EndDateTime = 'endDateTime',
  /** column name */
  Id = 'id',
  /** column name */
  QuestionaireSent = 'questionaire_sent',
  /** column name */
  StartDateTime = 'startDateTime',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type Session_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Session_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Session_Set_Input>;
  /** filter the rows which have to be updated */
  where: Session_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Session_Var_Pop_Fields = {
  __typename?: 'Session_var_pop_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "Session" */
export type Session_Var_Pop_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Session_Var_Samp_Fields = {
  __typename?: 'Session_var_samp_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "Session" */
export type Session_Var_Samp_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Session_Variance_Fields = {
  __typename?: 'Session_variance_fields';
  /** The ID of the course the session belongs to */
  courseId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "Session" */
export type Session_Variance_Order_By = {
  /** The ID of the course the session belongs to */
  courseId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['String']['input']>;
  _gt?: InputMaybe<Scalars['String']['input']>;
  _gte?: InputMaybe<Scalars['String']['input']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: InputMaybe<Scalars['String']['input']>;
  _in?: InputMaybe<Array<Scalars['String']['input']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: InputMaybe<Scalars['String']['input']>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  /** does the column match the given pattern */
  _like?: InputMaybe<Scalars['String']['input']>;
  _lt?: InputMaybe<Scalars['String']['input']>;
  _lte?: InputMaybe<Scalars['String']['input']>;
  _neq?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: InputMaybe<Scalars['String']['input']>;
  _nin?: InputMaybe<Array<Scalars['String']['input']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given pattern */
  _nlike?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: InputMaybe<Scalars['String']['input']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: InputMaybe<Scalars['String']['input']>;
  /** does the column match the given SQL regular expression */
  _similar?: InputMaybe<Scalars['String']['input']>;
};

/** a teacher that has enrolled into rent-a-scientist */
export type Teacher = {
  __typename?: 'Teacher';
  /** An array relationship */
  SchoolClasses: Array<SchoolClass>;
  /** An aggregate relationship */
  SchoolClasses_aggregate: SchoolClass_Aggregate;
  /** An object relationship */
  User: User;
  id: Scalars['Int']['output'];
  userId: Scalars['uuid']['output'];
};


/** a teacher that has enrolled into rent-a-scientist */
export type TeacherSchoolClassesArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};


/** a teacher that has enrolled into rent-a-scientist */
export type TeacherSchoolClasses_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};

/** aggregated selection of "rentAScientist.Teacher" */
export type Teacher_Aggregate = {
  __typename?: 'Teacher_aggregate';
  aggregate?: Maybe<Teacher_Aggregate_Fields>;
  nodes: Array<Teacher>;
};

/** aggregate fields of "rentAScientist.Teacher" */
export type Teacher_Aggregate_Fields = {
  __typename?: 'Teacher_aggregate_fields';
  avg?: Maybe<Teacher_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Teacher_Max_Fields>;
  min?: Maybe<Teacher_Min_Fields>;
  stddev?: Maybe<Teacher_Stddev_Fields>;
  stddev_pop?: Maybe<Teacher_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Teacher_Stddev_Samp_Fields>;
  sum?: Maybe<Teacher_Sum_Fields>;
  var_pop?: Maybe<Teacher_Var_Pop_Fields>;
  var_samp?: Maybe<Teacher_Var_Samp_Fields>;
  variance?: Maybe<Teacher_Variance_Fields>;
};


/** aggregate fields of "rentAScientist.Teacher" */
export type Teacher_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Teacher_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type Teacher_Avg_Fields = {
  __typename?: 'Teacher_avg_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "rentAScientist.Teacher". All fields are combined with a logical 'AND'. */
export type Teacher_Bool_Exp = {
  SchoolClasses?: InputMaybe<SchoolClass_Bool_Exp>;
  SchoolClasses_aggregate?: InputMaybe<SchoolClass_Aggregate_Bool_Exp>;
  User?: InputMaybe<User_Bool_Exp>;
  _and?: InputMaybe<Array<Teacher_Bool_Exp>>;
  _not?: InputMaybe<Teacher_Bool_Exp>;
  _or?: InputMaybe<Array<Teacher_Bool_Exp>>;
  id?: InputMaybe<Int_Comparison_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "rentAScientist.Teacher" */
export enum Teacher_Constraint {
  /** unique or primary key constraint on columns "id" */
  TeacherPkey = 'Teacher_pkey',
  /** unique or primary key constraint on columns "userId" */
  TeacherUserIdKey = 'Teacher_userId_key'
}

/** input type for incrementing numeric columns in table "rentAScientist.Teacher" */
export type Teacher_Inc_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "rentAScientist.Teacher" */
export type Teacher_Insert_Input = {
  SchoolClasses?: InputMaybe<SchoolClass_Arr_Rel_Insert_Input>;
  User?: InputMaybe<User_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['Int']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Teacher_Max_Fields = {
  __typename?: 'Teacher_max_fields';
  id?: Maybe<Scalars['Int']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** aggregate min on columns */
export type Teacher_Min_Fields = {
  __typename?: 'Teacher_min_fields';
  id?: Maybe<Scalars['Int']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** response of any mutation on the table "rentAScientist.Teacher" */
export type Teacher_Mutation_Response = {
  __typename?: 'Teacher_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Teacher>;
};

/** input type for inserting object relation for remote table "rentAScientist.Teacher" */
export type Teacher_Obj_Rel_Insert_Input = {
  data: Teacher_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Teacher_On_Conflict>;
};

/** on_conflict condition type for table "rentAScientist.Teacher" */
export type Teacher_On_Conflict = {
  constraint: Teacher_Constraint;
  update_columns?: Array<Teacher_Update_Column>;
  where?: InputMaybe<Teacher_Bool_Exp>;
};

/** Ordering options when selecting data from "rentAScientist.Teacher". */
export type Teacher_Order_By = {
  SchoolClasses_aggregate?: InputMaybe<SchoolClass_Aggregate_Order_By>;
  User?: InputMaybe<User_Order_By>;
  id?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: rentAScientist.Teacher */
export type Teacher_Pk_Columns_Input = {
  id: Scalars['Int']['input'];
};

/** select columns of table "rentAScientist.Teacher" */
export enum Teacher_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "rentAScientist.Teacher" */
export type Teacher_Set_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate stddev on columns */
export type Teacher_Stddev_Fields = {
  __typename?: 'Teacher_stddev_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type Teacher_Stddev_Pop_Fields = {
  __typename?: 'Teacher_stddev_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type Teacher_Stddev_Samp_Fields = {
  __typename?: 'Teacher_stddev_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "Teacher" */
export type Teacher_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Teacher_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Teacher_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate sum on columns */
export type Teacher_Sum_Fields = {
  __typename?: 'Teacher_sum_fields';
  id?: Maybe<Scalars['Int']['output']>;
};

/** update columns of table "rentAScientist.Teacher" */
export enum Teacher_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  UserId = 'userId'
}

export type Teacher_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Teacher_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Teacher_Set_Input>;
  /** filter the rows which have to be updated */
  where: Teacher_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Teacher_Var_Pop_Fields = {
  __typename?: 'Teacher_var_pop_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type Teacher_Var_Samp_Fields = {
  __typename?: 'Teacher_var_samp_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type Teacher_Variance_Fields = {
  __typename?: 'Teacher_variance_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

/** Universities that are available in the dropdown list for the profile information */
export type University = {
  __typename?: 'University';
  /** An array relationship */
  Users: Array<User>;
  /** An aggregate relationship */
  Users_aggregate: User_Aggregate;
  comment: Scalars['String']['output'];
  value: Scalars['String']['output'];
};


/** Universities that are available in the dropdown list for the profile information */
export type UniversityUsersArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};


/** Universities that are available in the dropdown list for the profile information */
export type UniversityUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};

/** aggregated selection of "University" */
export type University_Aggregate = {
  __typename?: 'University_aggregate';
  aggregate?: Maybe<University_Aggregate_Fields>;
  nodes: Array<University>;
};

/** aggregate fields of "University" */
export type University_Aggregate_Fields = {
  __typename?: 'University_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<University_Max_Fields>;
  min?: Maybe<University_Min_Fields>;
};


/** aggregate fields of "University" */
export type University_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<University_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "University". All fields are combined with a logical 'AND'. */
export type University_Bool_Exp = {
  Users?: InputMaybe<User_Bool_Exp>;
  Users_aggregate?: InputMaybe<User_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<University_Bool_Exp>>;
  _not?: InputMaybe<University_Bool_Exp>;
  _or?: InputMaybe<Array<University_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "University" */
export enum University_Constraint {
  /** unique or primary key constraint on columns "value" */
  UniversityPkey = 'University_pkey'
}

export enum University_Enum {
  /** Christian-Albrechts-Universität zu Kiel */
  CauKiel = 'CAU_KIEL',
  /** Duale Hochschule Schleswig-Holstein */
  Dhsh = 'DHSH',
  /** Hochschule Flensburg */
  FhFlensburg = 'FH_FLENSBURG',
  /** Fachhochschule Kiel */
  FhKiel = 'FH_KIEL',
  /** Fachhochschule Westküste */
  FhWestkueste = 'FH_WESTKUESTE',
  /** Muthesius Kunsthochschule, Kiel */
  Muthesius = 'MUTHESIUS',
  /** A university not listed here */
  Other = 'OTHER',
  /** Technische Hochschule Lübeck */
  ThLuebeck = 'TH_LUEBECK',
  /** Europa-Universität Flensburg */
  UniFlensburg = 'UNI_FLENSBURG',
  /** Universität zu Lübeck */
  UniLuebeck = 'UNI_LUEBECK'
}

/** Boolean expression to compare columns of type "University_enum". All fields are combined with logical 'AND'. */
export type University_Enum_Comparison_Exp = {
  _eq?: InputMaybe<University_Enum>;
  _in?: InputMaybe<Array<University_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<University_Enum>;
  _nin?: InputMaybe<Array<University_Enum>>;
};

/** input type for inserting data into table "University" */
export type University_Insert_Input = {
  Users?: InputMaybe<User_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type University_Max_Fields = {
  __typename?: 'University_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type University_Min_Fields = {
  __typename?: 'University_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "University" */
export type University_Mutation_Response = {
  __typename?: 'University_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<University>;
};

/** input type for inserting object relation for remote table "University" */
export type University_Obj_Rel_Insert_Input = {
  data: University_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<University_On_Conflict>;
};

/** on_conflict condition type for table "University" */
export type University_On_Conflict = {
  constraint: University_Constraint;
  update_columns?: Array<University_Update_Column>;
  where?: InputMaybe<University_Bool_Exp>;
};

/** Ordering options when selecting data from "University". */
export type University_Order_By = {
  Users_aggregate?: InputMaybe<User_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: University */
export type University_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "University" */
export enum University_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "University" */
export type University_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "University" */
export type University_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: University_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type University_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "University" */
export enum University_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type University_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<University_Set_Input>;
  /** filter the rows which have to be updated */
  where: University_Bool_Exp;
};

/** columns and relationships of "User" */
export type User = {
  __typename?: 'User';
  /** An array relationship */
  AchievementOptionMentors: Array<AchievementOptionMentor>;
  /** An aggregate relationship */
  AchievementOptionMentors_aggregate: AchievementOptionMentor_Aggregate;
  /** An array relationship */
  AchievementRecordAuthors: Array<AchievementRecordAuthor>;
  /** An aggregate relationship */
  AchievementRecordAuthors_aggregate: AchievementRecordAuthor_Aggregate;
  /** An array relationship */
  Admins: Array<Admin>;
  /** An aggregate relationship */
  Admins_aggregate: Admin_Aggregate;
  /** An array relationship */
  Attendances: Array<Attendance>;
  /** An aggregate relationship */
  Attendances_aggregate: Attendance_Aggregate;
  /** An array relationship */
  CourseEnrollments: Array<CourseEnrollment>;
  /** An aggregate relationship */
  CourseEnrollments_aggregate: CourseEnrollment_Aggregate;
  /** An array relationship */
  Experts: Array<Expert>;
  /** An aggregate relationship */
  Experts_aggregate: Expert_Aggregate;
  /** An object relationship */
  UserStatus: UserStatus;
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The user's email address */
  email: Scalars['String']['output'];
  /** The user's current employment status */
  employment?: Maybe<Employment_Enum>;
  /** An object relationship */
  employmentByEmployment?: Maybe<Employment>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: Maybe<Scalars['String']['output']>;
  /** The user's first name */
  firstName: Scalars['String']['output'];
  id: Scalars['uuid']['output'];
  integerId?: Maybe<Scalars['Int']['output']>;
  /** The user's last name */
  lastName: Scalars['String']['output'];
  /** The user's matriculation number at her/his university */
  matriculationNumber?: Maybe<Scalars['String']['output']>;
  /** Inormation whether the user is registered for the newsletter or not. */
  newsletterRegistration?: Maybe<Scalars['Boolean']['output']>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: Maybe<Scalars['String']['output']>;
  /** The user's profile picture */
  picture?: Maybe<Scalars['String']['output']>;
  /** Current user status */
  status: UserStatus_Enum;
  /** The university the user is attending or workin at (only provided if he is a student or working in academia) */
  university?: Maybe<University_Enum>;
  /** An object relationship */
  universityByUniversity?: Maybe<University>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};


/** columns and relationships of "User" */
export type UserAchievementOptionMentorsArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserAchievementOptionMentors_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserAchievementRecordAuthorsArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserAchievementRecordAuthors_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserAdminsArgs = {
  distinct_on?: InputMaybe<Array<Admin_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Admin_Order_By>>;
  where?: InputMaybe<Admin_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserAdmins_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Admin_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Admin_Order_By>>;
  where?: InputMaybe<Admin_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserCourseEnrollmentsArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserCourseEnrollments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserExpertsArgs = {
  distinct_on?: InputMaybe<Array<Expert_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Expert_Order_By>>;
  where?: InputMaybe<Expert_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserExperts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Expert_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Expert_Order_By>>;
  where?: InputMaybe<Expert_Bool_Exp>;
};

/** Possible activity status of a user */
export type UserStatus = {
  __typename?: 'UserStatus';
  /** An array relationship */
  Users: Array<User>;
  /** An aggregate relationship */
  Users_aggregate: User_Aggregate;
  comment: Scalars['String']['output'];
  value: Scalars['String']['output'];
};


/** Possible activity status of a user */
export type UserStatusUsersArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};


/** Possible activity status of a user */
export type UserStatusUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};

/** aggregated selection of "UserStatus" */
export type UserStatus_Aggregate = {
  __typename?: 'UserStatus_aggregate';
  aggregate?: Maybe<UserStatus_Aggregate_Fields>;
  nodes: Array<UserStatus>;
};

/** aggregate fields of "UserStatus" */
export type UserStatus_Aggregate_Fields = {
  __typename?: 'UserStatus_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<UserStatus_Max_Fields>;
  min?: Maybe<UserStatus_Min_Fields>;
};


/** aggregate fields of "UserStatus" */
export type UserStatus_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<UserStatus_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "UserStatus". All fields are combined with a logical 'AND'. */
export type UserStatus_Bool_Exp = {
  Users?: InputMaybe<User_Bool_Exp>;
  Users_aggregate?: InputMaybe<User_Aggregate_Bool_Exp>;
  _and?: InputMaybe<Array<UserStatus_Bool_Exp>>;
  _not?: InputMaybe<UserStatus_Bool_Exp>;
  _or?: InputMaybe<Array<UserStatus_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "UserStatus" */
export enum UserStatus_Constraint {
  /** unique or primary key constraint on columns "value" */
  UserStatusPkey = 'UserStatus_pkey'
}

export enum UserStatus_Enum {
  /** User is active */
  Active = 'ACTIVE',
  /** All private information considering these user is deleted). */
  Deleted = 'DELETED',
  /** User did not show any activity on the platform for more than 12 month (currently not implemented) */
  Inactive = 'INACTIVE',
  /** The user is classified as SPAM. */
  Spam = 'SPAM'
}

/** Boolean expression to compare columns of type "UserStatus_enum". All fields are combined with logical 'AND'. */
export type UserStatus_Enum_Comparison_Exp = {
  _eq?: InputMaybe<UserStatus_Enum>;
  _in?: InputMaybe<Array<UserStatus_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<UserStatus_Enum>;
  _nin?: InputMaybe<Array<UserStatus_Enum>>;
};

/** input type for inserting data into table "UserStatus" */
export type UserStatus_Insert_Input = {
  Users?: InputMaybe<User_Arr_Rel_Insert_Input>;
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type UserStatus_Max_Fields = {
  __typename?: 'UserStatus_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type UserStatus_Min_Fields = {
  __typename?: 'UserStatus_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "UserStatus" */
export type UserStatus_Mutation_Response = {
  __typename?: 'UserStatus_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<UserStatus>;
};

/** input type for inserting object relation for remote table "UserStatus" */
export type UserStatus_Obj_Rel_Insert_Input = {
  data: UserStatus_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<UserStatus_On_Conflict>;
};

/** on_conflict condition type for table "UserStatus" */
export type UserStatus_On_Conflict = {
  constraint: UserStatus_Constraint;
  update_columns?: Array<UserStatus_Update_Column>;
  where?: InputMaybe<UserStatus_Bool_Exp>;
};

/** Ordering options when selecting data from "UserStatus". */
export type UserStatus_Order_By = {
  Users_aggregate?: InputMaybe<User_Aggregate_Order_By>;
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: UserStatus */
export type UserStatus_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "UserStatus" */
export enum UserStatus_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "UserStatus" */
export type UserStatus_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "UserStatus" */
export type UserStatus_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: UserStatus_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type UserStatus_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "UserStatus" */
export enum UserStatus_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type UserStatus_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<UserStatus_Set_Input>;
  /** filter the rows which have to be updated */
  where: UserStatus_Bool_Exp;
};

/** aggregated selection of "User" */
export type User_Aggregate = {
  __typename?: 'User_aggregate';
  aggregate?: Maybe<User_Aggregate_Fields>;
  nodes: Array<User>;
};

export type User_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<User_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<User_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<User_Aggregate_Bool_Exp_Count>;
};

export type User_Aggregate_Bool_Exp_Bool_And = {
  arguments: User_Select_Column_User_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<User_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type User_Aggregate_Bool_Exp_Bool_Or = {
  arguments: User_Select_Column_User_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<User_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type User_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<User_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<User_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "User" */
export type User_Aggregate_Fields = {
  __typename?: 'User_aggregate_fields';
  avg?: Maybe<User_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<User_Max_Fields>;
  min?: Maybe<User_Min_Fields>;
  stddev?: Maybe<User_Stddev_Fields>;
  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;
  sum?: Maybe<User_Sum_Fields>;
  var_pop?: Maybe<User_Var_Pop_Fields>;
  var_samp?: Maybe<User_Var_Samp_Fields>;
  variance?: Maybe<User_Variance_Fields>;
};


/** aggregate fields of "User" */
export type User_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<User_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "User" */
export type User_Aggregate_Order_By = {
  avg?: InputMaybe<User_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<User_Max_Order_By>;
  min?: InputMaybe<User_Min_Order_By>;
  stddev?: InputMaybe<User_Stddev_Order_By>;
  stddev_pop?: InputMaybe<User_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<User_Stddev_Samp_Order_By>;
  sum?: InputMaybe<User_Sum_Order_By>;
  var_pop?: InputMaybe<User_Var_Pop_Order_By>;
  var_samp?: InputMaybe<User_Var_Samp_Order_By>;
  variance?: InputMaybe<User_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "User" */
export type User_Arr_Rel_Insert_Input = {
  data: Array<User_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<User_On_Conflict>;
};

/** aggregate avg on columns */
export type User_Avg_Fields = {
  __typename?: 'User_avg_fields';
  integerId?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "User" */
export type User_Avg_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'. */
export type User_Bool_Exp = {
  AchievementOptionMentors?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
  AchievementOptionMentors_aggregate?: InputMaybe<AchievementOptionMentor_Aggregate_Bool_Exp>;
  AchievementRecordAuthors?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
  AchievementRecordAuthors_aggregate?: InputMaybe<AchievementRecordAuthor_Aggregate_Bool_Exp>;
  Admins?: InputMaybe<Admin_Bool_Exp>;
  Admins_aggregate?: InputMaybe<Admin_Aggregate_Bool_Exp>;
  Attendances?: InputMaybe<Attendance_Bool_Exp>;
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  CourseEnrollments?: InputMaybe<CourseEnrollment_Bool_Exp>;
  CourseEnrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Bool_Exp>;
  Experts?: InputMaybe<Expert_Bool_Exp>;
  Experts_aggregate?: InputMaybe<Expert_Aggregate_Bool_Exp>;
  UserStatus?: InputMaybe<UserStatus_Bool_Exp>;
  _and?: InputMaybe<Array<User_Bool_Exp>>;
  _not?: InputMaybe<User_Bool_Exp>;
  _or?: InputMaybe<Array<User_Bool_Exp>>;
  anonymousId?: InputMaybe<String_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  email?: InputMaybe<String_Comparison_Exp>;
  employment?: InputMaybe<Employment_Enum_Comparison_Exp>;
  employmentByEmployment?: InputMaybe<Employment_Bool_Exp>;
  externalProfile?: InputMaybe<String_Comparison_Exp>;
  firstName?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  integerId?: InputMaybe<Int_Comparison_Exp>;
  lastName?: InputMaybe<String_Comparison_Exp>;
  matriculationNumber?: InputMaybe<String_Comparison_Exp>;
  newsletterRegistration?: InputMaybe<Boolean_Comparison_Exp>;
  otherUniversity?: InputMaybe<String_Comparison_Exp>;
  picture?: InputMaybe<String_Comparison_Exp>;
  status?: InputMaybe<UserStatus_Enum_Comparison_Exp>;
  university?: InputMaybe<University_Enum_Comparison_Exp>;
  universityByUniversity?: InputMaybe<University_Bool_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "User" */
export enum User_Constraint {
  /** unique or primary key constraint on columns "anonymousId" */
  PersonAnonymIdKey = 'Person_AnonymId_key',
  /** unique or primary key constraint on columns "id" */
  UserPkey = 'User_pkey'
}

/** input type for incrementing numeric columns in table "User" */
export type User_Inc_Input = {
  integerId?: InputMaybe<Scalars['Int']['input']>;
};

/** input type for inserting data into table "User" */
export type User_Insert_Input = {
  AchievementOptionMentors?: InputMaybe<AchievementOptionMentor_Arr_Rel_Insert_Input>;
  AchievementRecordAuthors?: InputMaybe<AchievementRecordAuthor_Arr_Rel_Insert_Input>;
  Admins?: InputMaybe<Admin_Arr_Rel_Insert_Input>;
  Attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  CourseEnrollments?: InputMaybe<CourseEnrollment_Arr_Rel_Insert_Input>;
  Experts?: InputMaybe<Expert_Arr_Rel_Insert_Input>;
  UserStatus?: InputMaybe<UserStatus_Obj_Rel_Insert_Input>;
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The user's email address */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The user's current employment status */
  employment?: InputMaybe<Employment_Enum>;
  employmentByEmployment?: InputMaybe<Employment_Obj_Rel_Insert_Input>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: InputMaybe<Scalars['String']['input']>;
  /** The user's first name */
  firstName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  integerId?: InputMaybe<Scalars['Int']['input']>;
  /** The user's last name */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** The user's matriculation number at her/his university */
  matriculationNumber?: InputMaybe<Scalars['String']['input']>;
  /** Inormation whether the user is registered for the newsletter or not. */
  newsletterRegistration?: InputMaybe<Scalars['Boolean']['input']>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: InputMaybe<Scalars['String']['input']>;
  /** The user's profile picture */
  picture?: InputMaybe<Scalars['String']['input']>;
  /** Current user status */
  status?: InputMaybe<UserStatus_Enum>;
  /** The university the user is attending or workin at (only provided if he is a student or working in academia) */
  university?: InputMaybe<University_Enum>;
  universityByUniversity?: InputMaybe<University_Obj_Rel_Insert_Input>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type User_Max_Fields = {
  __typename?: 'User_max_fields';
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The user's email address */
  email?: Maybe<Scalars['String']['output']>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: Maybe<Scalars['String']['output']>;
  /** The user's first name */
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  integerId?: Maybe<Scalars['Int']['output']>;
  /** The user's last name */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The user's matriculation number at her/his university */
  matriculationNumber?: Maybe<Scalars['String']['output']>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: Maybe<Scalars['String']['output']>;
  /** The user's profile picture */
  picture?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "User" */
export type User_Max_Order_By = {
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** The user's email address */
  email?: InputMaybe<Order_By>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: InputMaybe<Order_By>;
  /** The user's first name */
  firstName?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  integerId?: InputMaybe<Order_By>;
  /** The user's last name */
  lastName?: InputMaybe<Order_By>;
  /** The user's matriculation number at her/his university */
  matriculationNumber?: InputMaybe<Order_By>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: InputMaybe<Order_By>;
  /** The user's profile picture */
  picture?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type User_Min_Fields = {
  __typename?: 'User_min_fields';
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['timestamptz']['output']>;
  /** The user's email address */
  email?: Maybe<Scalars['String']['output']>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: Maybe<Scalars['String']['output']>;
  /** The user's first name */
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  integerId?: Maybe<Scalars['Int']['output']>;
  /** The user's last name */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The user's matriculation number at her/his university */
  matriculationNumber?: Maybe<Scalars['String']['output']>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: Maybe<Scalars['String']['output']>;
  /** The user's profile picture */
  picture?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "User" */
export type User_Min_Order_By = {
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  /** The user's email address */
  email?: InputMaybe<Order_By>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: InputMaybe<Order_By>;
  /** The user's first name */
  firstName?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  integerId?: InputMaybe<Order_By>;
  /** The user's last name */
  lastName?: InputMaybe<Order_By>;
  /** The user's matriculation number at her/his university */
  matriculationNumber?: InputMaybe<Order_By>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: InputMaybe<Order_By>;
  /** The user's profile picture */
  picture?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "User" */
export type User_Mutation_Response = {
  __typename?: 'User_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<User>;
};

/** input type for inserting object relation for remote table "User" */
export type User_Obj_Rel_Insert_Input = {
  data: User_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<User_On_Conflict>;
};

/** on_conflict condition type for table "User" */
export type User_On_Conflict = {
  constraint: User_Constraint;
  update_columns?: Array<User_Update_Column>;
  where?: InputMaybe<User_Bool_Exp>;
};

/** Ordering options when selecting data from "User". */
export type User_Order_By = {
  AchievementOptionMentors_aggregate?: InputMaybe<AchievementOptionMentor_Aggregate_Order_By>;
  AchievementRecordAuthors_aggregate?: InputMaybe<AchievementRecordAuthor_Aggregate_Order_By>;
  Admins_aggregate?: InputMaybe<Admin_Aggregate_Order_By>;
  Attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  CourseEnrollments_aggregate?: InputMaybe<CourseEnrollment_Aggregate_Order_By>;
  Experts_aggregate?: InputMaybe<Expert_Aggregate_Order_By>;
  UserStatus?: InputMaybe<UserStatus_Order_By>;
  anonymousId?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  email?: InputMaybe<Order_By>;
  employment?: InputMaybe<Order_By>;
  employmentByEmployment?: InputMaybe<Employment_Order_By>;
  externalProfile?: InputMaybe<Order_By>;
  firstName?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  integerId?: InputMaybe<Order_By>;
  lastName?: InputMaybe<Order_By>;
  matriculationNumber?: InputMaybe<Order_By>;
  newsletterRegistration?: InputMaybe<Order_By>;
  otherUniversity?: InputMaybe<Order_By>;
  picture?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  university?: InputMaybe<Order_By>;
  universityByUniversity?: InputMaybe<University_Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: User */
export type User_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "User" */
export enum User_Select_Column {
  /** column name */
  AnonymousId = 'anonymousId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Employment = 'employment',
  /** column name */
  ExternalProfile = 'externalProfile',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  Id = 'id',
  /** column name */
  IntegerId = 'integerId',
  /** column name */
  LastName = 'lastName',
  /** column name */
  MatriculationNumber = 'matriculationNumber',
  /** column name */
  NewsletterRegistration = 'newsletterRegistration',
  /** column name */
  OtherUniversity = 'otherUniversity',
  /** column name */
  Picture = 'picture',
  /** column name */
  Status = 'status',
  /** column name */
  University = 'university',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** select "User_aggregate_bool_exp_bool_and_arguments_columns" columns of table "User" */
export enum User_Select_Column_User_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  NewsletterRegistration = 'newsletterRegistration'
}

/** select "User_aggregate_bool_exp_bool_or_arguments_columns" columns of table "User" */
export enum User_Select_Column_User_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  NewsletterRegistration = 'newsletterRegistration'
}

/** input type for updating data in table "User" */
export type User_Set_Input = {
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The user's email address */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The user's current employment status */
  employment?: InputMaybe<Employment_Enum>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: InputMaybe<Scalars['String']['input']>;
  /** The user's first name */
  firstName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  integerId?: InputMaybe<Scalars['Int']['input']>;
  /** The user's last name */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** The user's matriculation number at her/his university */
  matriculationNumber?: InputMaybe<Scalars['String']['input']>;
  /** Inormation whether the user is registered for the newsletter or not. */
  newsletterRegistration?: InputMaybe<Scalars['Boolean']['input']>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: InputMaybe<Scalars['String']['input']>;
  /** The user's profile picture */
  picture?: InputMaybe<Scalars['String']['input']>;
  /** Current user status */
  status?: InputMaybe<UserStatus_Enum>;
  /** The university the user is attending or workin at (only provided if he is a student or working in academia) */
  university?: InputMaybe<University_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type User_Stddev_Fields = {
  __typename?: 'User_stddev_fields';
  integerId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "User" */
export type User_Stddev_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type User_Stddev_Pop_Fields = {
  __typename?: 'User_stddev_pop_fields';
  integerId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "User" */
export type User_Stddev_Pop_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type User_Stddev_Samp_Fields = {
  __typename?: 'User_stddev_samp_fields';
  integerId?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "User" */
export type User_Stddev_Samp_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "User" */
export type User_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Stream_Cursor_Value_Input = {
  /** A random anonymous ID for the user, which can be used for external communication */
  anonymousId?: InputMaybe<Scalars['String']['input']>;
  created_at?: InputMaybe<Scalars['timestamptz']['input']>;
  /** The user's email address */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The user's current employment status */
  employment?: InputMaybe<Employment_Enum>;
  /** A link to an external profile, for example in LinkedIn or Xing */
  externalProfile?: InputMaybe<Scalars['String']['input']>;
  /** The user's first name */
  firstName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  integerId?: InputMaybe<Scalars['Int']['input']>;
  /** The user's last name */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** The user's matriculation number at her/his university */
  matriculationNumber?: InputMaybe<Scalars['String']['input']>;
  /** Inormation whether the user is registered for the newsletter or not. */
  newsletterRegistration?: InputMaybe<Scalars['Boolean']['input']>;
  /** Name of the university the student is attending or working at (only provided if his/her university is not part of the provided list) */
  otherUniversity?: InputMaybe<Scalars['String']['input']>;
  /** The user's profile picture */
  picture?: InputMaybe<Scalars['String']['input']>;
  /** Current user status */
  status?: InputMaybe<UserStatus_Enum>;
  /** The university the user is attending or workin at (only provided if he is a student or working in academia) */
  university?: InputMaybe<University_Enum>;
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type User_Sum_Fields = {
  __typename?: 'User_sum_fields';
  integerId?: Maybe<Scalars['Int']['output']>;
};

/** order by sum() on columns of table "User" */
export type User_Sum_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** update columns of table "User" */
export enum User_Update_Column {
  /** column name */
  AnonymousId = 'anonymousId',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Employment = 'employment',
  /** column name */
  ExternalProfile = 'externalProfile',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  Id = 'id',
  /** column name */
  IntegerId = 'integerId',
  /** column name */
  LastName = 'lastName',
  /** column name */
  MatriculationNumber = 'matriculationNumber',
  /** column name */
  NewsletterRegistration = 'newsletterRegistration',
  /** column name */
  OtherUniversity = 'otherUniversity',
  /** column name */
  Picture = 'picture',
  /** column name */
  Status = 'status',
  /** column name */
  University = 'university',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type User_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<User_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<User_Set_Input>;
  /** filter the rows which have to be updated */
  where: User_Bool_Exp;
};

/** aggregate var_pop on columns */
export type User_Var_Pop_Fields = {
  __typename?: 'User_var_pop_fields';
  integerId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "User" */
export type User_Var_Pop_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type User_Var_Samp_Fields = {
  __typename?: 'User_var_samp_fields';
  integerId?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "User" */
export type User_Var_Samp_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type User_Variance_Fields = {
  __typename?: 'User_variance_fields';
  integerId?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "User" */
export type User_Variance_Order_By = {
  integerId?: InputMaybe<Order_By>;
};

/** List for how to save weekdays */
export type Weekday = {
  __typename?: 'Weekday';
  comment?: Maybe<Scalars['String']['output']>;
  value: Scalars['String']['output'];
};

/** aggregated selection of "Weekday" */
export type Weekday_Aggregate = {
  __typename?: 'Weekday_aggregate';
  aggregate?: Maybe<Weekday_Aggregate_Fields>;
  nodes: Array<Weekday>;
};

/** aggregate fields of "Weekday" */
export type Weekday_Aggregate_Fields = {
  __typename?: 'Weekday_aggregate_fields';
  count: Scalars['Int']['output'];
  max?: Maybe<Weekday_Max_Fields>;
  min?: Maybe<Weekday_Min_Fields>;
};


/** aggregate fields of "Weekday" */
export type Weekday_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Weekday_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "Weekday". All fields are combined with a logical 'AND'. */
export type Weekday_Bool_Exp = {
  _and?: InputMaybe<Array<Weekday_Bool_Exp>>;
  _not?: InputMaybe<Weekday_Bool_Exp>;
  _or?: InputMaybe<Array<Weekday_Bool_Exp>>;
  comment?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Weekday" */
export enum Weekday_Constraint {
  /** unique or primary key constraint on columns "value" */
  WeekdayPkey = 'Weekday_pkey'
}

export enum Weekday_Enum {
  Friday = 'FRIDAY',
  Monday = 'MONDAY',
  /** For block seminars etc. */
  None = 'NONE',
  Saturday = 'SATURDAY',
  Sunday = 'SUNDAY',
  Thursday = 'THURSDAY',
  Tuesday = 'TUESDAY',
  Wednesday = 'WEDNESDAY'
}

/** Boolean expression to compare columns of type "Weekday_enum". All fields are combined with logical 'AND'. */
export type Weekday_Enum_Comparison_Exp = {
  _eq?: InputMaybe<Weekday_Enum>;
  _in?: InputMaybe<Array<Weekday_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<Weekday_Enum>;
  _nin?: InputMaybe<Array<Weekday_Enum>>;
};

/** input type for inserting data into table "Weekday" */
export type Weekday_Insert_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Weekday_Max_Fields = {
  __typename?: 'Weekday_max_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Weekday_Min_Fields = {
  __typename?: 'Weekday_min_fields';
  comment?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "Weekday" */
export type Weekday_Mutation_Response = {
  __typename?: 'Weekday_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Weekday>;
};

/** input type for inserting object relation for remote table "Weekday" */
export type Weekday_Obj_Rel_Insert_Input = {
  data: Weekday_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Weekday_On_Conflict>;
};

/** on_conflict condition type for table "Weekday" */
export type Weekday_On_Conflict = {
  constraint: Weekday_Constraint;
  update_columns?: Array<Weekday_Update_Column>;
  where?: InputMaybe<Weekday_Bool_Exp>;
};

/** Ordering options when selecting data from "Weekday". */
export type Weekday_Order_By = {
  comment?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: Weekday */
export type Weekday_Pk_Columns_Input = {
  value: Scalars['String']['input'];
};

/** select columns of table "Weekday" */
export enum Weekday_Select_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "Weekday" */
export type Weekday_Set_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "Weekday" */
export type Weekday_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Weekday_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Weekday_Stream_Cursor_Value_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "Weekday" */
export enum Weekday_Update_Column {
  /** column name */
  Comment = 'comment',
  /** column name */
  Value = 'value'
}

export type Weekday_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Weekday_Set_Input>;
  /** filter the rows which have to be updated */
  where: Weekday_Bool_Exp;
};

/** Boolean expression to compare columns of type "_int4". All fields are combined with logical 'AND'. */
export type _Int4_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['_int4']['input']>;
  _gt?: InputMaybe<Scalars['_int4']['input']>;
  _gte?: InputMaybe<Scalars['_int4']['input']>;
  _in?: InputMaybe<Array<Scalars['_int4']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['_int4']['input']>;
  _lte?: InputMaybe<Scalars['_int4']['input']>;
  _neq?: InputMaybe<Scalars['_int4']['input']>;
  _nin?: InputMaybe<Array<Scalars['_int4']['input']>>;
};

/** Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'. */
export type _Text_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['_text']['input']>;
  _gt?: InputMaybe<Scalars['_text']['input']>;
  _gte?: InputMaybe<Scalars['_text']['input']>;
  _in?: InputMaybe<Array<Scalars['_text']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['_text']['input']>;
  _lte?: InputMaybe<Scalars['_text']['input']>;
  _neq?: InputMaybe<Scalars['_text']['input']>;
  _nin?: InputMaybe<Array<Scalars['_text']['input']>>;
};

/** ordering argument of a cursor */
export enum Cursor_Ordering {
  /** ascending ordering of the cursor */
  Asc = 'ASC',
  /** descending ordering of the cursor */
  Desc = 'DESC'
}

/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
export type Date_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['date']['input']>;
  _gt?: InputMaybe<Scalars['date']['input']>;
  _gte?: InputMaybe<Scalars['date']['input']>;
  _in?: InputMaybe<Array<Scalars['date']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['date']['input']>;
  _lte?: InputMaybe<Scalars['date']['input']>;
  _neq?: InputMaybe<Scalars['date']['input']>;
  _nin?: InputMaybe<Array<Scalars['date']['input']>>;
};

export type GetSignedUrlOutput = {
  __typename?: 'getSignedUrlOutput';
  link: Scalars['String']['output'];
};

export type LoadFileOutput = {
  __typename?: 'loadFileOutput';
  link: Scalars['String']['output'];
};

export type MoocHubSchema = {
  __typename?: 'moocHubSchema';
  data: Array<MoocHubCourse>;
  links: Links;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  /** Anonymizes a user's data in Hasura and Googl Cloud bucket and deletes it in Keycloak */
  anonymizeUser?: Maybe<AnonymizeUserResult>;
  /** Generates a certificate of a given type for a given course and user id */
  createCertificate?: Maybe<Result>;
  /** createCertificates */
  createCertificates: Scalars['String']['output'];
  /** delete data from the table: "AchievementDocumentationTemplate" */
  delete_AchievementDocumentationTemplate?: Maybe<AchievementDocumentationTemplate_Mutation_Response>;
  /** delete single row from the table: "AchievementDocumentationTemplate" */
  delete_AchievementDocumentationTemplate_by_pk?: Maybe<AchievementDocumentationTemplate>;
  /** delete data from the table: "AchievementOption" */
  delete_AchievementOption?: Maybe<AchievementOption_Mutation_Response>;
  /** delete data from the table: "AchievementOptionCourse" */
  delete_AchievementOptionCourse?: Maybe<AchievementOptionCourse_Mutation_Response>;
  /** delete single row from the table: "AchievementOptionCourse" */
  delete_AchievementOptionCourse_by_pk?: Maybe<AchievementOptionCourse>;
  /** delete data from the table: "AchievementOptionMentor" */
  delete_AchievementOptionMentor?: Maybe<AchievementOptionMentor_Mutation_Response>;
  /** delete single row from the table: "AchievementOptionMentor" */
  delete_AchievementOptionMentor_by_pk?: Maybe<AchievementOptionMentor>;
  /** delete single row from the table: "AchievementOption" */
  delete_AchievementOption_by_pk?: Maybe<AchievementOption>;
  /** delete data from the table: "AchievementRecord" */
  delete_AchievementRecord?: Maybe<AchievementRecord_Mutation_Response>;
  /** delete data from the table: "AchievementRecordAuthor" */
  delete_AchievementRecordAuthor?: Maybe<AchievementRecordAuthor_Mutation_Response>;
  /** delete single row from the table: "AchievementRecordAuthor" */
  delete_AchievementRecordAuthor_by_pk?: Maybe<AchievementRecordAuthor>;
  /** delete data from the table: "AchievementRecordRating" */
  delete_AchievementRecordRating?: Maybe<AchievementRecordRating_Mutation_Response>;
  /** delete single row from the table: "AchievementRecordRating" */
  delete_AchievementRecordRating_by_pk?: Maybe<AchievementRecordRating>;
  /** delete data from the table: "AchievementRecordType" */
  delete_AchievementRecordType?: Maybe<AchievementRecordType_Mutation_Response>;
  /** delete single row from the table: "AchievementRecordType" */
  delete_AchievementRecordType_by_pk?: Maybe<AchievementRecordType>;
  /** delete single row from the table: "AchievementRecord" */
  delete_AchievementRecord_by_pk?: Maybe<AchievementRecord>;
  /** delete data from the table: "Admin" */
  delete_Admin?: Maybe<Admin_Mutation_Response>;
  /** delete single row from the table: "Admin" */
  delete_Admin_by_pk?: Maybe<Admin>;
  /** delete data from the table: "AppSettings" */
  delete_AppSettings?: Maybe<AppSettings_Mutation_Response>;
  /** delete single row from the table: "AppSettings" */
  delete_AppSettings_by_pk?: Maybe<AppSettings>;
  /** delete data from the table: "Attendance" */
  delete_Attendance?: Maybe<Attendance_Mutation_Response>;
  /** delete data from the table: "AttendanceSource" */
  delete_AttendanceSource?: Maybe<AttendanceSource_Mutation_Response>;
  /** delete single row from the table: "AttendanceSource" */
  delete_AttendanceSource_by_pk?: Maybe<AttendanceSource>;
  /** delete data from the table: "AttendanceStatus" */
  delete_AttendanceStatus?: Maybe<AttendanceStatus_Mutation_Response>;
  /** delete single row from the table: "AttendanceStatus" */
  delete_AttendanceStatus_by_pk?: Maybe<AttendanceStatus>;
  /** delete single row from the table: "Attendance" */
  delete_Attendance_by_pk?: Maybe<Attendance>;
  /** delete data from the table: "CertificateTemplateProgram" */
  delete_CertificateTemplateProgram?: Maybe<CertificateTemplateProgram_Mutation_Response>;
  /** delete single row from the table: "CertificateTemplateProgram" */
  delete_CertificateTemplateProgram_by_pk?: Maybe<CertificateTemplateProgram>;
  /** delete data from the table: "CertificateTemplateText" */
  delete_CertificateTemplateText?: Maybe<CertificateTemplateText_Mutation_Response>;
  /** delete single row from the table: "CertificateTemplateText" */
  delete_CertificateTemplateText_by_pk?: Maybe<CertificateTemplateText>;
  /** delete data from the table: "CertificateType" */
  delete_CertificateType?: Maybe<CertificateType_Mutation_Response>;
  /** delete single row from the table: "CertificateType" */
  delete_CertificateType_by_pk?: Maybe<CertificateType>;
  /** delete data from the table: "Course" */
  delete_Course?: Maybe<Course_Mutation_Response>;
  /** delete data from the table: "CourseDegree" */
  delete_CourseDegree?: Maybe<CourseDegree_Mutation_Response>;
  /** delete single row from the table: "CourseDegree" */
  delete_CourseDegree_by_pk?: Maybe<CourseDegree>;
  /** delete data from the table: "CourseEnrollment" */
  delete_CourseEnrollment?: Maybe<CourseEnrollment_Mutation_Response>;
  /** delete data from the table: "CourseEnrollmentStatus" */
  delete_CourseEnrollmentStatus?: Maybe<CourseEnrollmentStatus_Mutation_Response>;
  /** delete single row from the table: "CourseEnrollmentStatus" */
  delete_CourseEnrollmentStatus_by_pk?: Maybe<CourseEnrollmentStatus>;
  /** delete single row from the table: "CourseEnrollment" */
  delete_CourseEnrollment_by_pk?: Maybe<CourseEnrollment>;
  /** delete data from the table: "CourseGroup" */
  delete_CourseGroup?: Maybe<CourseGroup_Mutation_Response>;
  /** delete data from the table: "CourseGroupOption" */
  delete_CourseGroupOption?: Maybe<CourseGroupOption_Mutation_Response>;
  /** delete single row from the table: "CourseGroupOption" */
  delete_CourseGroupOption_by_pk?: Maybe<CourseGroupOption>;
  /** delete single row from the table: "CourseGroup" */
  delete_CourseGroup_by_pk?: Maybe<CourseGroup>;
  /** delete data from the table: "CourseInstructor" */
  delete_CourseInstructor?: Maybe<CourseInstructor_Mutation_Response>;
  /** delete single row from the table: "CourseInstructor" */
  delete_CourseInstructor_by_pk?: Maybe<CourseInstructor>;
  /** delete data from the table: "CourseLocation" */
  delete_CourseLocation?: Maybe<CourseLocation_Mutation_Response>;
  /** delete single row from the table: "CourseLocation" */
  delete_CourseLocation_by_pk?: Maybe<CourseLocation>;
  /** delete data from the table: "CourseStatus" */
  delete_CourseStatus?: Maybe<CourseStatus_Mutation_Response>;
  /** delete single row from the table: "CourseStatus" */
  delete_CourseStatus_by_pk?: Maybe<CourseStatus>;
  /** delete single row from the table: "Course" */
  delete_Course_by_pk?: Maybe<Course>;
  /** delete data from the table: "Employment" */
  delete_Employment?: Maybe<Employment_Mutation_Response>;
  /** delete single row from the table: "Employment" */
  delete_Employment_by_pk?: Maybe<Employment>;
  /** delete data from the table: "Expert" */
  delete_Expert?: Maybe<Expert_Mutation_Response>;
  /** delete single row from the table: "Expert" */
  delete_Expert_by_pk?: Maybe<Expert>;
  /** delete data from the table: "Language" */
  delete_Language?: Maybe<Language_Mutation_Response>;
  /** delete single row from the table: "Language" */
  delete_Language_by_pk?: Maybe<Language>;
  /** delete data from the table: "LocationOption" */
  delete_LocationOption?: Maybe<LocationOption_Mutation_Response>;
  /** delete single row from the table: "LocationOption" */
  delete_LocationOption_by_pk?: Maybe<LocationOption>;
  /** delete data from the table: "MailLog" */
  delete_MailLog?: Maybe<MailLog_Mutation_Response>;
  /** delete single row from the table: "MailLog" */
  delete_MailLog_by_pk?: Maybe<MailLog>;
  /** delete data from the table: "MailStatus" */
  delete_MailStatus?: Maybe<MailStatus_Mutation_Response>;
  /** delete single row from the table: "MailStatus" */
  delete_MailStatus_by_pk?: Maybe<MailStatus>;
  /** delete data from the table: "MailTemplate" */
  delete_MailTemplate?: Maybe<MailTemplate_Mutation_Response>;
  /** delete single row from the table: "MailTemplate" */
  delete_MailTemplate_by_pk?: Maybe<MailTemplate>;
  /** delete data from the table: "MotivationRating" */
  delete_MotivationRating?: Maybe<MotivationRating_Mutation_Response>;
  /** delete single row from the table: "MotivationRating" */
  delete_MotivationRating_by_pk?: Maybe<MotivationRating>;
  /** delete data from the table: "Program" */
  delete_Program?: Maybe<Program_Mutation_Response>;
  /** delete single row from the table: "Program" */
  delete_Program_by_pk?: Maybe<Program>;
  /** delete data from the table: "rentAScientist.RentAScientistConfig" */
  delete_RentAScientistConfig?: Maybe<RentAScientistConfig_Mutation_Response>;
  /** delete single row from the table: "rentAScientist.RentAScientistConfig" */
  delete_RentAScientistConfig_by_pk?: Maybe<RentAScientistConfig>;
  /** delete data from the table: "rentAScientist.School" */
  delete_School?: Maybe<School_Mutation_Response>;
  /** delete data from the table: "rentAScientist.SchoolClass" */
  delete_SchoolClass?: Maybe<SchoolClass_Mutation_Response>;
  /** delete data from the table: "rentAScientist.SchoolClassRequest" */
  delete_SchoolClassRequest?: Maybe<SchoolClassRequest_Mutation_Response>;
  /** delete single row from the table: "rentAScientist.SchoolClassRequest" */
  delete_SchoolClassRequest_by_pk?: Maybe<SchoolClassRequest>;
  /** delete single row from the table: "rentAScientist.SchoolClass" */
  delete_SchoolClass_by_pk?: Maybe<SchoolClass>;
  /** delete single row from the table: "rentAScientist.School" */
  delete_School_by_pk?: Maybe<School>;
  /** delete data from the table: "rentAScientist.Scientist" */
  delete_Scientist?: Maybe<Scientist_Mutation_Response>;
  /** delete data from the table: "rentAScientist.ScientistOffer" */
  delete_ScientistOffer?: Maybe<ScientistOffer_Mutation_Response>;
  /** delete data from the table: "rentAScientist.ScientistOfferRelation" */
  delete_ScientistOfferRelation?: Maybe<ScientistOfferRelation_Mutation_Response>;
  /** delete single row from the table: "rentAScientist.ScientistOfferRelation" */
  delete_ScientistOfferRelation_by_pk?: Maybe<ScientistOfferRelation>;
  /** delete single row from the table: "rentAScientist.ScientistOffer" */
  delete_ScientistOffer_by_pk?: Maybe<ScientistOffer>;
  /** delete single row from the table: "rentAScientist.Scientist" */
  delete_Scientist_by_pk?: Maybe<Scientist>;
  /** delete data from the table: "Session" */
  delete_Session?: Maybe<Session_Mutation_Response>;
  /** delete data from the table: "SessionAddress" */
  delete_SessionAddress?: Maybe<SessionAddress_Mutation_Response>;
  /** delete single row from the table: "SessionAddress" */
  delete_SessionAddress_by_pk?: Maybe<SessionAddress>;
  /** delete data from the table: "SessionSpeaker" */
  delete_SessionSpeaker?: Maybe<SessionSpeaker_Mutation_Response>;
  /** delete single row from the table: "SessionSpeaker" */
  delete_SessionSpeaker_by_pk?: Maybe<SessionSpeaker>;
  /** delete single row from the table: "Session" */
  delete_Session_by_pk?: Maybe<Session>;
  /** delete data from the table: "rentAScientist.Teacher" */
  delete_Teacher?: Maybe<Teacher_Mutation_Response>;
  /** delete single row from the table: "rentAScientist.Teacher" */
  delete_Teacher_by_pk?: Maybe<Teacher>;
  /** delete data from the table: "University" */
  delete_University?: Maybe<University_Mutation_Response>;
  /** delete single row from the table: "University" */
  delete_University_by_pk?: Maybe<University>;
  /** delete data from the table: "User" */
  delete_User?: Maybe<User_Mutation_Response>;
  /** delete data from the table: "UserStatus" */
  delete_UserStatus?: Maybe<UserStatus_Mutation_Response>;
  /** delete single row from the table: "UserStatus" */
  delete_UserStatus_by_pk?: Maybe<UserStatus>;
  /** delete single row from the table: "User" */
  delete_User_by_pk?: Maybe<User>;
  /** delete data from the table: "Weekday" */
  delete_Weekday?: Maybe<Weekday_Mutation_Response>;
  /** delete single row from the table: "Weekday" */
  delete_Weekday_by_pk?: Maybe<Weekday>;
  /** insert data into the table: "AchievementDocumentationTemplate" */
  insert_AchievementDocumentationTemplate?: Maybe<AchievementDocumentationTemplate_Mutation_Response>;
  /** insert a single row into the table: "AchievementDocumentationTemplate" */
  insert_AchievementDocumentationTemplate_one?: Maybe<AchievementDocumentationTemplate>;
  /** insert data into the table: "AchievementOption" */
  insert_AchievementOption?: Maybe<AchievementOption_Mutation_Response>;
  /** insert data into the table: "AchievementOptionCourse" */
  insert_AchievementOptionCourse?: Maybe<AchievementOptionCourse_Mutation_Response>;
  /** insert a single row into the table: "AchievementOptionCourse" */
  insert_AchievementOptionCourse_one?: Maybe<AchievementOptionCourse>;
  /** insert data into the table: "AchievementOptionMentor" */
  insert_AchievementOptionMentor?: Maybe<AchievementOptionMentor_Mutation_Response>;
  /** insert a single row into the table: "AchievementOptionMentor" */
  insert_AchievementOptionMentor_one?: Maybe<AchievementOptionMentor>;
  /** insert a single row into the table: "AchievementOption" */
  insert_AchievementOption_one?: Maybe<AchievementOption>;
  /** insert data into the table: "AchievementRecord" */
  insert_AchievementRecord?: Maybe<AchievementRecord_Mutation_Response>;
  /** insert data into the table: "AchievementRecordAuthor" */
  insert_AchievementRecordAuthor?: Maybe<AchievementRecordAuthor_Mutation_Response>;
  /** insert a single row into the table: "AchievementRecordAuthor" */
  insert_AchievementRecordAuthor_one?: Maybe<AchievementRecordAuthor>;
  /** insert data into the table: "AchievementRecordRating" */
  insert_AchievementRecordRating?: Maybe<AchievementRecordRating_Mutation_Response>;
  /** insert a single row into the table: "AchievementRecordRating" */
  insert_AchievementRecordRating_one?: Maybe<AchievementRecordRating>;
  /** insert data into the table: "AchievementRecordType" */
  insert_AchievementRecordType?: Maybe<AchievementRecordType_Mutation_Response>;
  /** insert a single row into the table: "AchievementRecordType" */
  insert_AchievementRecordType_one?: Maybe<AchievementRecordType>;
  /** insert a single row into the table: "AchievementRecord" */
  insert_AchievementRecord_one?: Maybe<AchievementRecord>;
  /** insert data into the table: "Admin" */
  insert_Admin?: Maybe<Admin_Mutation_Response>;
  /** insert a single row into the table: "Admin" */
  insert_Admin_one?: Maybe<Admin>;
  /** insert data into the table: "AppSettings" */
  insert_AppSettings?: Maybe<AppSettings_Mutation_Response>;
  /** insert a single row into the table: "AppSettings" */
  insert_AppSettings_one?: Maybe<AppSettings>;
  /** insert data into the table: "Attendance" */
  insert_Attendance?: Maybe<Attendance_Mutation_Response>;
  /** insert data into the table: "AttendanceSource" */
  insert_AttendanceSource?: Maybe<AttendanceSource_Mutation_Response>;
  /** insert a single row into the table: "AttendanceSource" */
  insert_AttendanceSource_one?: Maybe<AttendanceSource>;
  /** insert data into the table: "AttendanceStatus" */
  insert_AttendanceStatus?: Maybe<AttendanceStatus_Mutation_Response>;
  /** insert a single row into the table: "AttendanceStatus" */
  insert_AttendanceStatus_one?: Maybe<AttendanceStatus>;
  /** insert a single row into the table: "Attendance" */
  insert_Attendance_one?: Maybe<Attendance>;
  /** insert data into the table: "CertificateTemplateProgram" */
  insert_CertificateTemplateProgram?: Maybe<CertificateTemplateProgram_Mutation_Response>;
  /** insert a single row into the table: "CertificateTemplateProgram" */
  insert_CertificateTemplateProgram_one?: Maybe<CertificateTemplateProgram>;
  /** insert data into the table: "CertificateTemplateText" */
  insert_CertificateTemplateText?: Maybe<CertificateTemplateText_Mutation_Response>;
  /** insert a single row into the table: "CertificateTemplateText" */
  insert_CertificateTemplateText_one?: Maybe<CertificateTemplateText>;
  /** insert data into the table: "CertificateType" */
  insert_CertificateType?: Maybe<CertificateType_Mutation_Response>;
  /** insert a single row into the table: "CertificateType" */
  insert_CertificateType_one?: Maybe<CertificateType>;
  /** insert data into the table: "Course" */
  insert_Course?: Maybe<Course_Mutation_Response>;
  /** insert data into the table: "CourseDegree" */
  insert_CourseDegree?: Maybe<CourseDegree_Mutation_Response>;
  /** insert a single row into the table: "CourseDegree" */
  insert_CourseDegree_one?: Maybe<CourseDegree>;
  /** insert data into the table: "CourseEnrollment" */
  insert_CourseEnrollment?: Maybe<CourseEnrollment_Mutation_Response>;
  /** insert data into the table: "CourseEnrollmentStatus" */
  insert_CourseEnrollmentStatus?: Maybe<CourseEnrollmentStatus_Mutation_Response>;
  /** insert a single row into the table: "CourseEnrollmentStatus" */
  insert_CourseEnrollmentStatus_one?: Maybe<CourseEnrollmentStatus>;
  /** insert a single row into the table: "CourseEnrollment" */
  insert_CourseEnrollment_one?: Maybe<CourseEnrollment>;
  /** insert data into the table: "CourseGroup" */
  insert_CourseGroup?: Maybe<CourseGroup_Mutation_Response>;
  /** insert data into the table: "CourseGroupOption" */
  insert_CourseGroupOption?: Maybe<CourseGroupOption_Mutation_Response>;
  /** insert a single row into the table: "CourseGroupOption" */
  insert_CourseGroupOption_one?: Maybe<CourseGroupOption>;
  /** insert a single row into the table: "CourseGroup" */
  insert_CourseGroup_one?: Maybe<CourseGroup>;
  /** insert data into the table: "CourseInstructor" */
  insert_CourseInstructor?: Maybe<CourseInstructor_Mutation_Response>;
  /** insert a single row into the table: "CourseInstructor" */
  insert_CourseInstructor_one?: Maybe<CourseInstructor>;
  /** insert data into the table: "CourseLocation" */
  insert_CourseLocation?: Maybe<CourseLocation_Mutation_Response>;
  /** insert a single row into the table: "CourseLocation" */
  insert_CourseLocation_one?: Maybe<CourseLocation>;
  /** insert data into the table: "CourseStatus" */
  insert_CourseStatus?: Maybe<CourseStatus_Mutation_Response>;
  /** insert a single row into the table: "CourseStatus" */
  insert_CourseStatus_one?: Maybe<CourseStatus>;
  /** insert a single row into the table: "Course" */
  insert_Course_one?: Maybe<Course>;
  /** insert data into the table: "Employment" */
  insert_Employment?: Maybe<Employment_Mutation_Response>;
  /** insert a single row into the table: "Employment" */
  insert_Employment_one?: Maybe<Employment>;
  /** insert data into the table: "Expert" */
  insert_Expert?: Maybe<Expert_Mutation_Response>;
  /** insert a single row into the table: "Expert" */
  insert_Expert_one?: Maybe<Expert>;
  /** insert data into the table: "Language" */
  insert_Language?: Maybe<Language_Mutation_Response>;
  /** insert a single row into the table: "Language" */
  insert_Language_one?: Maybe<Language>;
  /** insert data into the table: "LocationOption" */
  insert_LocationOption?: Maybe<LocationOption_Mutation_Response>;
  /** insert a single row into the table: "LocationOption" */
  insert_LocationOption_one?: Maybe<LocationOption>;
  /** insert data into the table: "MailLog" */
  insert_MailLog?: Maybe<MailLog_Mutation_Response>;
  /** insert a single row into the table: "MailLog" */
  insert_MailLog_one?: Maybe<MailLog>;
  /** insert data into the table: "MailStatus" */
  insert_MailStatus?: Maybe<MailStatus_Mutation_Response>;
  /** insert a single row into the table: "MailStatus" */
  insert_MailStatus_one?: Maybe<MailStatus>;
  /** insert data into the table: "MailTemplate" */
  insert_MailTemplate?: Maybe<MailTemplate_Mutation_Response>;
  /** insert a single row into the table: "MailTemplate" */
  insert_MailTemplate_one?: Maybe<MailTemplate>;
  /** insert data into the table: "MotivationRating" */
  insert_MotivationRating?: Maybe<MotivationRating_Mutation_Response>;
  /** insert a single row into the table: "MotivationRating" */
  insert_MotivationRating_one?: Maybe<MotivationRating>;
  /** insert data into the table: "Program" */
  insert_Program?: Maybe<Program_Mutation_Response>;
  /** insert a single row into the table: "Program" */
  insert_Program_one?: Maybe<Program>;
  /** insert data into the table: "rentAScientist.RentAScientistConfig" */
  insert_RentAScientistConfig?: Maybe<RentAScientistConfig_Mutation_Response>;
  /** insert a single row into the table: "rentAScientist.RentAScientistConfig" */
  insert_RentAScientistConfig_one?: Maybe<RentAScientistConfig>;
  /** insert data into the table: "rentAScientist.School" */
  insert_School?: Maybe<School_Mutation_Response>;
  /** insert data into the table: "rentAScientist.SchoolClass" */
  insert_SchoolClass?: Maybe<SchoolClass_Mutation_Response>;
  /** insert data into the table: "rentAScientist.SchoolClassRequest" */
  insert_SchoolClassRequest?: Maybe<SchoolClassRequest_Mutation_Response>;
  /** insert a single row into the table: "rentAScientist.SchoolClassRequest" */
  insert_SchoolClassRequest_one?: Maybe<SchoolClassRequest>;
  /** insert a single row into the table: "rentAScientist.SchoolClass" */
  insert_SchoolClass_one?: Maybe<SchoolClass>;
  /** insert a single row into the table: "rentAScientist.School" */
  insert_School_one?: Maybe<School>;
  /** insert data into the table: "rentAScientist.Scientist" */
  insert_Scientist?: Maybe<Scientist_Mutation_Response>;
  /** insert data into the table: "rentAScientist.ScientistOffer" */
  insert_ScientistOffer?: Maybe<ScientistOffer_Mutation_Response>;
  /** insert data into the table: "rentAScientist.ScientistOfferRelation" */
  insert_ScientistOfferRelation?: Maybe<ScientistOfferRelation_Mutation_Response>;
  /** insert a single row into the table: "rentAScientist.ScientistOfferRelation" */
  insert_ScientistOfferRelation_one?: Maybe<ScientistOfferRelation>;
  /** insert a single row into the table: "rentAScientist.ScientistOffer" */
  insert_ScientistOffer_one?: Maybe<ScientistOffer>;
  /** insert a single row into the table: "rentAScientist.Scientist" */
  insert_Scientist_one?: Maybe<Scientist>;
  /** insert data into the table: "Session" */
  insert_Session?: Maybe<Session_Mutation_Response>;
  /** insert data into the table: "SessionAddress" */
  insert_SessionAddress?: Maybe<SessionAddress_Mutation_Response>;
  /** insert a single row into the table: "SessionAddress" */
  insert_SessionAddress_one?: Maybe<SessionAddress>;
  /** insert data into the table: "SessionSpeaker" */
  insert_SessionSpeaker?: Maybe<SessionSpeaker_Mutation_Response>;
  /** insert a single row into the table: "SessionSpeaker" */
  insert_SessionSpeaker_one?: Maybe<SessionSpeaker>;
  /** insert a single row into the table: "Session" */
  insert_Session_one?: Maybe<Session>;
  /** insert data into the table: "rentAScientist.Teacher" */
  insert_Teacher?: Maybe<Teacher_Mutation_Response>;
  /** insert a single row into the table: "rentAScientist.Teacher" */
  insert_Teacher_one?: Maybe<Teacher>;
  /** insert data into the table: "University" */
  insert_University?: Maybe<University_Mutation_Response>;
  /** insert a single row into the table: "University" */
  insert_University_one?: Maybe<University>;
  /** insert data into the table: "User" */
  insert_User?: Maybe<User_Mutation_Response>;
  /** insert data into the table: "UserStatus" */
  insert_UserStatus?: Maybe<UserStatus_Mutation_Response>;
  /** insert a single row into the table: "UserStatus" */
  insert_UserStatus_one?: Maybe<UserStatus>;
  /** insert a single row into the table: "User" */
  insert_User_one?: Maybe<User>;
  /** insert data into the table: "Weekday" */
  insert_Weekday?: Maybe<Weekday_Mutation_Response>;
  /** insert a single row into the table: "Weekday" */
  insert_Weekday_one?: Maybe<Weekday>;
  saveAchievementCertificateTemplate?: Maybe<SaveFileOutput>;
  saveAchievementDocumentationTemplate?: Maybe<SaveFileOutput>;
  saveAchievementRecordCoverImage?: Maybe<SaveFileOutput>;
  saveAchievementRecordDocumentation?: Maybe<SaveFileOutput>;
  saveAttendanceCertificateTemplate?: Maybe<SaveFileOutput>;
  saveCourseImage?: Maybe<SaveFileOutput>;
  saveUserProfileImage?: Maybe<SaveFileOutput>;
  updateFromKeycloak?: Maybe<Result>;
  /** update data of the table: "AchievementDocumentationTemplate" */
  update_AchievementDocumentationTemplate?: Maybe<AchievementDocumentationTemplate_Mutation_Response>;
  /** update single row of the table: "AchievementDocumentationTemplate" */
  update_AchievementDocumentationTemplate_by_pk?: Maybe<AchievementDocumentationTemplate>;
  /** update multiples rows of table: "AchievementDocumentationTemplate" */
  update_AchievementDocumentationTemplate_many?: Maybe<Array<Maybe<AchievementDocumentationTemplate_Mutation_Response>>>;
  /** update data of the table: "AchievementOption" */
  update_AchievementOption?: Maybe<AchievementOption_Mutation_Response>;
  /** update data of the table: "AchievementOptionCourse" */
  update_AchievementOptionCourse?: Maybe<AchievementOptionCourse_Mutation_Response>;
  /** update single row of the table: "AchievementOptionCourse" */
  update_AchievementOptionCourse_by_pk?: Maybe<AchievementOptionCourse>;
  /** update multiples rows of table: "AchievementOptionCourse" */
  update_AchievementOptionCourse_many?: Maybe<Array<Maybe<AchievementOptionCourse_Mutation_Response>>>;
  /** update data of the table: "AchievementOptionMentor" */
  update_AchievementOptionMentor?: Maybe<AchievementOptionMentor_Mutation_Response>;
  /** update single row of the table: "AchievementOptionMentor" */
  update_AchievementOptionMentor_by_pk?: Maybe<AchievementOptionMentor>;
  /** update multiples rows of table: "AchievementOptionMentor" */
  update_AchievementOptionMentor_many?: Maybe<Array<Maybe<AchievementOptionMentor_Mutation_Response>>>;
  /** update single row of the table: "AchievementOption" */
  update_AchievementOption_by_pk?: Maybe<AchievementOption>;
  /** update multiples rows of table: "AchievementOption" */
  update_AchievementOption_many?: Maybe<Array<Maybe<AchievementOption_Mutation_Response>>>;
  /** update data of the table: "AchievementRecord" */
  update_AchievementRecord?: Maybe<AchievementRecord_Mutation_Response>;
  /** update data of the table: "AchievementRecordAuthor" */
  update_AchievementRecordAuthor?: Maybe<AchievementRecordAuthor_Mutation_Response>;
  /** update single row of the table: "AchievementRecordAuthor" */
  update_AchievementRecordAuthor_by_pk?: Maybe<AchievementRecordAuthor>;
  /** update multiples rows of table: "AchievementRecordAuthor" */
  update_AchievementRecordAuthor_many?: Maybe<Array<Maybe<AchievementRecordAuthor_Mutation_Response>>>;
  /** update data of the table: "AchievementRecordRating" */
  update_AchievementRecordRating?: Maybe<AchievementRecordRating_Mutation_Response>;
  /** update single row of the table: "AchievementRecordRating" */
  update_AchievementRecordRating_by_pk?: Maybe<AchievementRecordRating>;
  /** update multiples rows of table: "AchievementRecordRating" */
  update_AchievementRecordRating_many?: Maybe<Array<Maybe<AchievementRecordRating_Mutation_Response>>>;
  /** update data of the table: "AchievementRecordType" */
  update_AchievementRecordType?: Maybe<AchievementRecordType_Mutation_Response>;
  /** update single row of the table: "AchievementRecordType" */
  update_AchievementRecordType_by_pk?: Maybe<AchievementRecordType>;
  /** update multiples rows of table: "AchievementRecordType" */
  update_AchievementRecordType_many?: Maybe<Array<Maybe<AchievementRecordType_Mutation_Response>>>;
  /** update single row of the table: "AchievementRecord" */
  update_AchievementRecord_by_pk?: Maybe<AchievementRecord>;
  /** update multiples rows of table: "AchievementRecord" */
  update_AchievementRecord_many?: Maybe<Array<Maybe<AchievementRecord_Mutation_Response>>>;
  /** update data of the table: "Admin" */
  update_Admin?: Maybe<Admin_Mutation_Response>;
  /** update single row of the table: "Admin" */
  update_Admin_by_pk?: Maybe<Admin>;
  /** update multiples rows of table: "Admin" */
  update_Admin_many?: Maybe<Array<Maybe<Admin_Mutation_Response>>>;
  /** update data of the table: "AppSettings" */
  update_AppSettings?: Maybe<AppSettings_Mutation_Response>;
  /** update single row of the table: "AppSettings" */
  update_AppSettings_by_pk?: Maybe<AppSettings>;
  /** update multiples rows of table: "AppSettings" */
  update_AppSettings_many?: Maybe<Array<Maybe<AppSettings_Mutation_Response>>>;
  /** update data of the table: "Attendance" */
  update_Attendance?: Maybe<Attendance_Mutation_Response>;
  /** update data of the table: "AttendanceSource" */
  update_AttendanceSource?: Maybe<AttendanceSource_Mutation_Response>;
  /** update single row of the table: "AttendanceSource" */
  update_AttendanceSource_by_pk?: Maybe<AttendanceSource>;
  /** update multiples rows of table: "AttendanceSource" */
  update_AttendanceSource_many?: Maybe<Array<Maybe<AttendanceSource_Mutation_Response>>>;
  /** update data of the table: "AttendanceStatus" */
  update_AttendanceStatus?: Maybe<AttendanceStatus_Mutation_Response>;
  /** update single row of the table: "AttendanceStatus" */
  update_AttendanceStatus_by_pk?: Maybe<AttendanceStatus>;
  /** update multiples rows of table: "AttendanceStatus" */
  update_AttendanceStatus_many?: Maybe<Array<Maybe<AttendanceStatus_Mutation_Response>>>;
  /** update single row of the table: "Attendance" */
  update_Attendance_by_pk?: Maybe<Attendance>;
  /** update multiples rows of table: "Attendance" */
  update_Attendance_many?: Maybe<Array<Maybe<Attendance_Mutation_Response>>>;
  /** update data of the table: "CertificateTemplateProgram" */
  update_CertificateTemplateProgram?: Maybe<CertificateTemplateProgram_Mutation_Response>;
  /** update single row of the table: "CertificateTemplateProgram" */
  update_CertificateTemplateProgram_by_pk?: Maybe<CertificateTemplateProgram>;
  /** update multiples rows of table: "CertificateTemplateProgram" */
  update_CertificateTemplateProgram_many?: Maybe<Array<Maybe<CertificateTemplateProgram_Mutation_Response>>>;
  /** update data of the table: "CertificateTemplateText" */
  update_CertificateTemplateText?: Maybe<CertificateTemplateText_Mutation_Response>;
  /** update single row of the table: "CertificateTemplateText" */
  update_CertificateTemplateText_by_pk?: Maybe<CertificateTemplateText>;
  /** update multiples rows of table: "CertificateTemplateText" */
  update_CertificateTemplateText_many?: Maybe<Array<Maybe<CertificateTemplateText_Mutation_Response>>>;
  /** update data of the table: "CertificateType" */
  update_CertificateType?: Maybe<CertificateType_Mutation_Response>;
  /** update single row of the table: "CertificateType" */
  update_CertificateType_by_pk?: Maybe<CertificateType>;
  /** update multiples rows of table: "CertificateType" */
  update_CertificateType_many?: Maybe<Array<Maybe<CertificateType_Mutation_Response>>>;
  /** update data of the table: "Course" */
  update_Course?: Maybe<Course_Mutation_Response>;
  /** update data of the table: "CourseDegree" */
  update_CourseDegree?: Maybe<CourseDegree_Mutation_Response>;
  /** update single row of the table: "CourseDegree" */
  update_CourseDegree_by_pk?: Maybe<CourseDegree>;
  /** update multiples rows of table: "CourseDegree" */
  update_CourseDegree_many?: Maybe<Array<Maybe<CourseDegree_Mutation_Response>>>;
  /** update data of the table: "CourseEnrollment" */
  update_CourseEnrollment?: Maybe<CourseEnrollment_Mutation_Response>;
  /** update data of the table: "CourseEnrollmentStatus" */
  update_CourseEnrollmentStatus?: Maybe<CourseEnrollmentStatus_Mutation_Response>;
  /** update single row of the table: "CourseEnrollmentStatus" */
  update_CourseEnrollmentStatus_by_pk?: Maybe<CourseEnrollmentStatus>;
  /** update multiples rows of table: "CourseEnrollmentStatus" */
  update_CourseEnrollmentStatus_many?: Maybe<Array<Maybe<CourseEnrollmentStatus_Mutation_Response>>>;
  /** update single row of the table: "CourseEnrollment" */
  update_CourseEnrollment_by_pk?: Maybe<CourseEnrollment>;
  /** update multiples rows of table: "CourseEnrollment" */
  update_CourseEnrollment_many?: Maybe<Array<Maybe<CourseEnrollment_Mutation_Response>>>;
  /** update data of the table: "CourseGroup" */
  update_CourseGroup?: Maybe<CourseGroup_Mutation_Response>;
  /** update data of the table: "CourseGroupOption" */
  update_CourseGroupOption?: Maybe<CourseGroupOption_Mutation_Response>;
  /** update single row of the table: "CourseGroupOption" */
  update_CourseGroupOption_by_pk?: Maybe<CourseGroupOption>;
  /** update multiples rows of table: "CourseGroupOption" */
  update_CourseGroupOption_many?: Maybe<Array<Maybe<CourseGroupOption_Mutation_Response>>>;
  /** update single row of the table: "CourseGroup" */
  update_CourseGroup_by_pk?: Maybe<CourseGroup>;
  /** update multiples rows of table: "CourseGroup" */
  update_CourseGroup_many?: Maybe<Array<Maybe<CourseGroup_Mutation_Response>>>;
  /** update data of the table: "CourseInstructor" */
  update_CourseInstructor?: Maybe<CourseInstructor_Mutation_Response>;
  /** update single row of the table: "CourseInstructor" */
  update_CourseInstructor_by_pk?: Maybe<CourseInstructor>;
  /** update multiples rows of table: "CourseInstructor" */
  update_CourseInstructor_many?: Maybe<Array<Maybe<CourseInstructor_Mutation_Response>>>;
  /** update data of the table: "CourseLocation" */
  update_CourseLocation?: Maybe<CourseLocation_Mutation_Response>;
  /** update single row of the table: "CourseLocation" */
  update_CourseLocation_by_pk?: Maybe<CourseLocation>;
  /** update multiples rows of table: "CourseLocation" */
  update_CourseLocation_many?: Maybe<Array<Maybe<CourseLocation_Mutation_Response>>>;
  /** update data of the table: "CourseStatus" */
  update_CourseStatus?: Maybe<CourseStatus_Mutation_Response>;
  /** update single row of the table: "CourseStatus" */
  update_CourseStatus_by_pk?: Maybe<CourseStatus>;
  /** update multiples rows of table: "CourseStatus" */
  update_CourseStatus_many?: Maybe<Array<Maybe<CourseStatus_Mutation_Response>>>;
  /** update single row of the table: "Course" */
  update_Course_by_pk?: Maybe<Course>;
  /** update multiples rows of table: "Course" */
  update_Course_many?: Maybe<Array<Maybe<Course_Mutation_Response>>>;
  /** update data of the table: "Employment" */
  update_Employment?: Maybe<Employment_Mutation_Response>;
  /** update single row of the table: "Employment" */
  update_Employment_by_pk?: Maybe<Employment>;
  /** update multiples rows of table: "Employment" */
  update_Employment_many?: Maybe<Array<Maybe<Employment_Mutation_Response>>>;
  /** update data of the table: "Expert" */
  update_Expert?: Maybe<Expert_Mutation_Response>;
  /** update single row of the table: "Expert" */
  update_Expert_by_pk?: Maybe<Expert>;
  /** update multiples rows of table: "Expert" */
  update_Expert_many?: Maybe<Array<Maybe<Expert_Mutation_Response>>>;
  /** update data of the table: "Language" */
  update_Language?: Maybe<Language_Mutation_Response>;
  /** update single row of the table: "Language" */
  update_Language_by_pk?: Maybe<Language>;
  /** update multiples rows of table: "Language" */
  update_Language_many?: Maybe<Array<Maybe<Language_Mutation_Response>>>;
  /** update data of the table: "LocationOption" */
  update_LocationOption?: Maybe<LocationOption_Mutation_Response>;
  /** update single row of the table: "LocationOption" */
  update_LocationOption_by_pk?: Maybe<LocationOption>;
  /** update multiples rows of table: "LocationOption" */
  update_LocationOption_many?: Maybe<Array<Maybe<LocationOption_Mutation_Response>>>;
  /** update data of the table: "MailLog" */
  update_MailLog?: Maybe<MailLog_Mutation_Response>;
  /** update single row of the table: "MailLog" */
  update_MailLog_by_pk?: Maybe<MailLog>;
  /** update multiples rows of table: "MailLog" */
  update_MailLog_many?: Maybe<Array<Maybe<MailLog_Mutation_Response>>>;
  /** update data of the table: "MailStatus" */
  update_MailStatus?: Maybe<MailStatus_Mutation_Response>;
  /** update single row of the table: "MailStatus" */
  update_MailStatus_by_pk?: Maybe<MailStatus>;
  /** update multiples rows of table: "MailStatus" */
  update_MailStatus_many?: Maybe<Array<Maybe<MailStatus_Mutation_Response>>>;
  /** update data of the table: "MailTemplate" */
  update_MailTemplate?: Maybe<MailTemplate_Mutation_Response>;
  /** update single row of the table: "MailTemplate" */
  update_MailTemplate_by_pk?: Maybe<MailTemplate>;
  /** update multiples rows of table: "MailTemplate" */
  update_MailTemplate_many?: Maybe<Array<Maybe<MailTemplate_Mutation_Response>>>;
  /** update data of the table: "MotivationRating" */
  update_MotivationRating?: Maybe<MotivationRating_Mutation_Response>;
  /** update single row of the table: "MotivationRating" */
  update_MotivationRating_by_pk?: Maybe<MotivationRating>;
  /** update multiples rows of table: "MotivationRating" */
  update_MotivationRating_many?: Maybe<Array<Maybe<MotivationRating_Mutation_Response>>>;
  /** update data of the table: "Program" */
  update_Program?: Maybe<Program_Mutation_Response>;
  /** update single row of the table: "Program" */
  update_Program_by_pk?: Maybe<Program>;
  /** update multiples rows of table: "Program" */
  update_Program_many?: Maybe<Array<Maybe<Program_Mutation_Response>>>;
  /** update data of the table: "rentAScientist.RentAScientistConfig" */
  update_RentAScientistConfig?: Maybe<RentAScientistConfig_Mutation_Response>;
  /** update single row of the table: "rentAScientist.RentAScientistConfig" */
  update_RentAScientistConfig_by_pk?: Maybe<RentAScientistConfig>;
  /** update multiples rows of table: "rentAScientist.RentAScientistConfig" */
  update_RentAScientistConfig_many?: Maybe<Array<Maybe<RentAScientistConfig_Mutation_Response>>>;
  /** update data of the table: "rentAScientist.School" */
  update_School?: Maybe<School_Mutation_Response>;
  /** update data of the table: "rentAScientist.SchoolClass" */
  update_SchoolClass?: Maybe<SchoolClass_Mutation_Response>;
  /** update data of the table: "rentAScientist.SchoolClassRequest" */
  update_SchoolClassRequest?: Maybe<SchoolClassRequest_Mutation_Response>;
  /** update single row of the table: "rentAScientist.SchoolClassRequest" */
  update_SchoolClassRequest_by_pk?: Maybe<SchoolClassRequest>;
  /** update multiples rows of table: "rentAScientist.SchoolClassRequest" */
  update_SchoolClassRequest_many?: Maybe<Array<Maybe<SchoolClassRequest_Mutation_Response>>>;
  /** update single row of the table: "rentAScientist.SchoolClass" */
  update_SchoolClass_by_pk?: Maybe<SchoolClass>;
  /** update multiples rows of table: "rentAScientist.SchoolClass" */
  update_SchoolClass_many?: Maybe<Array<Maybe<SchoolClass_Mutation_Response>>>;
  /** update single row of the table: "rentAScientist.School" */
  update_School_by_pk?: Maybe<School>;
  /** update multiples rows of table: "rentAScientist.School" */
  update_School_many?: Maybe<Array<Maybe<School_Mutation_Response>>>;
  /** update data of the table: "rentAScientist.Scientist" */
  update_Scientist?: Maybe<Scientist_Mutation_Response>;
  /** update data of the table: "rentAScientist.ScientistOffer" */
  update_ScientistOffer?: Maybe<ScientistOffer_Mutation_Response>;
  /** update data of the table: "rentAScientist.ScientistOfferRelation" */
  update_ScientistOfferRelation?: Maybe<ScientistOfferRelation_Mutation_Response>;
  /** update single row of the table: "rentAScientist.ScientistOfferRelation" */
  update_ScientistOfferRelation_by_pk?: Maybe<ScientistOfferRelation>;
  /** update multiples rows of table: "rentAScientist.ScientistOfferRelation" */
  update_ScientistOfferRelation_many?: Maybe<Array<Maybe<ScientistOfferRelation_Mutation_Response>>>;
  /** update single row of the table: "rentAScientist.ScientistOffer" */
  update_ScientistOffer_by_pk?: Maybe<ScientistOffer>;
  /** update multiples rows of table: "rentAScientist.ScientistOffer" */
  update_ScientistOffer_many?: Maybe<Array<Maybe<ScientistOffer_Mutation_Response>>>;
  /** update single row of the table: "rentAScientist.Scientist" */
  update_Scientist_by_pk?: Maybe<Scientist>;
  /** update multiples rows of table: "rentAScientist.Scientist" */
  update_Scientist_many?: Maybe<Array<Maybe<Scientist_Mutation_Response>>>;
  /** update data of the table: "Session" */
  update_Session?: Maybe<Session_Mutation_Response>;
  /** update data of the table: "SessionAddress" */
  update_SessionAddress?: Maybe<SessionAddress_Mutation_Response>;
  /** update single row of the table: "SessionAddress" */
  update_SessionAddress_by_pk?: Maybe<SessionAddress>;
  /** update multiples rows of table: "SessionAddress" */
  update_SessionAddress_many?: Maybe<Array<Maybe<SessionAddress_Mutation_Response>>>;
  /** update data of the table: "SessionSpeaker" */
  update_SessionSpeaker?: Maybe<SessionSpeaker_Mutation_Response>;
  /** update single row of the table: "SessionSpeaker" */
  update_SessionSpeaker_by_pk?: Maybe<SessionSpeaker>;
  /** update multiples rows of table: "SessionSpeaker" */
  update_SessionSpeaker_many?: Maybe<Array<Maybe<SessionSpeaker_Mutation_Response>>>;
  /** update single row of the table: "Session" */
  update_Session_by_pk?: Maybe<Session>;
  /** update multiples rows of table: "Session" */
  update_Session_many?: Maybe<Array<Maybe<Session_Mutation_Response>>>;
  /** update data of the table: "rentAScientist.Teacher" */
  update_Teacher?: Maybe<Teacher_Mutation_Response>;
  /** update single row of the table: "rentAScientist.Teacher" */
  update_Teacher_by_pk?: Maybe<Teacher>;
  /** update multiples rows of table: "rentAScientist.Teacher" */
  update_Teacher_many?: Maybe<Array<Maybe<Teacher_Mutation_Response>>>;
  /** update data of the table: "University" */
  update_University?: Maybe<University_Mutation_Response>;
  /** update single row of the table: "University" */
  update_University_by_pk?: Maybe<University>;
  /** update multiples rows of table: "University" */
  update_University_many?: Maybe<Array<Maybe<University_Mutation_Response>>>;
  /** update data of the table: "User" */
  update_User?: Maybe<User_Mutation_Response>;
  /** update data of the table: "UserStatus" */
  update_UserStatus?: Maybe<UserStatus_Mutation_Response>;
  /** update single row of the table: "UserStatus" */
  update_UserStatus_by_pk?: Maybe<UserStatus>;
  /** update multiples rows of table: "UserStatus" */
  update_UserStatus_many?: Maybe<Array<Maybe<UserStatus_Mutation_Response>>>;
  /** update single row of the table: "User" */
  update_User_by_pk?: Maybe<User>;
  /** update multiples rows of table: "User" */
  update_User_many?: Maybe<Array<Maybe<User_Mutation_Response>>>;
  /** update data of the table: "Weekday" */
  update_Weekday?: Maybe<Weekday_Mutation_Response>;
  /** update single row of the table: "Weekday" */
  update_Weekday_by_pk?: Maybe<Weekday>;
  /** update multiples rows of table: "Weekday" */
  update_Weekday_many?: Maybe<Array<Maybe<Weekday_Mutation_Response>>>;
};


/** mutation root */
export type Mutation_RootAnonymizeUserArgs = {
  userId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootCreateCertificateArgs = {
  certificateType: Scalars['String']['input'];
  courseId: Scalars['Int']['input'];
  userIds: Array<Scalars['uuid']['input']>;
};


/** mutation root */
export type Mutation_RootCreateCertificatesArgs = {
  certificateType: Scalars['String']['input'];
  courseId: Scalars['Int']['input'];
  userIds: Array<Scalars['uuid']['input']>;
};


/** mutation root */
export type Mutation_RootDelete_AchievementDocumentationTemplateArgs = {
  where: AchievementDocumentationTemplate_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementDocumentationTemplate_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AchievementOptionArgs = {
  where: AchievementOption_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementOptionCourseArgs = {
  where: AchievementOptionCourse_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementOptionCourse_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AchievementOptionMentorArgs = {
  where: AchievementOptionMentor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementOptionMentor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AchievementOption_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecordArgs = {
  where: AchievementRecord_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecordAuthorArgs = {
  where: AchievementRecordAuthor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecordAuthor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecordRatingArgs = {
  where: AchievementRecordRating_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecordRating_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecordTypeArgs = {
  where: AchievementRecordType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecordType_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AchievementRecord_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AdminArgs = {
  where: Admin_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Admin_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AppSettingsArgs = {
  where: AppSettings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AppSettings_By_PkArgs = {
  appName: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AttendanceArgs = {
  where: Attendance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AttendanceSourceArgs = {
  where: AttendanceSource_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AttendanceSource_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_AttendanceStatusArgs = {
  where: AttendanceStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_AttendanceStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_Attendance_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CertificateTemplateProgramArgs = {
  where: CertificateTemplateProgram_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CertificateTemplateProgram_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CertificateTemplateTextArgs = {
  where: CertificateTemplateText_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CertificateTemplateText_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CertificateTypeArgs = {
  where: CertificateType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CertificateType_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseArgs = {
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseDegreeArgs = {
  where: CourseDegree_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseDegree_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseEnrollmentArgs = {
  where: CourseEnrollment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseEnrollmentStatusArgs = {
  where: CourseEnrollmentStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseEnrollmentStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseEnrollment_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseGroupArgs = {
  where: CourseGroup_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseGroupOptionArgs = {
  where: CourseGroupOption_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseGroupOption_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseGroup_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseInstructorArgs = {
  where: CourseInstructor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseInstructor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseLocationArgs = {
  where: CourseLocation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseLocation_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CourseStatusArgs = {
  where: CourseStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CourseStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_Course_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_EmploymentArgs = {
  where: Employment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employment_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ExpertArgs = {
  where: Expert_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Expert_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_LanguageArgs = {
  where: Language_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Language_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_LocationOptionArgs = {
  where: LocationOption_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_LocationOption_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_MailLogArgs = {
  where: MailLog_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MailLog_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_MailStatusArgs = {
  where: MailStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MailStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_MailTemplateArgs = {
  where: MailTemplate_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MailTemplate_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_MotivationRatingArgs = {
  where: MotivationRating_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MotivationRating_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ProgramArgs = {
  where: Program_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Program_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_RentAScientistConfigArgs = {
  where: RentAScientistConfig_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RentAScientistConfig_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_SchoolArgs = {
  where: School_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_SchoolClassArgs = {
  where: SchoolClass_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_SchoolClassRequestArgs = {
  where: SchoolClassRequest_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_SchoolClassRequest_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_SchoolClass_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_School_By_PkArgs = {
  dstnr: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ScientistArgs = {
  where: Scientist_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ScientistOfferArgs = {
  where: ScientistOffer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ScientistOfferRelationArgs = {
  where: ScientistOfferRelation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ScientistOfferRelation_By_PkArgs = {
  offerId: Scalars['Int']['input'];
  scientistId: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ScientistOffer_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_Scientist_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_SessionArgs = {
  where: Session_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_SessionAddressArgs = {
  where: SessionAddress_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_SessionAddress_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_SessionSpeakerArgs = {
  where: SessionSpeaker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_SessionSpeaker_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_Session_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_TeacherArgs = {
  where: Teacher_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Teacher_By_PkArgs = {
  id: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootDelete_UniversityArgs = {
  where: University_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_University_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_UserArgs = {
  where: User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_UserStatusArgs = {
  where: UserStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_UserStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_User_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_WeekdayArgs = {
  where: Weekday_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Weekday_By_PkArgs = {
  value: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootInsert_AchievementDocumentationTemplateArgs = {
  objects: Array<AchievementDocumentationTemplate_Insert_Input>;
  on_conflict?: InputMaybe<AchievementDocumentationTemplate_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementDocumentationTemplate_OneArgs = {
  object: AchievementDocumentationTemplate_Insert_Input;
  on_conflict?: InputMaybe<AchievementDocumentationTemplate_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementOptionArgs = {
  objects: Array<AchievementOption_Insert_Input>;
  on_conflict?: InputMaybe<AchievementOption_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementOptionCourseArgs = {
  objects: Array<AchievementOptionCourse_Insert_Input>;
  on_conflict?: InputMaybe<AchievementOptionCourse_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementOptionCourse_OneArgs = {
  object: AchievementOptionCourse_Insert_Input;
  on_conflict?: InputMaybe<AchievementOptionCourse_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementOptionMentorArgs = {
  objects: Array<AchievementOptionMentor_Insert_Input>;
  on_conflict?: InputMaybe<AchievementOptionMentor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementOptionMentor_OneArgs = {
  object: AchievementOptionMentor_Insert_Input;
  on_conflict?: InputMaybe<AchievementOptionMentor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementOption_OneArgs = {
  object: AchievementOption_Insert_Input;
  on_conflict?: InputMaybe<AchievementOption_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecordArgs = {
  objects: Array<AchievementRecord_Insert_Input>;
  on_conflict?: InputMaybe<AchievementRecord_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecordAuthorArgs = {
  objects: Array<AchievementRecordAuthor_Insert_Input>;
  on_conflict?: InputMaybe<AchievementRecordAuthor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecordAuthor_OneArgs = {
  object: AchievementRecordAuthor_Insert_Input;
  on_conflict?: InputMaybe<AchievementRecordAuthor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecordRatingArgs = {
  objects: Array<AchievementRecordRating_Insert_Input>;
  on_conflict?: InputMaybe<AchievementRecordRating_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecordRating_OneArgs = {
  object: AchievementRecordRating_Insert_Input;
  on_conflict?: InputMaybe<AchievementRecordRating_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecordTypeArgs = {
  objects: Array<AchievementRecordType_Insert_Input>;
  on_conflict?: InputMaybe<AchievementRecordType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecordType_OneArgs = {
  object: AchievementRecordType_Insert_Input;
  on_conflict?: InputMaybe<AchievementRecordType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AchievementRecord_OneArgs = {
  object: AchievementRecord_Insert_Input;
  on_conflict?: InputMaybe<AchievementRecord_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AdminArgs = {
  objects: Array<Admin_Insert_Input>;
  on_conflict?: InputMaybe<Admin_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Admin_OneArgs = {
  object: Admin_Insert_Input;
  on_conflict?: InputMaybe<Admin_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AppSettingsArgs = {
  objects: Array<AppSettings_Insert_Input>;
  on_conflict?: InputMaybe<AppSettings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AppSettings_OneArgs = {
  object: AppSettings_Insert_Input;
  on_conflict?: InputMaybe<AppSettings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AttendanceArgs = {
  objects: Array<Attendance_Insert_Input>;
  on_conflict?: InputMaybe<Attendance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AttendanceSourceArgs = {
  objects: Array<AttendanceSource_Insert_Input>;
  on_conflict?: InputMaybe<AttendanceSource_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AttendanceSource_OneArgs = {
  object: AttendanceSource_Insert_Input;
  on_conflict?: InputMaybe<AttendanceSource_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AttendanceStatusArgs = {
  objects: Array<AttendanceStatus_Insert_Input>;
  on_conflict?: InputMaybe<AttendanceStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_AttendanceStatus_OneArgs = {
  object: AttendanceStatus_Insert_Input;
  on_conflict?: InputMaybe<AttendanceStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_OneArgs = {
  object: Attendance_Insert_Input;
  on_conflict?: InputMaybe<Attendance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CertificateTemplateProgramArgs = {
  objects: Array<CertificateTemplateProgram_Insert_Input>;
  on_conflict?: InputMaybe<CertificateTemplateProgram_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CertificateTemplateProgram_OneArgs = {
  object: CertificateTemplateProgram_Insert_Input;
  on_conflict?: InputMaybe<CertificateTemplateProgram_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CertificateTemplateTextArgs = {
  objects: Array<CertificateTemplateText_Insert_Input>;
  on_conflict?: InputMaybe<CertificateTemplateText_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CertificateTemplateText_OneArgs = {
  object: CertificateTemplateText_Insert_Input;
  on_conflict?: InputMaybe<CertificateTemplateText_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CertificateTypeArgs = {
  objects: Array<CertificateType_Insert_Input>;
  on_conflict?: InputMaybe<CertificateType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CertificateType_OneArgs = {
  object: CertificateType_Insert_Input;
  on_conflict?: InputMaybe<CertificateType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseArgs = {
  objects: Array<Course_Insert_Input>;
  on_conflict?: InputMaybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseDegreeArgs = {
  objects: Array<CourseDegree_Insert_Input>;
  on_conflict?: InputMaybe<CourseDegree_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseDegree_OneArgs = {
  object: CourseDegree_Insert_Input;
  on_conflict?: InputMaybe<CourseDegree_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseEnrollmentArgs = {
  objects: Array<CourseEnrollment_Insert_Input>;
  on_conflict?: InputMaybe<CourseEnrollment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseEnrollmentStatusArgs = {
  objects: Array<CourseEnrollmentStatus_Insert_Input>;
  on_conflict?: InputMaybe<CourseEnrollmentStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseEnrollmentStatus_OneArgs = {
  object: CourseEnrollmentStatus_Insert_Input;
  on_conflict?: InputMaybe<CourseEnrollmentStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseEnrollment_OneArgs = {
  object: CourseEnrollment_Insert_Input;
  on_conflict?: InputMaybe<CourseEnrollment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseGroupArgs = {
  objects: Array<CourseGroup_Insert_Input>;
  on_conflict?: InputMaybe<CourseGroup_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseGroupOptionArgs = {
  objects: Array<CourseGroupOption_Insert_Input>;
  on_conflict?: InputMaybe<CourseGroupOption_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseGroupOption_OneArgs = {
  object: CourseGroupOption_Insert_Input;
  on_conflict?: InputMaybe<CourseGroupOption_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseGroup_OneArgs = {
  object: CourseGroup_Insert_Input;
  on_conflict?: InputMaybe<CourseGroup_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseInstructorArgs = {
  objects: Array<CourseInstructor_Insert_Input>;
  on_conflict?: InputMaybe<CourseInstructor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseInstructor_OneArgs = {
  object: CourseInstructor_Insert_Input;
  on_conflict?: InputMaybe<CourseInstructor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseLocationArgs = {
  objects: Array<CourseLocation_Insert_Input>;
  on_conflict?: InputMaybe<CourseLocation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseLocation_OneArgs = {
  object: CourseLocation_Insert_Input;
  on_conflict?: InputMaybe<CourseLocation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseStatusArgs = {
  objects: Array<CourseStatus_Insert_Input>;
  on_conflict?: InputMaybe<CourseStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CourseStatus_OneArgs = {
  object: CourseStatus_Insert_Input;
  on_conflict?: InputMaybe<CourseStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Course_OneArgs = {
  object: Course_Insert_Input;
  on_conflict?: InputMaybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EmploymentArgs = {
  objects: Array<Employment_Insert_Input>;
  on_conflict?: InputMaybe<Employment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employment_OneArgs = {
  object: Employment_Insert_Input;
  on_conflict?: InputMaybe<Employment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ExpertArgs = {
  objects: Array<Expert_Insert_Input>;
  on_conflict?: InputMaybe<Expert_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Expert_OneArgs = {
  object: Expert_Insert_Input;
  on_conflict?: InputMaybe<Expert_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_LanguageArgs = {
  objects: Array<Language_Insert_Input>;
  on_conflict?: InputMaybe<Language_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Language_OneArgs = {
  object: Language_Insert_Input;
  on_conflict?: InputMaybe<Language_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_LocationOptionArgs = {
  objects: Array<LocationOption_Insert_Input>;
  on_conflict?: InputMaybe<LocationOption_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_LocationOption_OneArgs = {
  object: LocationOption_Insert_Input;
  on_conflict?: InputMaybe<LocationOption_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MailLogArgs = {
  objects: Array<MailLog_Insert_Input>;
  on_conflict?: InputMaybe<MailLog_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MailLog_OneArgs = {
  object: MailLog_Insert_Input;
  on_conflict?: InputMaybe<MailLog_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MailStatusArgs = {
  objects: Array<MailStatus_Insert_Input>;
  on_conflict?: InputMaybe<MailStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MailStatus_OneArgs = {
  object: MailStatus_Insert_Input;
  on_conflict?: InputMaybe<MailStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MailTemplateArgs = {
  objects: Array<MailTemplate_Insert_Input>;
  on_conflict?: InputMaybe<MailTemplate_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MailTemplate_OneArgs = {
  object: MailTemplate_Insert_Input;
  on_conflict?: InputMaybe<MailTemplate_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MotivationRatingArgs = {
  objects: Array<MotivationRating_Insert_Input>;
  on_conflict?: InputMaybe<MotivationRating_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MotivationRating_OneArgs = {
  object: MotivationRating_Insert_Input;
  on_conflict?: InputMaybe<MotivationRating_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ProgramArgs = {
  objects: Array<Program_Insert_Input>;
  on_conflict?: InputMaybe<Program_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Program_OneArgs = {
  object: Program_Insert_Input;
  on_conflict?: InputMaybe<Program_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RentAScientistConfigArgs = {
  objects: Array<RentAScientistConfig_Insert_Input>;
  on_conflict?: InputMaybe<RentAScientistConfig_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RentAScientistConfig_OneArgs = {
  object: RentAScientistConfig_Insert_Input;
  on_conflict?: InputMaybe<RentAScientistConfig_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SchoolArgs = {
  objects: Array<School_Insert_Input>;
  on_conflict?: InputMaybe<School_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SchoolClassArgs = {
  objects: Array<SchoolClass_Insert_Input>;
  on_conflict?: InputMaybe<SchoolClass_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SchoolClassRequestArgs = {
  objects: Array<SchoolClassRequest_Insert_Input>;
  on_conflict?: InputMaybe<SchoolClassRequest_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SchoolClassRequest_OneArgs = {
  object: SchoolClassRequest_Insert_Input;
  on_conflict?: InputMaybe<SchoolClassRequest_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SchoolClass_OneArgs = {
  object: SchoolClass_Insert_Input;
  on_conflict?: InputMaybe<SchoolClass_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_School_OneArgs = {
  object: School_Insert_Input;
  on_conflict?: InputMaybe<School_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ScientistArgs = {
  objects: Array<Scientist_Insert_Input>;
  on_conflict?: InputMaybe<Scientist_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ScientistOfferArgs = {
  objects: Array<ScientistOffer_Insert_Input>;
  on_conflict?: InputMaybe<ScientistOffer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ScientistOfferRelationArgs = {
  objects: Array<ScientistOfferRelation_Insert_Input>;
  on_conflict?: InputMaybe<ScientistOfferRelation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ScientistOfferRelation_OneArgs = {
  object: ScientistOfferRelation_Insert_Input;
  on_conflict?: InputMaybe<ScientistOfferRelation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ScientistOffer_OneArgs = {
  object: ScientistOffer_Insert_Input;
  on_conflict?: InputMaybe<ScientistOffer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Scientist_OneArgs = {
  object: Scientist_Insert_Input;
  on_conflict?: InputMaybe<Scientist_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SessionArgs = {
  objects: Array<Session_Insert_Input>;
  on_conflict?: InputMaybe<Session_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SessionAddressArgs = {
  objects: Array<SessionAddress_Insert_Input>;
  on_conflict?: InputMaybe<SessionAddress_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SessionAddress_OneArgs = {
  object: SessionAddress_Insert_Input;
  on_conflict?: InputMaybe<SessionAddress_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SessionSpeakerArgs = {
  objects: Array<SessionSpeaker_Insert_Input>;
  on_conflict?: InputMaybe<SessionSpeaker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SessionSpeaker_OneArgs = {
  object: SessionSpeaker_Insert_Input;
  on_conflict?: InputMaybe<SessionSpeaker_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Session_OneArgs = {
  object: Session_Insert_Input;
  on_conflict?: InputMaybe<Session_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TeacherArgs = {
  objects: Array<Teacher_Insert_Input>;
  on_conflict?: InputMaybe<Teacher_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Teacher_OneArgs = {
  object: Teacher_Insert_Input;
  on_conflict?: InputMaybe<Teacher_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UniversityArgs = {
  objects: Array<University_Insert_Input>;
  on_conflict?: InputMaybe<University_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_University_OneArgs = {
  object: University_Insert_Input;
  on_conflict?: InputMaybe<University_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UserArgs = {
  objects: Array<User_Insert_Input>;
  on_conflict?: InputMaybe<User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UserStatusArgs = {
  objects: Array<UserStatus_Insert_Input>;
  on_conflict?: InputMaybe<UserStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UserStatus_OneArgs = {
  object: UserStatus_Insert_Input;
  on_conflict?: InputMaybe<UserStatus_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_User_OneArgs = {
  object: User_Insert_Input;
  on_conflict?: InputMaybe<User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_WeekdayArgs = {
  objects: Array<Weekday_Insert_Input>;
  on_conflict?: InputMaybe<Weekday_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Weekday_OneArgs = {
  object: Weekday_Insert_Input;
  on_conflict?: InputMaybe<Weekday_On_Conflict>;
};


/** mutation root */
export type Mutation_RootSaveAchievementCertificateTemplateArgs = {
  base64file: Scalars['String']['input'];
  filename: Scalars['String']['input'];
  programid: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootSaveAchievementDocumentationTemplateArgs = {
  achievementDocumentationTemplateId: Scalars['Int']['input'];
  base64file: Scalars['String']['input'];
  filename: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootSaveAchievementRecordCoverImageArgs = {
  achievementRecordId: Scalars['Int']['input'];
  base64file: Scalars['String']['input'];
  filename: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootSaveAchievementRecordDocumentationArgs = {
  achievementRecordId: Scalars['Int']['input'];
  base64file: Scalars['String']['input'];
  filename: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootSaveAttendanceCertificateTemplateArgs = {
  base64file: Scalars['String']['input'];
  filename: Scalars['String']['input'];
  programid: Scalars['Int']['input'];
};


/** mutation root */
export type Mutation_RootSaveCourseImageArgs = {
  base64file: Scalars['String']['input'];
  courseid: Scalars['Int']['input'];
  filename: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootSaveUserProfileImageArgs = {
  base64file: Scalars['String']['input'];
  filename: Scalars['String']['input'];
  userid: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootUpdateFromKeycloakArgs = {
  userid: Scalars['ID']['input'];
};


/** mutation root */
export type Mutation_RootUpdate_AchievementDocumentationTemplateArgs = {
  _inc?: InputMaybe<AchievementDocumentationTemplate_Inc_Input>;
  _set?: InputMaybe<AchievementDocumentationTemplate_Set_Input>;
  where: AchievementDocumentationTemplate_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementDocumentationTemplate_By_PkArgs = {
  _inc?: InputMaybe<AchievementDocumentationTemplate_Inc_Input>;
  _set?: InputMaybe<AchievementDocumentationTemplate_Set_Input>;
  pk_columns: AchievementDocumentationTemplate_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementDocumentationTemplate_ManyArgs = {
  updates: Array<AchievementDocumentationTemplate_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOptionArgs = {
  _inc?: InputMaybe<AchievementOption_Inc_Input>;
  _set?: InputMaybe<AchievementOption_Set_Input>;
  where: AchievementOption_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOptionCourseArgs = {
  _inc?: InputMaybe<AchievementOptionCourse_Inc_Input>;
  _set?: InputMaybe<AchievementOptionCourse_Set_Input>;
  where: AchievementOptionCourse_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOptionCourse_By_PkArgs = {
  _inc?: InputMaybe<AchievementOptionCourse_Inc_Input>;
  _set?: InputMaybe<AchievementOptionCourse_Set_Input>;
  pk_columns: AchievementOptionCourse_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOptionCourse_ManyArgs = {
  updates: Array<AchievementOptionCourse_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOptionMentorArgs = {
  _inc?: InputMaybe<AchievementOptionMentor_Inc_Input>;
  _set?: InputMaybe<AchievementOptionMentor_Set_Input>;
  where: AchievementOptionMentor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOptionMentor_By_PkArgs = {
  _inc?: InputMaybe<AchievementOptionMentor_Inc_Input>;
  _set?: InputMaybe<AchievementOptionMentor_Set_Input>;
  pk_columns: AchievementOptionMentor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOptionMentor_ManyArgs = {
  updates: Array<AchievementOptionMentor_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOption_By_PkArgs = {
  _inc?: InputMaybe<AchievementOption_Inc_Input>;
  _set?: InputMaybe<AchievementOption_Set_Input>;
  pk_columns: AchievementOption_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementOption_ManyArgs = {
  updates: Array<AchievementOption_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordArgs = {
  _inc?: InputMaybe<AchievementRecord_Inc_Input>;
  _set?: InputMaybe<AchievementRecord_Set_Input>;
  where: AchievementRecord_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordAuthorArgs = {
  _inc?: InputMaybe<AchievementRecordAuthor_Inc_Input>;
  _set?: InputMaybe<AchievementRecordAuthor_Set_Input>;
  where: AchievementRecordAuthor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordAuthor_By_PkArgs = {
  _inc?: InputMaybe<AchievementRecordAuthor_Inc_Input>;
  _set?: InputMaybe<AchievementRecordAuthor_Set_Input>;
  pk_columns: AchievementRecordAuthor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordAuthor_ManyArgs = {
  updates: Array<AchievementRecordAuthor_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordRatingArgs = {
  _set?: InputMaybe<AchievementRecordRating_Set_Input>;
  where: AchievementRecordRating_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordRating_By_PkArgs = {
  _set?: InputMaybe<AchievementRecordRating_Set_Input>;
  pk_columns: AchievementRecordRating_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordRating_ManyArgs = {
  updates: Array<AchievementRecordRating_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordTypeArgs = {
  _set?: InputMaybe<AchievementRecordType_Set_Input>;
  where: AchievementRecordType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordType_By_PkArgs = {
  _set?: InputMaybe<AchievementRecordType_Set_Input>;
  pk_columns: AchievementRecordType_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecordType_ManyArgs = {
  updates: Array<AchievementRecordType_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecord_By_PkArgs = {
  _inc?: InputMaybe<AchievementRecord_Inc_Input>;
  _set?: InputMaybe<AchievementRecord_Set_Input>;
  pk_columns: AchievementRecord_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AchievementRecord_ManyArgs = {
  updates: Array<AchievementRecord_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AdminArgs = {
  _inc?: InputMaybe<Admin_Inc_Input>;
  _set?: InputMaybe<Admin_Set_Input>;
  where: Admin_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Admin_By_PkArgs = {
  _inc?: InputMaybe<Admin_Inc_Input>;
  _set?: InputMaybe<Admin_Set_Input>;
  pk_columns: Admin_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Admin_ManyArgs = {
  updates: Array<Admin_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AppSettingsArgs = {
  _set?: InputMaybe<AppSettings_Set_Input>;
  where: AppSettings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AppSettings_By_PkArgs = {
  _set?: InputMaybe<AppSettings_Set_Input>;
  pk_columns: AppSettings_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AppSettings_ManyArgs = {
  updates: Array<AppSettings_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceArgs = {
  _inc?: InputMaybe<Attendance_Inc_Input>;
  _set?: InputMaybe<Attendance_Set_Input>;
  where: Attendance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceSourceArgs = {
  _set?: InputMaybe<AttendanceSource_Set_Input>;
  where: AttendanceSource_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceSource_By_PkArgs = {
  _set?: InputMaybe<AttendanceSource_Set_Input>;
  pk_columns: AttendanceSource_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceSource_ManyArgs = {
  updates: Array<AttendanceSource_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceStatusArgs = {
  _set?: InputMaybe<AttendanceStatus_Set_Input>;
  where: AttendanceStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceStatus_By_PkArgs = {
  _set?: InputMaybe<AttendanceStatus_Set_Input>;
  pk_columns: AttendanceStatus_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceStatus_ManyArgs = {
  updates: Array<AttendanceStatus_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_By_PkArgs = {
  _inc?: InputMaybe<Attendance_Inc_Input>;
  _set?: InputMaybe<Attendance_Set_Input>;
  pk_columns: Attendance_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_ManyArgs = {
  updates: Array<Attendance_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateTemplateProgramArgs = {
  _inc?: InputMaybe<CertificateTemplateProgram_Inc_Input>;
  _set?: InputMaybe<CertificateTemplateProgram_Set_Input>;
  where: CertificateTemplateProgram_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateTemplateProgram_By_PkArgs = {
  _inc?: InputMaybe<CertificateTemplateProgram_Inc_Input>;
  _set?: InputMaybe<CertificateTemplateProgram_Set_Input>;
  pk_columns: CertificateTemplateProgram_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateTemplateProgram_ManyArgs = {
  updates: Array<CertificateTemplateProgram_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateTemplateTextArgs = {
  _inc?: InputMaybe<CertificateTemplateText_Inc_Input>;
  _set?: InputMaybe<CertificateTemplateText_Set_Input>;
  where: CertificateTemplateText_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateTemplateText_By_PkArgs = {
  _inc?: InputMaybe<CertificateTemplateText_Inc_Input>;
  _set?: InputMaybe<CertificateTemplateText_Set_Input>;
  pk_columns: CertificateTemplateText_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateTemplateText_ManyArgs = {
  updates: Array<CertificateTemplateText_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateTypeArgs = {
  _set?: InputMaybe<CertificateType_Set_Input>;
  where: CertificateType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateType_By_PkArgs = {
  _set?: InputMaybe<CertificateType_Set_Input>;
  pk_columns: CertificateType_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CertificateType_ManyArgs = {
  updates: Array<CertificateType_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseArgs = {
  _inc?: InputMaybe<Course_Inc_Input>;
  _set?: InputMaybe<Course_Set_Input>;
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseDegreeArgs = {
  _inc?: InputMaybe<CourseDegree_Inc_Input>;
  _set?: InputMaybe<CourseDegree_Set_Input>;
  where: CourseDegree_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseDegree_By_PkArgs = {
  _inc?: InputMaybe<CourseDegree_Inc_Input>;
  _set?: InputMaybe<CourseDegree_Set_Input>;
  pk_columns: CourseDegree_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseDegree_ManyArgs = {
  updates: Array<CourseDegree_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseEnrollmentArgs = {
  _inc?: InputMaybe<CourseEnrollment_Inc_Input>;
  _set?: InputMaybe<CourseEnrollment_Set_Input>;
  where: CourseEnrollment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseEnrollmentStatusArgs = {
  _set?: InputMaybe<CourseEnrollmentStatus_Set_Input>;
  where: CourseEnrollmentStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseEnrollmentStatus_By_PkArgs = {
  _set?: InputMaybe<CourseEnrollmentStatus_Set_Input>;
  pk_columns: CourseEnrollmentStatus_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseEnrollmentStatus_ManyArgs = {
  updates: Array<CourseEnrollmentStatus_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseEnrollment_By_PkArgs = {
  _inc?: InputMaybe<CourseEnrollment_Inc_Input>;
  _set?: InputMaybe<CourseEnrollment_Set_Input>;
  pk_columns: CourseEnrollment_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseEnrollment_ManyArgs = {
  updates: Array<CourseEnrollment_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseGroupArgs = {
  _inc?: InputMaybe<CourseGroup_Inc_Input>;
  _set?: InputMaybe<CourseGroup_Set_Input>;
  where: CourseGroup_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseGroupOptionArgs = {
  _inc?: InputMaybe<CourseGroupOption_Inc_Input>;
  _set?: InputMaybe<CourseGroupOption_Set_Input>;
  where: CourseGroupOption_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseGroupOption_By_PkArgs = {
  _inc?: InputMaybe<CourseGroupOption_Inc_Input>;
  _set?: InputMaybe<CourseGroupOption_Set_Input>;
  pk_columns: CourseGroupOption_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseGroupOption_ManyArgs = {
  updates: Array<CourseGroupOption_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseGroup_By_PkArgs = {
  _inc?: InputMaybe<CourseGroup_Inc_Input>;
  _set?: InputMaybe<CourseGroup_Set_Input>;
  pk_columns: CourseGroup_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseGroup_ManyArgs = {
  updates: Array<CourseGroup_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseInstructorArgs = {
  _inc?: InputMaybe<CourseInstructor_Inc_Input>;
  _set?: InputMaybe<CourseInstructor_Set_Input>;
  where: CourseInstructor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseInstructor_By_PkArgs = {
  _inc?: InputMaybe<CourseInstructor_Inc_Input>;
  _set?: InputMaybe<CourseInstructor_Set_Input>;
  pk_columns: CourseInstructor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseInstructor_ManyArgs = {
  updates: Array<CourseInstructor_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseLocationArgs = {
  _inc?: InputMaybe<CourseLocation_Inc_Input>;
  _set?: InputMaybe<CourseLocation_Set_Input>;
  where: CourseLocation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseLocation_By_PkArgs = {
  _inc?: InputMaybe<CourseLocation_Inc_Input>;
  _set?: InputMaybe<CourseLocation_Set_Input>;
  pk_columns: CourseLocation_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseLocation_ManyArgs = {
  updates: Array<CourseLocation_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CourseStatusArgs = {
  _set?: InputMaybe<CourseStatus_Set_Input>;
  where: CourseStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CourseStatus_By_PkArgs = {
  _set?: InputMaybe<CourseStatus_Set_Input>;
  pk_columns: CourseStatus_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CourseStatus_ManyArgs = {
  updates: Array<CourseStatus_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Course_By_PkArgs = {
  _inc?: InputMaybe<Course_Inc_Input>;
  _set?: InputMaybe<Course_Set_Input>;
  pk_columns: Course_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Course_ManyArgs = {
  updates: Array<Course_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_EmploymentArgs = {
  _set?: InputMaybe<Employment_Set_Input>;
  where: Employment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employment_By_PkArgs = {
  _set?: InputMaybe<Employment_Set_Input>;
  pk_columns: Employment_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employment_ManyArgs = {
  updates: Array<Employment_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ExpertArgs = {
  _inc?: InputMaybe<Expert_Inc_Input>;
  _set?: InputMaybe<Expert_Set_Input>;
  where: Expert_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Expert_By_PkArgs = {
  _inc?: InputMaybe<Expert_Inc_Input>;
  _set?: InputMaybe<Expert_Set_Input>;
  pk_columns: Expert_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Expert_ManyArgs = {
  updates: Array<Expert_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_LanguageArgs = {
  _set?: InputMaybe<Language_Set_Input>;
  where: Language_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Language_By_PkArgs = {
  _set?: InputMaybe<Language_Set_Input>;
  pk_columns: Language_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Language_ManyArgs = {
  updates: Array<Language_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_LocationOptionArgs = {
  _set?: InputMaybe<LocationOption_Set_Input>;
  where: LocationOption_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_LocationOption_By_PkArgs = {
  _set?: InputMaybe<LocationOption_Set_Input>;
  pk_columns: LocationOption_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_LocationOption_ManyArgs = {
  updates: Array<LocationOption_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MailLogArgs = {
  _inc?: InputMaybe<MailLog_Inc_Input>;
  _set?: InputMaybe<MailLog_Set_Input>;
  where: MailLog_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MailLog_By_PkArgs = {
  _inc?: InputMaybe<MailLog_Inc_Input>;
  _set?: InputMaybe<MailLog_Set_Input>;
  pk_columns: MailLog_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_MailLog_ManyArgs = {
  updates: Array<MailLog_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MailStatusArgs = {
  _set?: InputMaybe<MailStatus_Set_Input>;
  where: MailStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MailStatus_By_PkArgs = {
  _set?: InputMaybe<MailStatus_Set_Input>;
  pk_columns: MailStatus_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_MailStatus_ManyArgs = {
  updates: Array<MailStatus_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MailTemplateArgs = {
  _inc?: InputMaybe<MailTemplate_Inc_Input>;
  _set?: InputMaybe<MailTemplate_Set_Input>;
  where: MailTemplate_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MailTemplate_By_PkArgs = {
  _inc?: InputMaybe<MailTemplate_Inc_Input>;
  _set?: InputMaybe<MailTemplate_Set_Input>;
  pk_columns: MailTemplate_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_MailTemplate_ManyArgs = {
  updates: Array<MailTemplate_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MotivationRatingArgs = {
  _set?: InputMaybe<MotivationRating_Set_Input>;
  where: MotivationRating_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MotivationRating_By_PkArgs = {
  _set?: InputMaybe<MotivationRating_Set_Input>;
  pk_columns: MotivationRating_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_MotivationRating_ManyArgs = {
  updates: Array<MotivationRating_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ProgramArgs = {
  _inc?: InputMaybe<Program_Inc_Input>;
  _set?: InputMaybe<Program_Set_Input>;
  where: Program_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Program_By_PkArgs = {
  _inc?: InputMaybe<Program_Inc_Input>;
  _set?: InputMaybe<Program_Set_Input>;
  pk_columns: Program_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Program_ManyArgs = {
  updates: Array<Program_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_RentAScientistConfigArgs = {
  _inc?: InputMaybe<RentAScientistConfig_Inc_Input>;
  _set?: InputMaybe<RentAScientistConfig_Set_Input>;
  where: RentAScientistConfig_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RentAScientistConfig_By_PkArgs = {
  _inc?: InputMaybe<RentAScientistConfig_Inc_Input>;
  _set?: InputMaybe<RentAScientistConfig_Set_Input>;
  pk_columns: RentAScientistConfig_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_RentAScientistConfig_ManyArgs = {
  updates: Array<RentAScientistConfig_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SchoolArgs = {
  _set?: InputMaybe<School_Set_Input>;
  where: School_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_SchoolClassArgs = {
  _inc?: InputMaybe<SchoolClass_Inc_Input>;
  _set?: InputMaybe<SchoolClass_Set_Input>;
  where: SchoolClass_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_SchoolClassRequestArgs = {
  _inc?: InputMaybe<SchoolClassRequest_Inc_Input>;
  _set?: InputMaybe<SchoolClassRequest_Set_Input>;
  where: SchoolClassRequest_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_SchoolClassRequest_By_PkArgs = {
  _inc?: InputMaybe<SchoolClassRequest_Inc_Input>;
  _set?: InputMaybe<SchoolClassRequest_Set_Input>;
  pk_columns: SchoolClassRequest_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_SchoolClassRequest_ManyArgs = {
  updates: Array<SchoolClassRequest_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SchoolClass_By_PkArgs = {
  _inc?: InputMaybe<SchoolClass_Inc_Input>;
  _set?: InputMaybe<SchoolClass_Set_Input>;
  pk_columns: SchoolClass_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_SchoolClass_ManyArgs = {
  updates: Array<SchoolClass_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_School_By_PkArgs = {
  _set?: InputMaybe<School_Set_Input>;
  pk_columns: School_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_School_ManyArgs = {
  updates: Array<School_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ScientistArgs = {
  _inc?: InputMaybe<Scientist_Inc_Input>;
  _set?: InputMaybe<Scientist_Set_Input>;
  where: Scientist_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ScientistOfferArgs = {
  _inc?: InputMaybe<ScientistOffer_Inc_Input>;
  _set?: InputMaybe<ScientistOffer_Set_Input>;
  where: ScientistOffer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ScientistOfferRelationArgs = {
  _inc?: InputMaybe<ScientistOfferRelation_Inc_Input>;
  _set?: InputMaybe<ScientistOfferRelation_Set_Input>;
  where: ScientistOfferRelation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ScientistOfferRelation_By_PkArgs = {
  _inc?: InputMaybe<ScientistOfferRelation_Inc_Input>;
  _set?: InputMaybe<ScientistOfferRelation_Set_Input>;
  pk_columns: ScientistOfferRelation_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ScientistOfferRelation_ManyArgs = {
  updates: Array<ScientistOfferRelation_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ScientistOffer_By_PkArgs = {
  _inc?: InputMaybe<ScientistOffer_Inc_Input>;
  _set?: InputMaybe<ScientistOffer_Set_Input>;
  pk_columns: ScientistOffer_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ScientistOffer_ManyArgs = {
  updates: Array<ScientistOffer_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Scientist_By_PkArgs = {
  _inc?: InputMaybe<Scientist_Inc_Input>;
  _set?: InputMaybe<Scientist_Set_Input>;
  pk_columns: Scientist_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Scientist_ManyArgs = {
  updates: Array<Scientist_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SessionArgs = {
  _inc?: InputMaybe<Session_Inc_Input>;
  _set?: InputMaybe<Session_Set_Input>;
  where: Session_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_SessionAddressArgs = {
  _inc?: InputMaybe<SessionAddress_Inc_Input>;
  _set?: InputMaybe<SessionAddress_Set_Input>;
  where: SessionAddress_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_SessionAddress_By_PkArgs = {
  _inc?: InputMaybe<SessionAddress_Inc_Input>;
  _set?: InputMaybe<SessionAddress_Set_Input>;
  pk_columns: SessionAddress_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_SessionAddress_ManyArgs = {
  updates: Array<SessionAddress_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SessionSpeakerArgs = {
  _inc?: InputMaybe<SessionSpeaker_Inc_Input>;
  _set?: InputMaybe<SessionSpeaker_Set_Input>;
  where: SessionSpeaker_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_SessionSpeaker_By_PkArgs = {
  _inc?: InputMaybe<SessionSpeaker_Inc_Input>;
  _set?: InputMaybe<SessionSpeaker_Set_Input>;
  pk_columns: SessionSpeaker_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_SessionSpeaker_ManyArgs = {
  updates: Array<SessionSpeaker_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Session_By_PkArgs = {
  _inc?: InputMaybe<Session_Inc_Input>;
  _set?: InputMaybe<Session_Set_Input>;
  pk_columns: Session_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Session_ManyArgs = {
  updates: Array<Session_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_TeacherArgs = {
  _inc?: InputMaybe<Teacher_Inc_Input>;
  _set?: InputMaybe<Teacher_Set_Input>;
  where: Teacher_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Teacher_By_PkArgs = {
  _inc?: InputMaybe<Teacher_Inc_Input>;
  _set?: InputMaybe<Teacher_Set_Input>;
  pk_columns: Teacher_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Teacher_ManyArgs = {
  updates: Array<Teacher_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_UniversityArgs = {
  _set?: InputMaybe<University_Set_Input>;
  where: University_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_University_By_PkArgs = {
  _set?: InputMaybe<University_Set_Input>;
  pk_columns: University_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_University_ManyArgs = {
  updates: Array<University_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_UserArgs = {
  _inc?: InputMaybe<User_Inc_Input>;
  _set?: InputMaybe<User_Set_Input>;
  where: User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_UserStatusArgs = {
  _set?: InputMaybe<UserStatus_Set_Input>;
  where: UserStatus_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_UserStatus_By_PkArgs = {
  _set?: InputMaybe<UserStatus_Set_Input>;
  pk_columns: UserStatus_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_UserStatus_ManyArgs = {
  updates: Array<UserStatus_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_User_By_PkArgs = {
  _inc?: InputMaybe<User_Inc_Input>;
  _set?: InputMaybe<User_Set_Input>;
  pk_columns: User_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_User_ManyArgs = {
  updates: Array<User_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_WeekdayArgs = {
  _set?: InputMaybe<Weekday_Set_Input>;
  where: Weekday_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Weekday_By_PkArgs = {
  _set?: InputMaybe<Weekday_Set_Input>;
  pk_columns: Weekday_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Weekday_ManyArgs = {
  updates: Array<Weekday_Updates>;
};

/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['numeric']['input']>;
  _gt?: InputMaybe<Scalars['numeric']['input']>;
  _gte?: InputMaybe<Scalars['numeric']['input']>;
  _in?: InputMaybe<Array<Scalars['numeric']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['numeric']['input']>;
  _lte?: InputMaybe<Scalars['numeric']['input']>;
  _neq?: InputMaybe<Scalars['numeric']['input']>;
  _nin?: InputMaybe<Array<Scalars['numeric']['input']>>;
};

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc = 'desc',
  /** in descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

export type Query_Root = {
  __typename?: 'query_root';
  /** fetch data from the table: "AchievementDocumentationTemplate" */
  AchievementDocumentationTemplate: Array<AchievementDocumentationTemplate>;
  /** fetch aggregated fields from the table: "AchievementDocumentationTemplate" */
  AchievementDocumentationTemplate_aggregate: AchievementDocumentationTemplate_Aggregate;
  /** fetch data from the table: "AchievementDocumentationTemplate" using primary key columns */
  AchievementDocumentationTemplate_by_pk?: Maybe<AchievementDocumentationTemplate>;
  /** fetch data from the table: "AchievementOption" */
  AchievementOption: Array<AchievementOption>;
  /** fetch data from the table: "AchievementOptionCourse" */
  AchievementOptionCourse: Array<AchievementOptionCourse>;
  /** fetch aggregated fields from the table: "AchievementOptionCourse" */
  AchievementOptionCourse_aggregate: AchievementOptionCourse_Aggregate;
  /** fetch data from the table: "AchievementOptionCourse" using primary key columns */
  AchievementOptionCourse_by_pk?: Maybe<AchievementOptionCourse>;
  /** fetch data from the table: "AchievementOptionMentor" */
  AchievementOptionMentor: Array<AchievementOptionMentor>;
  /** fetch aggregated fields from the table: "AchievementOptionMentor" */
  AchievementOptionMentor_aggregate: AchievementOptionMentor_Aggregate;
  /** fetch data from the table: "AchievementOptionMentor" using primary key columns */
  AchievementOptionMentor_by_pk?: Maybe<AchievementOptionMentor>;
  /** fetch aggregated fields from the table: "AchievementOption" */
  AchievementOption_aggregate: AchievementOption_Aggregate;
  /** fetch data from the table: "AchievementOption" using primary key columns */
  AchievementOption_by_pk?: Maybe<AchievementOption>;
  /** fetch data from the table: "AchievementRecord" */
  AchievementRecord: Array<AchievementRecord>;
  /** fetch data from the table: "AchievementRecordAuthor" */
  AchievementRecordAuthor: Array<AchievementRecordAuthor>;
  /** fetch aggregated fields from the table: "AchievementRecordAuthor" */
  AchievementRecordAuthor_aggregate: AchievementRecordAuthor_Aggregate;
  /** fetch data from the table: "AchievementRecordAuthor" using primary key columns */
  AchievementRecordAuthor_by_pk?: Maybe<AchievementRecordAuthor>;
  /** fetch data from the table: "AchievementRecordRating" */
  AchievementRecordRating: Array<AchievementRecordRating>;
  /** fetch aggregated fields from the table: "AchievementRecordRating" */
  AchievementRecordRating_aggregate: AchievementRecordRating_Aggregate;
  /** fetch data from the table: "AchievementRecordRating" using primary key columns */
  AchievementRecordRating_by_pk?: Maybe<AchievementRecordRating>;
  /** fetch data from the table: "AchievementRecordType" */
  AchievementRecordType: Array<AchievementRecordType>;
  /** fetch aggregated fields from the table: "AchievementRecordType" */
  AchievementRecordType_aggregate: AchievementRecordType_Aggregate;
  /** fetch data from the table: "AchievementRecordType" using primary key columns */
  AchievementRecordType_by_pk?: Maybe<AchievementRecordType>;
  /** fetch aggregated fields from the table: "AchievementRecord" */
  AchievementRecord_aggregate: AchievementRecord_Aggregate;
  /** fetch data from the table: "AchievementRecord" using primary key columns */
  AchievementRecord_by_pk?: Maybe<AchievementRecord>;
  /** fetch data from the table: "Admin" */
  Admin: Array<Admin>;
  /** fetch aggregated fields from the table: "Admin" */
  Admin_aggregate: Admin_Aggregate;
  /** fetch data from the table: "Admin" using primary key columns */
  Admin_by_pk?: Maybe<Admin>;
  /** fetch data from the table: "AppSettings" */
  AppSettings: Array<AppSettings>;
  /** fetch aggregated fields from the table: "AppSettings" */
  AppSettings_aggregate: AppSettings_Aggregate;
  /** fetch data from the table: "AppSettings" using primary key columns */
  AppSettings_by_pk?: Maybe<AppSettings>;
  /** fetch data from the table: "Attendance" */
  Attendance: Array<Attendance>;
  /** fetch data from the table: "AttendanceSource" */
  AttendanceSource: Array<AttendanceSource>;
  /** fetch aggregated fields from the table: "AttendanceSource" */
  AttendanceSource_aggregate: AttendanceSource_Aggregate;
  /** fetch data from the table: "AttendanceSource" using primary key columns */
  AttendanceSource_by_pk?: Maybe<AttendanceSource>;
  /** fetch data from the table: "AttendanceStatus" */
  AttendanceStatus: Array<AttendanceStatus>;
  /** fetch aggregated fields from the table: "AttendanceStatus" */
  AttendanceStatus_aggregate: AttendanceStatus_Aggregate;
  /** fetch data from the table: "AttendanceStatus" using primary key columns */
  AttendanceStatus_by_pk?: Maybe<AttendanceStatus>;
  /** fetch aggregated fields from the table: "Attendance" */
  Attendance_aggregate: Attendance_Aggregate;
  /** fetch data from the table: "Attendance" using primary key columns */
  Attendance_by_pk?: Maybe<Attendance>;
  /** fetch data from the table: "CertificateTemplateProgram" */
  CertificateTemplateProgram: Array<CertificateTemplateProgram>;
  /** fetch aggregated fields from the table: "CertificateTemplateProgram" */
  CertificateTemplateProgram_aggregate: CertificateTemplateProgram_Aggregate;
  /** fetch data from the table: "CertificateTemplateProgram" using primary key columns */
  CertificateTemplateProgram_by_pk?: Maybe<CertificateTemplateProgram>;
  /** fetch data from the table: "CertificateTemplateText" */
  CertificateTemplateText: Array<CertificateTemplateText>;
  /** fetch aggregated fields from the table: "CertificateTemplateText" */
  CertificateTemplateText_aggregate: CertificateTemplateText_Aggregate;
  /** fetch data from the table: "CertificateTemplateText" using primary key columns */
  CertificateTemplateText_by_pk?: Maybe<CertificateTemplateText>;
  /** fetch data from the table: "CertificateType" */
  CertificateType: Array<CertificateType>;
  /** fetch aggregated fields from the table: "CertificateType" */
  CertificateType_aggregate: CertificateType_Aggregate;
  /** fetch data from the table: "CertificateType" using primary key columns */
  CertificateType_by_pk?: Maybe<CertificateType>;
  /** fetch data from the table: "Course" */
  Course: Array<Course>;
  /** fetch data from the table: "CourseDegree" */
  CourseDegree: Array<CourseDegree>;
  /** fetch aggregated fields from the table: "CourseDegree" */
  CourseDegree_aggregate: CourseDegree_Aggregate;
  /** fetch data from the table: "CourseDegree" using primary key columns */
  CourseDegree_by_pk?: Maybe<CourseDegree>;
  /** fetch data from the table: "CourseEnrollment" */
  CourseEnrollment: Array<CourseEnrollment>;
  /** fetch data from the table: "CourseEnrollmentStatus" */
  CourseEnrollmentStatus: Array<CourseEnrollmentStatus>;
  /** fetch aggregated fields from the table: "CourseEnrollmentStatus" */
  CourseEnrollmentStatus_aggregate: CourseEnrollmentStatus_Aggregate;
  /** fetch data from the table: "CourseEnrollmentStatus" using primary key columns */
  CourseEnrollmentStatus_by_pk?: Maybe<CourseEnrollmentStatus>;
  /** fetch aggregated fields from the table: "CourseEnrollment" */
  CourseEnrollment_aggregate: CourseEnrollment_Aggregate;
  /** fetch data from the table: "CourseEnrollment" using primary key columns */
  CourseEnrollment_by_pk?: Maybe<CourseEnrollment>;
  /** fetch data from the table: "CourseGroup" */
  CourseGroup: Array<CourseGroup>;
  /** fetch data from the table: "CourseGroupOption" */
  CourseGroupOption: Array<CourseGroupOption>;
  /** fetch aggregated fields from the table: "CourseGroupOption" */
  CourseGroupOption_aggregate: CourseGroupOption_Aggregate;
  /** fetch data from the table: "CourseGroupOption" using primary key columns */
  CourseGroupOption_by_pk?: Maybe<CourseGroupOption>;
  /** fetch aggregated fields from the table: "CourseGroup" */
  CourseGroup_aggregate: CourseGroup_Aggregate;
  /** fetch data from the table: "CourseGroup" using primary key columns */
  CourseGroup_by_pk?: Maybe<CourseGroup>;
  /** fetch data from the table: "CourseInstructor" */
  CourseInstructor: Array<CourseInstructor>;
  /** fetch aggregated fields from the table: "CourseInstructor" */
  CourseInstructor_aggregate: CourseInstructor_Aggregate;
  /** fetch data from the table: "CourseInstructor" using primary key columns */
  CourseInstructor_by_pk?: Maybe<CourseInstructor>;
  /** fetch data from the table: "CourseLocation" */
  CourseLocation: Array<CourseLocation>;
  /** fetch aggregated fields from the table: "CourseLocation" */
  CourseLocation_aggregate: CourseLocation_Aggregate;
  /** fetch data from the table: "CourseLocation" using primary key columns */
  CourseLocation_by_pk?: Maybe<CourseLocation>;
  /** fetch data from the table: "CourseStatus" */
  CourseStatus: Array<CourseStatus>;
  /** fetch aggregated fields from the table: "CourseStatus" */
  CourseStatus_aggregate: CourseStatus_Aggregate;
  /** fetch data from the table: "CourseStatus" using primary key columns */
  CourseStatus_by_pk?: Maybe<CourseStatus>;
  /** fetch aggregated fields from the table: "Course" */
  Course_aggregate: Course_Aggregate;
  /** fetch data from the table: "Course" using primary key columns */
  Course_by_pk?: Maybe<Course>;
  /** fetch data from the table: "Employment" */
  Employment: Array<Employment>;
  /** fetch aggregated fields from the table: "Employment" */
  Employment_aggregate: Employment_Aggregate;
  /** fetch data from the table: "Employment" using primary key columns */
  Employment_by_pk?: Maybe<Employment>;
  /** fetch data from the table: "Expert" */
  Expert: Array<Expert>;
  /** fetch aggregated fields from the table: "Expert" */
  Expert_aggregate: Expert_Aggregate;
  /** fetch data from the table: "Expert" using primary key columns */
  Expert_by_pk?: Maybe<Expert>;
  /** fetch data from the table: "Language" */
  Language: Array<Language>;
  /** fetch aggregated fields from the table: "Language" */
  Language_aggregate: Language_Aggregate;
  /** fetch data from the table: "Language" using primary key columns */
  Language_by_pk?: Maybe<Language>;
  /** fetch data from the table: "LocationOption" */
  LocationOption: Array<LocationOption>;
  /** fetch aggregated fields from the table: "LocationOption" */
  LocationOption_aggregate: LocationOption_Aggregate;
  /** fetch data from the table: "LocationOption" using primary key columns */
  LocationOption_by_pk?: Maybe<LocationOption>;
  /** fetch data from the table: "MailLog" */
  MailLog: Array<MailLog>;
  /** fetch aggregated fields from the table: "MailLog" */
  MailLog_aggregate: MailLog_Aggregate;
  /** fetch data from the table: "MailLog" using primary key columns */
  MailLog_by_pk?: Maybe<MailLog>;
  /** fetch data from the table: "MailStatus" */
  MailStatus: Array<MailStatus>;
  /** fetch aggregated fields from the table: "MailStatus" */
  MailStatus_aggregate: MailStatus_Aggregate;
  /** fetch data from the table: "MailStatus" using primary key columns */
  MailStatus_by_pk?: Maybe<MailStatus>;
  /** fetch data from the table: "MailTemplate" */
  MailTemplate: Array<MailTemplate>;
  /** fetch aggregated fields from the table: "MailTemplate" */
  MailTemplate_aggregate: MailTemplate_Aggregate;
  /** fetch data from the table: "MailTemplate" using primary key columns */
  MailTemplate_by_pk?: Maybe<MailTemplate>;
  /** fetch data from the table: "MotivationRating" */
  MotivationRating: Array<MotivationRating>;
  /** fetch aggregated fields from the table: "MotivationRating" */
  MotivationRating_aggregate: MotivationRating_Aggregate;
  /** fetch data from the table: "MotivationRating" using primary key columns */
  MotivationRating_by_pk?: Maybe<MotivationRating>;
  /** fetch data from the table: "Program" */
  Program: Array<Program>;
  /** fetch aggregated fields from the table: "Program" */
  Program_aggregate: Program_Aggregate;
  /** fetch data from the table: "Program" using primary key columns */
  Program_by_pk?: Maybe<Program>;
  /** fetch data from the table: "rentAScientist.RentAScientistConfig" */
  RentAScientistConfig: Array<RentAScientistConfig>;
  /** fetch aggregated fields from the table: "rentAScientist.RentAScientistConfig" */
  RentAScientistConfig_aggregate: RentAScientistConfig_Aggregate;
  /** fetch data from the table: "rentAScientist.RentAScientistConfig" using primary key columns */
  RentAScientistConfig_by_pk?: Maybe<RentAScientistConfig>;
  /** fetch data from the table: "rentAScientist.School" */
  School: Array<School>;
  /** fetch data from the table: "rentAScientist.SchoolClass" */
  SchoolClass: Array<SchoolClass>;
  /** fetch data from the table: "rentAScientist.SchoolClassRequest" */
  SchoolClassRequest: Array<SchoolClassRequest>;
  /** fetch aggregated fields from the table: "rentAScientist.SchoolClassRequest" */
  SchoolClassRequest_aggregate: SchoolClassRequest_Aggregate;
  /** fetch data from the table: "rentAScientist.SchoolClassRequest" using primary key columns */
  SchoolClassRequest_by_pk?: Maybe<SchoolClassRequest>;
  /** fetch aggregated fields from the table: "rentAScientist.SchoolClass" */
  SchoolClass_aggregate: SchoolClass_Aggregate;
  /** fetch data from the table: "rentAScientist.SchoolClass" using primary key columns */
  SchoolClass_by_pk?: Maybe<SchoolClass>;
  /** fetch aggregated fields from the table: "rentAScientist.School" */
  School_aggregate: School_Aggregate;
  /** fetch data from the table: "rentAScientist.School" using primary key columns */
  School_by_pk?: Maybe<School>;
  /** fetch data from the table: "rentAScientist.Scientist" */
  Scientist: Array<Scientist>;
  /** fetch data from the table: "rentAScientist.ScientistOffer" */
  ScientistOffer: Array<ScientistOffer>;
  /** fetch data from the table: "rentAScientist.ScientistOfferRelation" */
  ScientistOfferRelation: Array<ScientistOfferRelation>;
  /** fetch aggregated fields from the table: "rentAScientist.ScientistOfferRelation" */
  ScientistOfferRelation_aggregate: ScientistOfferRelation_Aggregate;
  /** fetch data from the table: "rentAScientist.ScientistOfferRelation" using primary key columns */
  ScientistOfferRelation_by_pk?: Maybe<ScientistOfferRelation>;
  /** fetch aggregated fields from the table: "rentAScientist.ScientistOffer" */
  ScientistOffer_aggregate: ScientistOffer_Aggregate;
  /** fetch data from the table: "rentAScientist.ScientistOffer" using primary key columns */
  ScientistOffer_by_pk?: Maybe<ScientistOffer>;
  /** fetch aggregated fields from the table: "rentAScientist.Scientist" */
  Scientist_aggregate: Scientist_Aggregate;
  /** fetch data from the table: "rentAScientist.Scientist" using primary key columns */
  Scientist_by_pk?: Maybe<Scientist>;
  /** fetch data from the table: "Session" */
  Session: Array<Session>;
  /** fetch data from the table: "SessionAddress" */
  SessionAddress: Array<SessionAddress>;
  /** fetch aggregated fields from the table: "SessionAddress" */
  SessionAddress_aggregate: SessionAddress_Aggregate;
  /** fetch data from the table: "SessionAddress" using primary key columns */
  SessionAddress_by_pk?: Maybe<SessionAddress>;
  /** fetch data from the table: "SessionSpeaker" */
  SessionSpeaker: Array<SessionSpeaker>;
  /** fetch aggregated fields from the table: "SessionSpeaker" */
  SessionSpeaker_aggregate: SessionSpeaker_Aggregate;
  /** fetch data from the table: "SessionSpeaker" using primary key columns */
  SessionSpeaker_by_pk?: Maybe<SessionSpeaker>;
  /** fetch aggregated fields from the table: "Session" */
  Session_aggregate: Session_Aggregate;
  /** fetch data from the table: "Session" using primary key columns */
  Session_by_pk?: Maybe<Session>;
  /** fetch data from the table: "rentAScientist.Teacher" */
  Teacher: Array<Teacher>;
  /** fetch aggregated fields from the table: "rentAScientist.Teacher" */
  Teacher_aggregate: Teacher_Aggregate;
  /** fetch data from the table: "rentAScientist.Teacher" using primary key columns */
  Teacher_by_pk?: Maybe<Teacher>;
  /** fetch data from the table: "University" */
  University: Array<University>;
  /** fetch aggregated fields from the table: "University" */
  University_aggregate: University_Aggregate;
  /** fetch data from the table: "University" using primary key columns */
  University_by_pk?: Maybe<University>;
  /** fetch data from the table: "User" */
  User: Array<User>;
  /** fetch data from the table: "UserStatus" */
  UserStatus: Array<UserStatus>;
  /** fetch aggregated fields from the table: "UserStatus" */
  UserStatus_aggregate: UserStatus_Aggregate;
  /** fetch data from the table: "UserStatus" using primary key columns */
  UserStatus_by_pk?: Maybe<UserStatus>;
  /** fetch aggregated fields from the table: "User" */
  User_aggregate: User_Aggregate;
  /** fetch data from the table: "User" using primary key columns */
  User_by_pk?: Maybe<User>;
  /** fetch data from the table: "Weekday" */
  Weekday: Array<Weekday>;
  /** fetch aggregated fields from the table: "Weekday" */
  Weekday_aggregate: Weekday_Aggregate;
  /** fetch data from the table: "Weekday" using primary key columns */
  Weekday_by_pk?: Maybe<Weekday>;
  /** Provides the data for the MOOCHub API */
  getMoocHubData?: Maybe<MoocHubSchema>;
  /** Gets a signed url for a file in the Google Storage Bucket */
  getSignedUrl?: Maybe<GetSignedUrlOutput>;
  /** loadParticipationData */
  loadParticipationData?: Maybe<LoadFileOutput>;
};


export type Query_RootAchievementDocumentationTemplateArgs = {
  distinct_on?: InputMaybe<Array<AchievementDocumentationTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementDocumentationTemplate_Order_By>>;
  where?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
};


export type Query_RootAchievementDocumentationTemplate_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementDocumentationTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementDocumentationTemplate_Order_By>>;
  where?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
};


export type Query_RootAchievementDocumentationTemplate_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootAchievementOptionArgs = {
  distinct_on?: InputMaybe<Array<AchievementOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOption_Order_By>>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};


export type Query_RootAchievementOptionCourseArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


export type Query_RootAchievementOptionCourse_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


export type Query_RootAchievementOptionCourse_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootAchievementOptionMentorArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


export type Query_RootAchievementOptionMentor_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


export type Query_RootAchievementOptionMentor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootAchievementOption_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOption_Order_By>>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};


export type Query_RootAchievementOption_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootAchievementRecordArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};


export type Query_RootAchievementRecordAuthorArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


export type Query_RootAchievementRecordAuthor_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


export type Query_RootAchievementRecordAuthor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootAchievementRecordRatingArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordRating_Order_By>>;
  where?: InputMaybe<AchievementRecordRating_Bool_Exp>;
};


export type Query_RootAchievementRecordRating_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordRating_Order_By>>;
  where?: InputMaybe<AchievementRecordRating_Bool_Exp>;
};


export type Query_RootAchievementRecordRating_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootAchievementRecordTypeArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordType_Order_By>>;
  where?: InputMaybe<AchievementRecordType_Bool_Exp>;
};


export type Query_RootAchievementRecordType_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordType_Order_By>>;
  where?: InputMaybe<AchievementRecordType_Bool_Exp>;
};


export type Query_RootAchievementRecordType_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootAchievementRecord_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};


export type Query_RootAchievementRecord_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootAdminArgs = {
  distinct_on?: InputMaybe<Array<Admin_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Admin_Order_By>>;
  where?: InputMaybe<Admin_Bool_Exp>;
};


export type Query_RootAdmin_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Admin_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Admin_Order_By>>;
  where?: InputMaybe<Admin_Bool_Exp>;
};


export type Query_RootAdmin_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootAppSettingsArgs = {
  distinct_on?: InputMaybe<Array<AppSettings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AppSettings_Order_By>>;
  where?: InputMaybe<AppSettings_Bool_Exp>;
};


export type Query_RootAppSettings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AppSettings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AppSettings_Order_By>>;
  where?: InputMaybe<AppSettings_Bool_Exp>;
};


export type Query_RootAppSettings_By_PkArgs = {
  appName: Scalars['String']['input'];
};


export type Query_RootAttendanceArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Query_RootAttendanceSourceArgs = {
  distinct_on?: InputMaybe<Array<AttendanceSource_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceSource_Order_By>>;
  where?: InputMaybe<AttendanceSource_Bool_Exp>;
};


export type Query_RootAttendanceSource_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AttendanceSource_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceSource_Order_By>>;
  where?: InputMaybe<AttendanceSource_Bool_Exp>;
};


export type Query_RootAttendanceSource_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootAttendanceStatusArgs = {
  distinct_on?: InputMaybe<Array<AttendanceStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceStatus_Order_By>>;
  where?: InputMaybe<AttendanceStatus_Bool_Exp>;
};


export type Query_RootAttendanceStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AttendanceStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceStatus_Order_By>>;
  where?: InputMaybe<AttendanceStatus_Bool_Exp>;
};


export type Query_RootAttendanceStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootAttendance_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Query_RootAttendance_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCertificateTemplateProgramArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


export type Query_RootCertificateTemplateProgram_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


export type Query_RootCertificateTemplateProgram_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCertificateTemplateTextArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateText_Order_By>>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};


export type Query_RootCertificateTemplateText_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateText_Order_By>>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};


export type Query_RootCertificateTemplateText_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCertificateTypeArgs = {
  distinct_on?: InputMaybe<Array<CertificateType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateType_Order_By>>;
  where?: InputMaybe<CertificateType_Bool_Exp>;
};


export type Query_RootCertificateType_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateType_Order_By>>;
  where?: InputMaybe<CertificateType_Bool_Exp>;
};


export type Query_RootCertificateType_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootCourseArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


export type Query_RootCourseDegreeArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


export type Query_RootCourseDegree_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


export type Query_RootCourseDegree_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCourseEnrollmentArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


export type Query_RootCourseEnrollmentStatusArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollmentStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollmentStatus_Order_By>>;
  where?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
};


export type Query_RootCourseEnrollmentStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollmentStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollmentStatus_Order_By>>;
  where?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
};


export type Query_RootCourseEnrollmentStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootCourseEnrollment_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


export type Query_RootCourseEnrollment_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCourseGroupArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


export type Query_RootCourseGroupOptionArgs = {
  distinct_on?: InputMaybe<Array<CourseGroupOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroupOption_Order_By>>;
  where?: InputMaybe<CourseGroupOption_Bool_Exp>;
};


export type Query_RootCourseGroupOption_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseGroupOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroupOption_Order_By>>;
  where?: InputMaybe<CourseGroupOption_Bool_Exp>;
};


export type Query_RootCourseGroupOption_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCourseGroup_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


export type Query_RootCourseGroup_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCourseInstructorArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


export type Query_RootCourseInstructor_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


export type Query_RootCourseInstructor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCourseLocationArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


export type Query_RootCourseLocation_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


export type Query_RootCourseLocation_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootCourseStatusArgs = {
  distinct_on?: InputMaybe<Array<CourseStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseStatus_Order_By>>;
  where?: InputMaybe<CourseStatus_Bool_Exp>;
};


export type Query_RootCourseStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseStatus_Order_By>>;
  where?: InputMaybe<CourseStatus_Bool_Exp>;
};


export type Query_RootCourseStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootCourse_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


export type Query_RootCourse_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootEmploymentArgs = {
  distinct_on?: InputMaybe<Array<Employment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Employment_Order_By>>;
  where?: InputMaybe<Employment_Bool_Exp>;
};


export type Query_RootEmployment_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Employment_Order_By>>;
  where?: InputMaybe<Employment_Bool_Exp>;
};


export type Query_RootEmployment_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootExpertArgs = {
  distinct_on?: InputMaybe<Array<Expert_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Expert_Order_By>>;
  where?: InputMaybe<Expert_Bool_Exp>;
};


export type Query_RootExpert_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Expert_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Expert_Order_By>>;
  where?: InputMaybe<Expert_Bool_Exp>;
};


export type Query_RootExpert_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootLanguageArgs = {
  distinct_on?: InputMaybe<Array<Language_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Language_Order_By>>;
  where?: InputMaybe<Language_Bool_Exp>;
};


export type Query_RootLanguage_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Language_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Language_Order_By>>;
  where?: InputMaybe<Language_Bool_Exp>;
};


export type Query_RootLanguage_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootLocationOptionArgs = {
  distinct_on?: InputMaybe<Array<LocationOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LocationOption_Order_By>>;
  where?: InputMaybe<LocationOption_Bool_Exp>;
};


export type Query_RootLocationOption_AggregateArgs = {
  distinct_on?: InputMaybe<Array<LocationOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LocationOption_Order_By>>;
  where?: InputMaybe<LocationOption_Bool_Exp>;
};


export type Query_RootLocationOption_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootMailLogArgs = {
  distinct_on?: InputMaybe<Array<MailLog_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailLog_Order_By>>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};


export type Query_RootMailLog_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MailLog_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailLog_Order_By>>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};


export type Query_RootMailLog_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootMailStatusArgs = {
  distinct_on?: InputMaybe<Array<MailStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailStatus_Order_By>>;
  where?: InputMaybe<MailStatus_Bool_Exp>;
};


export type Query_RootMailStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MailStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailStatus_Order_By>>;
  where?: InputMaybe<MailStatus_Bool_Exp>;
};


export type Query_RootMailStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootMailTemplateArgs = {
  distinct_on?: InputMaybe<Array<MailTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailTemplate_Order_By>>;
  where?: InputMaybe<MailTemplate_Bool_Exp>;
};


export type Query_RootMailTemplate_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MailTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailTemplate_Order_By>>;
  where?: InputMaybe<MailTemplate_Bool_Exp>;
};


export type Query_RootMailTemplate_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootMotivationRatingArgs = {
  distinct_on?: InputMaybe<Array<MotivationRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MotivationRating_Order_By>>;
  where?: InputMaybe<MotivationRating_Bool_Exp>;
};


export type Query_RootMotivationRating_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MotivationRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MotivationRating_Order_By>>;
  where?: InputMaybe<MotivationRating_Bool_Exp>;
};


export type Query_RootMotivationRating_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootProgramArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


export type Query_RootProgram_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


export type Query_RootProgram_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootRentAScientistConfigArgs = {
  distinct_on?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RentAScientistConfig_Order_By>>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};


export type Query_RootRentAScientistConfig_AggregateArgs = {
  distinct_on?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RentAScientistConfig_Order_By>>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};


export type Query_RootRentAScientistConfig_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootSchoolArgs = {
  distinct_on?: InputMaybe<Array<School_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<School_Order_By>>;
  where?: InputMaybe<School_Bool_Exp>;
};


export type Query_RootSchoolClassArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};


export type Query_RootSchoolClassRequestArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


export type Query_RootSchoolClassRequest_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


export type Query_RootSchoolClassRequest_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootSchoolClass_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};


export type Query_RootSchoolClass_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootSchool_AggregateArgs = {
  distinct_on?: InputMaybe<Array<School_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<School_Order_By>>;
  where?: InputMaybe<School_Bool_Exp>;
};


export type Query_RootSchool_By_PkArgs = {
  dstnr: Scalars['String']['input'];
};


export type Query_RootScientistArgs = {
  distinct_on?: InputMaybe<Array<Scientist_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Scientist_Order_By>>;
  where?: InputMaybe<Scientist_Bool_Exp>;
};


export type Query_RootScientistOfferArgs = {
  distinct_on?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOffer_Order_By>>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};


export type Query_RootScientistOfferRelationArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};


export type Query_RootScientistOfferRelation_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};


export type Query_RootScientistOfferRelation_By_PkArgs = {
  offerId: Scalars['Int']['input'];
  scientistId: Scalars['Int']['input'];
};


export type Query_RootScientistOffer_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOffer_Order_By>>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};


export type Query_RootScientistOffer_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootScientist_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Scientist_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Scientist_Order_By>>;
  where?: InputMaybe<Scientist_Bool_Exp>;
};


export type Query_RootScientist_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootSessionArgs = {
  distinct_on?: InputMaybe<Array<Session_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Session_Order_By>>;
  where?: InputMaybe<Session_Bool_Exp>;
};


export type Query_RootSessionAddressArgs = {
  distinct_on?: InputMaybe<Array<SessionAddress_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionAddress_Order_By>>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};


export type Query_RootSessionAddress_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SessionAddress_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionAddress_Order_By>>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};


export type Query_RootSessionAddress_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootSessionSpeakerArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};


export type Query_RootSessionSpeaker_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};


export type Query_RootSessionSpeaker_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootSession_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Session_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Session_Order_By>>;
  where?: InputMaybe<Session_Bool_Exp>;
};


export type Query_RootSession_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootTeacherArgs = {
  distinct_on?: InputMaybe<Array<Teacher_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Teacher_Order_By>>;
  where?: InputMaybe<Teacher_Bool_Exp>;
};


export type Query_RootTeacher_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Teacher_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Teacher_Order_By>>;
  where?: InputMaybe<Teacher_Bool_Exp>;
};


export type Query_RootTeacher_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Query_RootUniversityArgs = {
  distinct_on?: InputMaybe<Array<University_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<University_Order_By>>;
  where?: InputMaybe<University_Bool_Exp>;
};


export type Query_RootUniversity_AggregateArgs = {
  distinct_on?: InputMaybe<Array<University_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<University_Order_By>>;
  where?: InputMaybe<University_Bool_Exp>;
};


export type Query_RootUniversity_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootUserArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};


export type Query_RootUserStatusArgs = {
  distinct_on?: InputMaybe<Array<UserStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<UserStatus_Order_By>>;
  where?: InputMaybe<UserStatus_Bool_Exp>;
};


export type Query_RootUserStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<UserStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<UserStatus_Order_By>>;
  where?: InputMaybe<UserStatus_Bool_Exp>;
};


export type Query_RootUserStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootUser_AggregateArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};


export type Query_RootUser_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootWeekdayArgs = {
  distinct_on?: InputMaybe<Array<Weekday_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Weekday_Order_By>>;
  where?: InputMaybe<Weekday_Bool_Exp>;
};


export type Query_RootWeekday_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Weekday_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Weekday_Order_By>>;
  where?: InputMaybe<Weekday_Bool_Exp>;
};


export type Query_RootWeekday_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Query_RootGetSignedUrlArgs = {
  path: Scalars['String']['input'];
};


export type Query_RootLoadParticipationDataArgs = {
  programId: Scalars['Int']['input'];
};

export type Result = {
  __typename?: 'result';
  result: Scalars['String']['output'];
};

export type SaveFileOutput = {
  __typename?: 'saveFileOutput';
  file_path: Scalars['String']['output'];
  google_link: Scalars['String']['output'];
};

export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** fetch data from the table: "AchievementDocumentationTemplate" */
  AchievementDocumentationTemplate: Array<AchievementDocumentationTemplate>;
  /** fetch aggregated fields from the table: "AchievementDocumentationTemplate" */
  AchievementDocumentationTemplate_aggregate: AchievementDocumentationTemplate_Aggregate;
  /** fetch data from the table: "AchievementDocumentationTemplate" using primary key columns */
  AchievementDocumentationTemplate_by_pk?: Maybe<AchievementDocumentationTemplate>;
  /** fetch data from the table in a streaming manner: "AchievementDocumentationTemplate" */
  AchievementDocumentationTemplate_stream: Array<AchievementDocumentationTemplate>;
  /** fetch data from the table: "AchievementOption" */
  AchievementOption: Array<AchievementOption>;
  /** fetch data from the table: "AchievementOptionCourse" */
  AchievementOptionCourse: Array<AchievementOptionCourse>;
  /** fetch aggregated fields from the table: "AchievementOptionCourse" */
  AchievementOptionCourse_aggregate: AchievementOptionCourse_Aggregate;
  /** fetch data from the table: "AchievementOptionCourse" using primary key columns */
  AchievementOptionCourse_by_pk?: Maybe<AchievementOptionCourse>;
  /** fetch data from the table in a streaming manner: "AchievementOptionCourse" */
  AchievementOptionCourse_stream: Array<AchievementOptionCourse>;
  /** fetch data from the table: "AchievementOptionMentor" */
  AchievementOptionMentor: Array<AchievementOptionMentor>;
  /** fetch aggregated fields from the table: "AchievementOptionMentor" */
  AchievementOptionMentor_aggregate: AchievementOptionMentor_Aggregate;
  /** fetch data from the table: "AchievementOptionMentor" using primary key columns */
  AchievementOptionMentor_by_pk?: Maybe<AchievementOptionMentor>;
  /** fetch data from the table in a streaming manner: "AchievementOptionMentor" */
  AchievementOptionMentor_stream: Array<AchievementOptionMentor>;
  /** fetch aggregated fields from the table: "AchievementOption" */
  AchievementOption_aggregate: AchievementOption_Aggregate;
  /** fetch data from the table: "AchievementOption" using primary key columns */
  AchievementOption_by_pk?: Maybe<AchievementOption>;
  /** fetch data from the table in a streaming manner: "AchievementOption" */
  AchievementOption_stream: Array<AchievementOption>;
  /** fetch data from the table: "AchievementRecord" */
  AchievementRecord: Array<AchievementRecord>;
  /** fetch data from the table: "AchievementRecordAuthor" */
  AchievementRecordAuthor: Array<AchievementRecordAuthor>;
  /** fetch aggregated fields from the table: "AchievementRecordAuthor" */
  AchievementRecordAuthor_aggregate: AchievementRecordAuthor_Aggregate;
  /** fetch data from the table: "AchievementRecordAuthor" using primary key columns */
  AchievementRecordAuthor_by_pk?: Maybe<AchievementRecordAuthor>;
  /** fetch data from the table in a streaming manner: "AchievementRecordAuthor" */
  AchievementRecordAuthor_stream: Array<AchievementRecordAuthor>;
  /** fetch data from the table: "AchievementRecordRating" */
  AchievementRecordRating: Array<AchievementRecordRating>;
  /** fetch aggregated fields from the table: "AchievementRecordRating" */
  AchievementRecordRating_aggregate: AchievementRecordRating_Aggregate;
  /** fetch data from the table: "AchievementRecordRating" using primary key columns */
  AchievementRecordRating_by_pk?: Maybe<AchievementRecordRating>;
  /** fetch data from the table in a streaming manner: "AchievementRecordRating" */
  AchievementRecordRating_stream: Array<AchievementRecordRating>;
  /** fetch data from the table: "AchievementRecordType" */
  AchievementRecordType: Array<AchievementRecordType>;
  /** fetch aggregated fields from the table: "AchievementRecordType" */
  AchievementRecordType_aggregate: AchievementRecordType_Aggregate;
  /** fetch data from the table: "AchievementRecordType" using primary key columns */
  AchievementRecordType_by_pk?: Maybe<AchievementRecordType>;
  /** fetch data from the table in a streaming manner: "AchievementRecordType" */
  AchievementRecordType_stream: Array<AchievementRecordType>;
  /** fetch aggregated fields from the table: "AchievementRecord" */
  AchievementRecord_aggregate: AchievementRecord_Aggregate;
  /** fetch data from the table: "AchievementRecord" using primary key columns */
  AchievementRecord_by_pk?: Maybe<AchievementRecord>;
  /** fetch data from the table in a streaming manner: "AchievementRecord" */
  AchievementRecord_stream: Array<AchievementRecord>;
  /** fetch data from the table: "Admin" */
  Admin: Array<Admin>;
  /** fetch aggregated fields from the table: "Admin" */
  Admin_aggregate: Admin_Aggregate;
  /** fetch data from the table: "Admin" using primary key columns */
  Admin_by_pk?: Maybe<Admin>;
  /** fetch data from the table in a streaming manner: "Admin" */
  Admin_stream: Array<Admin>;
  /** fetch data from the table: "AppSettings" */
  AppSettings: Array<AppSettings>;
  /** fetch aggregated fields from the table: "AppSettings" */
  AppSettings_aggregate: AppSettings_Aggregate;
  /** fetch data from the table: "AppSettings" using primary key columns */
  AppSettings_by_pk?: Maybe<AppSettings>;
  /** fetch data from the table in a streaming manner: "AppSettings" */
  AppSettings_stream: Array<AppSettings>;
  /** fetch data from the table: "Attendance" */
  Attendance: Array<Attendance>;
  /** fetch data from the table: "AttendanceSource" */
  AttendanceSource: Array<AttendanceSource>;
  /** fetch aggregated fields from the table: "AttendanceSource" */
  AttendanceSource_aggregate: AttendanceSource_Aggregate;
  /** fetch data from the table: "AttendanceSource" using primary key columns */
  AttendanceSource_by_pk?: Maybe<AttendanceSource>;
  /** fetch data from the table in a streaming manner: "AttendanceSource" */
  AttendanceSource_stream: Array<AttendanceSource>;
  /** fetch data from the table: "AttendanceStatus" */
  AttendanceStatus: Array<AttendanceStatus>;
  /** fetch aggregated fields from the table: "AttendanceStatus" */
  AttendanceStatus_aggregate: AttendanceStatus_Aggregate;
  /** fetch data from the table: "AttendanceStatus" using primary key columns */
  AttendanceStatus_by_pk?: Maybe<AttendanceStatus>;
  /** fetch data from the table in a streaming manner: "AttendanceStatus" */
  AttendanceStatus_stream: Array<AttendanceStatus>;
  /** fetch aggregated fields from the table: "Attendance" */
  Attendance_aggregate: Attendance_Aggregate;
  /** fetch data from the table: "Attendance" using primary key columns */
  Attendance_by_pk?: Maybe<Attendance>;
  /** fetch data from the table in a streaming manner: "Attendance" */
  Attendance_stream: Array<Attendance>;
  /** fetch data from the table: "CertificateTemplateProgram" */
  CertificateTemplateProgram: Array<CertificateTemplateProgram>;
  /** fetch aggregated fields from the table: "CertificateTemplateProgram" */
  CertificateTemplateProgram_aggregate: CertificateTemplateProgram_Aggregate;
  /** fetch data from the table: "CertificateTemplateProgram" using primary key columns */
  CertificateTemplateProgram_by_pk?: Maybe<CertificateTemplateProgram>;
  /** fetch data from the table in a streaming manner: "CertificateTemplateProgram" */
  CertificateTemplateProgram_stream: Array<CertificateTemplateProgram>;
  /** fetch data from the table: "CertificateTemplateText" */
  CertificateTemplateText: Array<CertificateTemplateText>;
  /** fetch aggregated fields from the table: "CertificateTemplateText" */
  CertificateTemplateText_aggregate: CertificateTemplateText_Aggregate;
  /** fetch data from the table: "CertificateTemplateText" using primary key columns */
  CertificateTemplateText_by_pk?: Maybe<CertificateTemplateText>;
  /** fetch data from the table in a streaming manner: "CertificateTemplateText" */
  CertificateTemplateText_stream: Array<CertificateTemplateText>;
  /** fetch data from the table: "CertificateType" */
  CertificateType: Array<CertificateType>;
  /** fetch aggregated fields from the table: "CertificateType" */
  CertificateType_aggregate: CertificateType_Aggregate;
  /** fetch data from the table: "CertificateType" using primary key columns */
  CertificateType_by_pk?: Maybe<CertificateType>;
  /** fetch data from the table in a streaming manner: "CertificateType" */
  CertificateType_stream: Array<CertificateType>;
  /** fetch data from the table: "Course" */
  Course: Array<Course>;
  /** fetch data from the table: "CourseDegree" */
  CourseDegree: Array<CourseDegree>;
  /** fetch aggregated fields from the table: "CourseDegree" */
  CourseDegree_aggregate: CourseDegree_Aggregate;
  /** fetch data from the table: "CourseDegree" using primary key columns */
  CourseDegree_by_pk?: Maybe<CourseDegree>;
  /** fetch data from the table in a streaming manner: "CourseDegree" */
  CourseDegree_stream: Array<CourseDegree>;
  /** fetch data from the table: "CourseEnrollment" */
  CourseEnrollment: Array<CourseEnrollment>;
  /** fetch data from the table: "CourseEnrollmentStatus" */
  CourseEnrollmentStatus: Array<CourseEnrollmentStatus>;
  /** fetch aggregated fields from the table: "CourseEnrollmentStatus" */
  CourseEnrollmentStatus_aggregate: CourseEnrollmentStatus_Aggregate;
  /** fetch data from the table: "CourseEnrollmentStatus" using primary key columns */
  CourseEnrollmentStatus_by_pk?: Maybe<CourseEnrollmentStatus>;
  /** fetch data from the table in a streaming manner: "CourseEnrollmentStatus" */
  CourseEnrollmentStatus_stream: Array<CourseEnrollmentStatus>;
  /** fetch aggregated fields from the table: "CourseEnrollment" */
  CourseEnrollment_aggregate: CourseEnrollment_Aggregate;
  /** fetch data from the table: "CourseEnrollment" using primary key columns */
  CourseEnrollment_by_pk?: Maybe<CourseEnrollment>;
  /** fetch data from the table in a streaming manner: "CourseEnrollment" */
  CourseEnrollment_stream: Array<CourseEnrollment>;
  /** fetch data from the table: "CourseGroup" */
  CourseGroup: Array<CourseGroup>;
  /** fetch data from the table: "CourseGroupOption" */
  CourseGroupOption: Array<CourseGroupOption>;
  /** fetch aggregated fields from the table: "CourseGroupOption" */
  CourseGroupOption_aggregate: CourseGroupOption_Aggregate;
  /** fetch data from the table: "CourseGroupOption" using primary key columns */
  CourseGroupOption_by_pk?: Maybe<CourseGroupOption>;
  /** fetch data from the table in a streaming manner: "CourseGroupOption" */
  CourseGroupOption_stream: Array<CourseGroupOption>;
  /** fetch aggregated fields from the table: "CourseGroup" */
  CourseGroup_aggregate: CourseGroup_Aggregate;
  /** fetch data from the table: "CourseGroup" using primary key columns */
  CourseGroup_by_pk?: Maybe<CourseGroup>;
  /** fetch data from the table in a streaming manner: "CourseGroup" */
  CourseGroup_stream: Array<CourseGroup>;
  /** fetch data from the table: "CourseInstructor" */
  CourseInstructor: Array<CourseInstructor>;
  /** fetch aggregated fields from the table: "CourseInstructor" */
  CourseInstructor_aggregate: CourseInstructor_Aggregate;
  /** fetch data from the table: "CourseInstructor" using primary key columns */
  CourseInstructor_by_pk?: Maybe<CourseInstructor>;
  /** fetch data from the table in a streaming manner: "CourseInstructor" */
  CourseInstructor_stream: Array<CourseInstructor>;
  /** fetch data from the table: "CourseLocation" */
  CourseLocation: Array<CourseLocation>;
  /** fetch aggregated fields from the table: "CourseLocation" */
  CourseLocation_aggregate: CourseLocation_Aggregate;
  /** fetch data from the table: "CourseLocation" using primary key columns */
  CourseLocation_by_pk?: Maybe<CourseLocation>;
  /** fetch data from the table in a streaming manner: "CourseLocation" */
  CourseLocation_stream: Array<CourseLocation>;
  /** fetch data from the table: "CourseStatus" */
  CourseStatus: Array<CourseStatus>;
  /** fetch aggregated fields from the table: "CourseStatus" */
  CourseStatus_aggregate: CourseStatus_Aggregate;
  /** fetch data from the table: "CourseStatus" using primary key columns */
  CourseStatus_by_pk?: Maybe<CourseStatus>;
  /** fetch data from the table in a streaming manner: "CourseStatus" */
  CourseStatus_stream: Array<CourseStatus>;
  /** fetch aggregated fields from the table: "Course" */
  Course_aggregate: Course_Aggregate;
  /** fetch data from the table: "Course" using primary key columns */
  Course_by_pk?: Maybe<Course>;
  /** fetch data from the table in a streaming manner: "Course" */
  Course_stream: Array<Course>;
  /** fetch data from the table: "Employment" */
  Employment: Array<Employment>;
  /** fetch aggregated fields from the table: "Employment" */
  Employment_aggregate: Employment_Aggregate;
  /** fetch data from the table: "Employment" using primary key columns */
  Employment_by_pk?: Maybe<Employment>;
  /** fetch data from the table in a streaming manner: "Employment" */
  Employment_stream: Array<Employment>;
  /** fetch data from the table: "Expert" */
  Expert: Array<Expert>;
  /** fetch aggregated fields from the table: "Expert" */
  Expert_aggregate: Expert_Aggregate;
  /** fetch data from the table: "Expert" using primary key columns */
  Expert_by_pk?: Maybe<Expert>;
  /** fetch data from the table in a streaming manner: "Expert" */
  Expert_stream: Array<Expert>;
  /** fetch data from the table: "Language" */
  Language: Array<Language>;
  /** fetch aggregated fields from the table: "Language" */
  Language_aggregate: Language_Aggregate;
  /** fetch data from the table: "Language" using primary key columns */
  Language_by_pk?: Maybe<Language>;
  /** fetch data from the table in a streaming manner: "Language" */
  Language_stream: Array<Language>;
  /** fetch data from the table: "LocationOption" */
  LocationOption: Array<LocationOption>;
  /** fetch aggregated fields from the table: "LocationOption" */
  LocationOption_aggregate: LocationOption_Aggregate;
  /** fetch data from the table: "LocationOption" using primary key columns */
  LocationOption_by_pk?: Maybe<LocationOption>;
  /** fetch data from the table in a streaming manner: "LocationOption" */
  LocationOption_stream: Array<LocationOption>;
  /** fetch data from the table: "MailLog" */
  MailLog: Array<MailLog>;
  /** fetch aggregated fields from the table: "MailLog" */
  MailLog_aggregate: MailLog_Aggregate;
  /** fetch data from the table: "MailLog" using primary key columns */
  MailLog_by_pk?: Maybe<MailLog>;
  /** fetch data from the table in a streaming manner: "MailLog" */
  MailLog_stream: Array<MailLog>;
  /** fetch data from the table: "MailStatus" */
  MailStatus: Array<MailStatus>;
  /** fetch aggregated fields from the table: "MailStatus" */
  MailStatus_aggregate: MailStatus_Aggregate;
  /** fetch data from the table: "MailStatus" using primary key columns */
  MailStatus_by_pk?: Maybe<MailStatus>;
  /** fetch data from the table in a streaming manner: "MailStatus" */
  MailStatus_stream: Array<MailStatus>;
  /** fetch data from the table: "MailTemplate" */
  MailTemplate: Array<MailTemplate>;
  /** fetch aggregated fields from the table: "MailTemplate" */
  MailTemplate_aggregate: MailTemplate_Aggregate;
  /** fetch data from the table: "MailTemplate" using primary key columns */
  MailTemplate_by_pk?: Maybe<MailTemplate>;
  /** fetch data from the table in a streaming manner: "MailTemplate" */
  MailTemplate_stream: Array<MailTemplate>;
  /** fetch data from the table: "MotivationRating" */
  MotivationRating: Array<MotivationRating>;
  /** fetch aggregated fields from the table: "MotivationRating" */
  MotivationRating_aggregate: MotivationRating_Aggregate;
  /** fetch data from the table: "MotivationRating" using primary key columns */
  MotivationRating_by_pk?: Maybe<MotivationRating>;
  /** fetch data from the table in a streaming manner: "MotivationRating" */
  MotivationRating_stream: Array<MotivationRating>;
  /** fetch data from the table: "Program" */
  Program: Array<Program>;
  /** fetch aggregated fields from the table: "Program" */
  Program_aggregate: Program_Aggregate;
  /** fetch data from the table: "Program" using primary key columns */
  Program_by_pk?: Maybe<Program>;
  /** fetch data from the table in a streaming manner: "Program" */
  Program_stream: Array<Program>;
  /** fetch data from the table: "rentAScientist.RentAScientistConfig" */
  RentAScientistConfig: Array<RentAScientistConfig>;
  /** fetch aggregated fields from the table: "rentAScientist.RentAScientistConfig" */
  RentAScientistConfig_aggregate: RentAScientistConfig_Aggregate;
  /** fetch data from the table: "rentAScientist.RentAScientistConfig" using primary key columns */
  RentAScientistConfig_by_pk?: Maybe<RentAScientistConfig>;
  /** fetch data from the table in a streaming manner: "rentAScientist.RentAScientistConfig" */
  RentAScientistConfig_stream: Array<RentAScientistConfig>;
  /** fetch data from the table: "rentAScientist.School" */
  School: Array<School>;
  /** fetch data from the table: "rentAScientist.SchoolClass" */
  SchoolClass: Array<SchoolClass>;
  /** fetch data from the table: "rentAScientist.SchoolClassRequest" */
  SchoolClassRequest: Array<SchoolClassRequest>;
  /** fetch aggregated fields from the table: "rentAScientist.SchoolClassRequest" */
  SchoolClassRequest_aggregate: SchoolClassRequest_Aggregate;
  /** fetch data from the table: "rentAScientist.SchoolClassRequest" using primary key columns */
  SchoolClassRequest_by_pk?: Maybe<SchoolClassRequest>;
  /** fetch data from the table in a streaming manner: "rentAScientist.SchoolClassRequest" */
  SchoolClassRequest_stream: Array<SchoolClassRequest>;
  /** fetch aggregated fields from the table: "rentAScientist.SchoolClass" */
  SchoolClass_aggregate: SchoolClass_Aggregate;
  /** fetch data from the table: "rentAScientist.SchoolClass" using primary key columns */
  SchoolClass_by_pk?: Maybe<SchoolClass>;
  /** fetch data from the table in a streaming manner: "rentAScientist.SchoolClass" */
  SchoolClass_stream: Array<SchoolClass>;
  /** fetch aggregated fields from the table: "rentAScientist.School" */
  School_aggregate: School_Aggregate;
  /** fetch data from the table: "rentAScientist.School" using primary key columns */
  School_by_pk?: Maybe<School>;
  /** fetch data from the table in a streaming manner: "rentAScientist.School" */
  School_stream: Array<School>;
  /** fetch data from the table: "rentAScientist.Scientist" */
  Scientist: Array<Scientist>;
  /** fetch data from the table: "rentAScientist.ScientistOffer" */
  ScientistOffer: Array<ScientistOffer>;
  /** fetch data from the table: "rentAScientist.ScientistOfferRelation" */
  ScientistOfferRelation: Array<ScientistOfferRelation>;
  /** fetch aggregated fields from the table: "rentAScientist.ScientistOfferRelation" */
  ScientistOfferRelation_aggregate: ScientistOfferRelation_Aggregate;
  /** fetch data from the table: "rentAScientist.ScientistOfferRelation" using primary key columns */
  ScientistOfferRelation_by_pk?: Maybe<ScientistOfferRelation>;
  /** fetch data from the table in a streaming manner: "rentAScientist.ScientistOfferRelation" */
  ScientistOfferRelation_stream: Array<ScientistOfferRelation>;
  /** fetch aggregated fields from the table: "rentAScientist.ScientistOffer" */
  ScientistOffer_aggregate: ScientistOffer_Aggregate;
  /** fetch data from the table: "rentAScientist.ScientistOffer" using primary key columns */
  ScientistOffer_by_pk?: Maybe<ScientistOffer>;
  /** fetch data from the table in a streaming manner: "rentAScientist.ScientistOffer" */
  ScientistOffer_stream: Array<ScientistOffer>;
  /** fetch aggregated fields from the table: "rentAScientist.Scientist" */
  Scientist_aggregate: Scientist_Aggregate;
  /** fetch data from the table: "rentAScientist.Scientist" using primary key columns */
  Scientist_by_pk?: Maybe<Scientist>;
  /** fetch data from the table in a streaming manner: "rentAScientist.Scientist" */
  Scientist_stream: Array<Scientist>;
  /** fetch data from the table: "Session" */
  Session: Array<Session>;
  /** fetch data from the table: "SessionAddress" */
  SessionAddress: Array<SessionAddress>;
  /** fetch aggregated fields from the table: "SessionAddress" */
  SessionAddress_aggregate: SessionAddress_Aggregate;
  /** fetch data from the table: "SessionAddress" using primary key columns */
  SessionAddress_by_pk?: Maybe<SessionAddress>;
  /** fetch data from the table in a streaming manner: "SessionAddress" */
  SessionAddress_stream: Array<SessionAddress>;
  /** fetch data from the table: "SessionSpeaker" */
  SessionSpeaker: Array<SessionSpeaker>;
  /** fetch aggregated fields from the table: "SessionSpeaker" */
  SessionSpeaker_aggregate: SessionSpeaker_Aggregate;
  /** fetch data from the table: "SessionSpeaker" using primary key columns */
  SessionSpeaker_by_pk?: Maybe<SessionSpeaker>;
  /** fetch data from the table in a streaming manner: "SessionSpeaker" */
  SessionSpeaker_stream: Array<SessionSpeaker>;
  /** fetch aggregated fields from the table: "Session" */
  Session_aggregate: Session_Aggregate;
  /** fetch data from the table: "Session" using primary key columns */
  Session_by_pk?: Maybe<Session>;
  /** fetch data from the table in a streaming manner: "Session" */
  Session_stream: Array<Session>;
  /** fetch data from the table: "rentAScientist.Teacher" */
  Teacher: Array<Teacher>;
  /** fetch aggregated fields from the table: "rentAScientist.Teacher" */
  Teacher_aggregate: Teacher_Aggregate;
  /** fetch data from the table: "rentAScientist.Teacher" using primary key columns */
  Teacher_by_pk?: Maybe<Teacher>;
  /** fetch data from the table in a streaming manner: "rentAScientist.Teacher" */
  Teacher_stream: Array<Teacher>;
  /** fetch data from the table: "University" */
  University: Array<University>;
  /** fetch aggregated fields from the table: "University" */
  University_aggregate: University_Aggregate;
  /** fetch data from the table: "University" using primary key columns */
  University_by_pk?: Maybe<University>;
  /** fetch data from the table in a streaming manner: "University" */
  University_stream: Array<University>;
  /** fetch data from the table: "User" */
  User: Array<User>;
  /** fetch data from the table: "UserStatus" */
  UserStatus: Array<UserStatus>;
  /** fetch aggregated fields from the table: "UserStatus" */
  UserStatus_aggregate: UserStatus_Aggregate;
  /** fetch data from the table: "UserStatus" using primary key columns */
  UserStatus_by_pk?: Maybe<UserStatus>;
  /** fetch data from the table in a streaming manner: "UserStatus" */
  UserStatus_stream: Array<UserStatus>;
  /** fetch aggregated fields from the table: "User" */
  User_aggregate: User_Aggregate;
  /** fetch data from the table: "User" using primary key columns */
  User_by_pk?: Maybe<User>;
  /** fetch data from the table in a streaming manner: "User" */
  User_stream: Array<User>;
  /** fetch data from the table: "Weekday" */
  Weekday: Array<Weekday>;
  /** fetch aggregated fields from the table: "Weekday" */
  Weekday_aggregate: Weekday_Aggregate;
  /** fetch data from the table: "Weekday" using primary key columns */
  Weekday_by_pk?: Maybe<Weekday>;
  /** fetch data from the table in a streaming manner: "Weekday" */
  Weekday_stream: Array<Weekday>;
};


export type Subscription_RootAchievementDocumentationTemplateArgs = {
  distinct_on?: InputMaybe<Array<AchievementDocumentationTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementDocumentationTemplate_Order_By>>;
  where?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
};


export type Subscription_RootAchievementDocumentationTemplate_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementDocumentationTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementDocumentationTemplate_Order_By>>;
  where?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
};


export type Subscription_RootAchievementDocumentationTemplate_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAchievementDocumentationTemplate_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementDocumentationTemplate_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementDocumentationTemplate_Bool_Exp>;
};


export type Subscription_RootAchievementOptionArgs = {
  distinct_on?: InputMaybe<Array<AchievementOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOption_Order_By>>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};


export type Subscription_RootAchievementOptionCourseArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


export type Subscription_RootAchievementOptionCourse_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionCourse_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionCourse_Order_By>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


export type Subscription_RootAchievementOptionCourse_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAchievementOptionCourse_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementOptionCourse_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
};


export type Subscription_RootAchievementOptionMentorArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


export type Subscription_RootAchievementOptionMentor_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOptionMentor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOptionMentor_Order_By>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


export type Subscription_RootAchievementOptionMentor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAchievementOptionMentor_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementOptionMentor_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementOptionMentor_Bool_Exp>;
};


export type Subscription_RootAchievementOption_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementOption_Order_By>>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};


export type Subscription_RootAchievementOption_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAchievementOption_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementOption_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementOption_Bool_Exp>;
};


export type Subscription_RootAchievementRecordArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};


export type Subscription_RootAchievementRecordAuthorArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


export type Subscription_RootAchievementRecordAuthor_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordAuthor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordAuthor_Order_By>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


export type Subscription_RootAchievementRecordAuthor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAchievementRecordAuthor_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementRecordAuthor_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementRecordAuthor_Bool_Exp>;
};


export type Subscription_RootAchievementRecordRatingArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordRating_Order_By>>;
  where?: InputMaybe<AchievementRecordRating_Bool_Exp>;
};


export type Subscription_RootAchievementRecordRating_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordRating_Order_By>>;
  where?: InputMaybe<AchievementRecordRating_Bool_Exp>;
};


export type Subscription_RootAchievementRecordRating_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootAchievementRecordRating_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementRecordRating_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementRecordRating_Bool_Exp>;
};


export type Subscription_RootAchievementRecordTypeArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordType_Order_By>>;
  where?: InputMaybe<AchievementRecordType_Bool_Exp>;
};


export type Subscription_RootAchievementRecordType_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecordType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecordType_Order_By>>;
  where?: InputMaybe<AchievementRecordType_Bool_Exp>;
};


export type Subscription_RootAchievementRecordType_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootAchievementRecordType_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementRecordType_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementRecordType_Bool_Exp>;
};


export type Subscription_RootAchievementRecord_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AchievementRecord_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AchievementRecord_Order_By>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};


export type Subscription_RootAchievementRecord_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAchievementRecord_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AchievementRecord_Stream_Cursor_Input>>;
  where?: InputMaybe<AchievementRecord_Bool_Exp>;
};


export type Subscription_RootAdminArgs = {
  distinct_on?: InputMaybe<Array<Admin_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Admin_Order_By>>;
  where?: InputMaybe<Admin_Bool_Exp>;
};


export type Subscription_RootAdmin_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Admin_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Admin_Order_By>>;
  where?: InputMaybe<Admin_Bool_Exp>;
};


export type Subscription_RootAdmin_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAdmin_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Admin_Stream_Cursor_Input>>;
  where?: InputMaybe<Admin_Bool_Exp>;
};


export type Subscription_RootAppSettingsArgs = {
  distinct_on?: InputMaybe<Array<AppSettings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AppSettings_Order_By>>;
  where?: InputMaybe<AppSettings_Bool_Exp>;
};


export type Subscription_RootAppSettings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AppSettings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AppSettings_Order_By>>;
  where?: InputMaybe<AppSettings_Bool_Exp>;
};


export type Subscription_RootAppSettings_By_PkArgs = {
  appName: Scalars['String']['input'];
};


export type Subscription_RootAppSettings_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AppSettings_Stream_Cursor_Input>>;
  where?: InputMaybe<AppSettings_Bool_Exp>;
};


export type Subscription_RootAttendanceArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Subscription_RootAttendanceSourceArgs = {
  distinct_on?: InputMaybe<Array<AttendanceSource_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceSource_Order_By>>;
  where?: InputMaybe<AttendanceSource_Bool_Exp>;
};


export type Subscription_RootAttendanceSource_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AttendanceSource_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceSource_Order_By>>;
  where?: InputMaybe<AttendanceSource_Bool_Exp>;
};


export type Subscription_RootAttendanceSource_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootAttendanceSource_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AttendanceSource_Stream_Cursor_Input>>;
  where?: InputMaybe<AttendanceSource_Bool_Exp>;
};


export type Subscription_RootAttendanceStatusArgs = {
  distinct_on?: InputMaybe<Array<AttendanceStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceStatus_Order_By>>;
  where?: InputMaybe<AttendanceStatus_Bool_Exp>;
};


export type Subscription_RootAttendanceStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AttendanceStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AttendanceStatus_Order_By>>;
  where?: InputMaybe<AttendanceStatus_Bool_Exp>;
};


export type Subscription_RootAttendanceStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootAttendanceStatus_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AttendanceStatus_Stream_Cursor_Input>>;
  where?: InputMaybe<AttendanceStatus_Bool_Exp>;
};


export type Subscription_RootAttendance_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Subscription_RootAttendance_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootAttendance_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Attendance_Stream_Cursor_Input>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Subscription_RootCertificateTemplateProgramArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


export type Subscription_RootCertificateTemplateProgram_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateProgram_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateProgram_Order_By>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


export type Subscription_RootCertificateTemplateProgram_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCertificateTemplateProgram_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CertificateTemplateProgram_Stream_Cursor_Input>>;
  where?: InputMaybe<CertificateTemplateProgram_Bool_Exp>;
};


export type Subscription_RootCertificateTemplateTextArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateText_Order_By>>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};


export type Subscription_RootCertificateTemplateText_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateTemplateText_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateTemplateText_Order_By>>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};


export type Subscription_RootCertificateTemplateText_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCertificateTemplateText_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CertificateTemplateText_Stream_Cursor_Input>>;
  where?: InputMaybe<CertificateTemplateText_Bool_Exp>;
};


export type Subscription_RootCertificateTypeArgs = {
  distinct_on?: InputMaybe<Array<CertificateType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateType_Order_By>>;
  where?: InputMaybe<CertificateType_Bool_Exp>;
};


export type Subscription_RootCertificateType_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CertificateType_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CertificateType_Order_By>>;
  where?: InputMaybe<CertificateType_Bool_Exp>;
};


export type Subscription_RootCertificateType_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootCertificateType_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CertificateType_Stream_Cursor_Input>>;
  where?: InputMaybe<CertificateType_Bool_Exp>;
};


export type Subscription_RootCourseArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


export type Subscription_RootCourseDegreeArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


export type Subscription_RootCourseDegree_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseDegree_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseDegree_Order_By>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


export type Subscription_RootCourseDegree_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCourseDegree_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseDegree_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseDegree_Bool_Exp>;
};


export type Subscription_RootCourseEnrollmentArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


export type Subscription_RootCourseEnrollmentStatusArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollmentStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollmentStatus_Order_By>>;
  where?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
};


export type Subscription_RootCourseEnrollmentStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollmentStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollmentStatus_Order_By>>;
  where?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
};


export type Subscription_RootCourseEnrollmentStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootCourseEnrollmentStatus_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseEnrollmentStatus_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseEnrollmentStatus_Bool_Exp>;
};


export type Subscription_RootCourseEnrollment_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseEnrollment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseEnrollment_Order_By>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


export type Subscription_RootCourseEnrollment_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCourseEnrollment_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseEnrollment_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseEnrollment_Bool_Exp>;
};


export type Subscription_RootCourseGroupArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


export type Subscription_RootCourseGroupOptionArgs = {
  distinct_on?: InputMaybe<Array<CourseGroupOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroupOption_Order_By>>;
  where?: InputMaybe<CourseGroupOption_Bool_Exp>;
};


export type Subscription_RootCourseGroupOption_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseGroupOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroupOption_Order_By>>;
  where?: InputMaybe<CourseGroupOption_Bool_Exp>;
};


export type Subscription_RootCourseGroupOption_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCourseGroupOption_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseGroupOption_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseGroupOption_Bool_Exp>;
};


export type Subscription_RootCourseGroup_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseGroup_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseGroup_Order_By>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


export type Subscription_RootCourseGroup_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCourseGroup_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseGroup_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseGroup_Bool_Exp>;
};


export type Subscription_RootCourseInstructorArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


export type Subscription_RootCourseInstructor_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseInstructor_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseInstructor_Order_By>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


export type Subscription_RootCourseInstructor_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCourseInstructor_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseInstructor_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseInstructor_Bool_Exp>;
};


export type Subscription_RootCourseLocationArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


export type Subscription_RootCourseLocation_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseLocation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseLocation_Order_By>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


export type Subscription_RootCourseLocation_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCourseLocation_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseLocation_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseLocation_Bool_Exp>;
};


export type Subscription_RootCourseStatusArgs = {
  distinct_on?: InputMaybe<Array<CourseStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseStatus_Order_By>>;
  where?: InputMaybe<CourseStatus_Bool_Exp>;
};


export type Subscription_RootCourseStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CourseStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CourseStatus_Order_By>>;
  where?: InputMaybe<CourseStatus_Bool_Exp>;
};


export type Subscription_RootCourseStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootCourseStatus_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CourseStatus_Stream_Cursor_Input>>;
  where?: InputMaybe<CourseStatus_Bool_Exp>;
};


export type Subscription_RootCourse_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Course_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Course_Order_By>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


export type Subscription_RootCourse_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootCourse_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Course_Stream_Cursor_Input>>;
  where?: InputMaybe<Course_Bool_Exp>;
};


export type Subscription_RootEmploymentArgs = {
  distinct_on?: InputMaybe<Array<Employment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Employment_Order_By>>;
  where?: InputMaybe<Employment_Bool_Exp>;
};


export type Subscription_RootEmployment_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employment_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Employment_Order_By>>;
  where?: InputMaybe<Employment_Bool_Exp>;
};


export type Subscription_RootEmployment_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootEmployment_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Employment_Stream_Cursor_Input>>;
  where?: InputMaybe<Employment_Bool_Exp>;
};


export type Subscription_RootExpertArgs = {
  distinct_on?: InputMaybe<Array<Expert_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Expert_Order_By>>;
  where?: InputMaybe<Expert_Bool_Exp>;
};


export type Subscription_RootExpert_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Expert_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Expert_Order_By>>;
  where?: InputMaybe<Expert_Bool_Exp>;
};


export type Subscription_RootExpert_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootExpert_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Expert_Stream_Cursor_Input>>;
  where?: InputMaybe<Expert_Bool_Exp>;
};


export type Subscription_RootLanguageArgs = {
  distinct_on?: InputMaybe<Array<Language_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Language_Order_By>>;
  where?: InputMaybe<Language_Bool_Exp>;
};


export type Subscription_RootLanguage_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Language_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Language_Order_By>>;
  where?: InputMaybe<Language_Bool_Exp>;
};


export type Subscription_RootLanguage_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootLanguage_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Language_Stream_Cursor_Input>>;
  where?: InputMaybe<Language_Bool_Exp>;
};


export type Subscription_RootLocationOptionArgs = {
  distinct_on?: InputMaybe<Array<LocationOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LocationOption_Order_By>>;
  where?: InputMaybe<LocationOption_Bool_Exp>;
};


export type Subscription_RootLocationOption_AggregateArgs = {
  distinct_on?: InputMaybe<Array<LocationOption_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LocationOption_Order_By>>;
  where?: InputMaybe<LocationOption_Bool_Exp>;
};


export type Subscription_RootLocationOption_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootLocationOption_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<LocationOption_Stream_Cursor_Input>>;
  where?: InputMaybe<LocationOption_Bool_Exp>;
};


export type Subscription_RootMailLogArgs = {
  distinct_on?: InputMaybe<Array<MailLog_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailLog_Order_By>>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};


export type Subscription_RootMailLog_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MailLog_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailLog_Order_By>>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};


export type Subscription_RootMailLog_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootMailLog_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<MailLog_Stream_Cursor_Input>>;
  where?: InputMaybe<MailLog_Bool_Exp>;
};


export type Subscription_RootMailStatusArgs = {
  distinct_on?: InputMaybe<Array<MailStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailStatus_Order_By>>;
  where?: InputMaybe<MailStatus_Bool_Exp>;
};


export type Subscription_RootMailStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MailStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailStatus_Order_By>>;
  where?: InputMaybe<MailStatus_Bool_Exp>;
};


export type Subscription_RootMailStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootMailStatus_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<MailStatus_Stream_Cursor_Input>>;
  where?: InputMaybe<MailStatus_Bool_Exp>;
};


export type Subscription_RootMailTemplateArgs = {
  distinct_on?: InputMaybe<Array<MailTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailTemplate_Order_By>>;
  where?: InputMaybe<MailTemplate_Bool_Exp>;
};


export type Subscription_RootMailTemplate_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MailTemplate_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MailTemplate_Order_By>>;
  where?: InputMaybe<MailTemplate_Bool_Exp>;
};


export type Subscription_RootMailTemplate_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootMailTemplate_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<MailTemplate_Stream_Cursor_Input>>;
  where?: InputMaybe<MailTemplate_Bool_Exp>;
};


export type Subscription_RootMotivationRatingArgs = {
  distinct_on?: InputMaybe<Array<MotivationRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MotivationRating_Order_By>>;
  where?: InputMaybe<MotivationRating_Bool_Exp>;
};


export type Subscription_RootMotivationRating_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MotivationRating_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MotivationRating_Order_By>>;
  where?: InputMaybe<MotivationRating_Bool_Exp>;
};


export type Subscription_RootMotivationRating_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootMotivationRating_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<MotivationRating_Stream_Cursor_Input>>;
  where?: InputMaybe<MotivationRating_Bool_Exp>;
};


export type Subscription_RootProgramArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


export type Subscription_RootProgram_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Program_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Program_Order_By>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


export type Subscription_RootProgram_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootProgram_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Program_Stream_Cursor_Input>>;
  where?: InputMaybe<Program_Bool_Exp>;
};


export type Subscription_RootRentAScientistConfigArgs = {
  distinct_on?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RentAScientistConfig_Order_By>>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};


export type Subscription_RootRentAScientistConfig_AggregateArgs = {
  distinct_on?: InputMaybe<Array<RentAScientistConfig_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RentAScientistConfig_Order_By>>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};


export type Subscription_RootRentAScientistConfig_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootRentAScientistConfig_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<RentAScientistConfig_Stream_Cursor_Input>>;
  where?: InputMaybe<RentAScientistConfig_Bool_Exp>;
};


export type Subscription_RootSchoolArgs = {
  distinct_on?: InputMaybe<Array<School_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<School_Order_By>>;
  where?: InputMaybe<School_Bool_Exp>;
};


export type Subscription_RootSchoolClassArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};


export type Subscription_RootSchoolClassRequestArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


export type Subscription_RootSchoolClassRequest_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClassRequest_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClassRequest_Order_By>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


export type Subscription_RootSchoolClassRequest_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootSchoolClassRequest_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<SchoolClassRequest_Stream_Cursor_Input>>;
  where?: InputMaybe<SchoolClassRequest_Bool_Exp>;
};


export type Subscription_RootSchoolClass_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SchoolClass_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SchoolClass_Order_By>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};


export type Subscription_RootSchoolClass_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootSchoolClass_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<SchoolClass_Stream_Cursor_Input>>;
  where?: InputMaybe<SchoolClass_Bool_Exp>;
};


export type Subscription_RootSchool_AggregateArgs = {
  distinct_on?: InputMaybe<Array<School_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<School_Order_By>>;
  where?: InputMaybe<School_Bool_Exp>;
};


export type Subscription_RootSchool_By_PkArgs = {
  dstnr: Scalars['String']['input'];
};


export type Subscription_RootSchool_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<School_Stream_Cursor_Input>>;
  where?: InputMaybe<School_Bool_Exp>;
};


export type Subscription_RootScientistArgs = {
  distinct_on?: InputMaybe<Array<Scientist_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Scientist_Order_By>>;
  where?: InputMaybe<Scientist_Bool_Exp>;
};


export type Subscription_RootScientistOfferArgs = {
  distinct_on?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOffer_Order_By>>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};


export type Subscription_RootScientistOfferRelationArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};


export type Subscription_RootScientistOfferRelation_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ScientistOfferRelation_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOfferRelation_Order_By>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};


export type Subscription_RootScientistOfferRelation_By_PkArgs = {
  offerId: Scalars['Int']['input'];
  scientistId: Scalars['Int']['input'];
};


export type Subscription_RootScientistOfferRelation_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ScientistOfferRelation_Stream_Cursor_Input>>;
  where?: InputMaybe<ScientistOfferRelation_Bool_Exp>;
};


export type Subscription_RootScientistOffer_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ScientistOffer_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ScientistOffer_Order_By>>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};


export type Subscription_RootScientistOffer_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootScientistOffer_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ScientistOffer_Stream_Cursor_Input>>;
  where?: InputMaybe<ScientistOffer_Bool_Exp>;
};


export type Subscription_RootScientist_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Scientist_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Scientist_Order_By>>;
  where?: InputMaybe<Scientist_Bool_Exp>;
};


export type Subscription_RootScientist_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootScientist_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Scientist_Stream_Cursor_Input>>;
  where?: InputMaybe<Scientist_Bool_Exp>;
};


export type Subscription_RootSessionArgs = {
  distinct_on?: InputMaybe<Array<Session_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Session_Order_By>>;
  where?: InputMaybe<Session_Bool_Exp>;
};


export type Subscription_RootSessionAddressArgs = {
  distinct_on?: InputMaybe<Array<SessionAddress_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionAddress_Order_By>>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};


export type Subscription_RootSessionAddress_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SessionAddress_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionAddress_Order_By>>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};


export type Subscription_RootSessionAddress_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootSessionAddress_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<SessionAddress_Stream_Cursor_Input>>;
  where?: InputMaybe<SessionAddress_Bool_Exp>;
};


export type Subscription_RootSessionSpeakerArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};


export type Subscription_RootSessionSpeaker_AggregateArgs = {
  distinct_on?: InputMaybe<Array<SessionSpeaker_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<SessionSpeaker_Order_By>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};


export type Subscription_RootSessionSpeaker_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootSessionSpeaker_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<SessionSpeaker_Stream_Cursor_Input>>;
  where?: InputMaybe<SessionSpeaker_Bool_Exp>;
};


export type Subscription_RootSession_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Session_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Session_Order_By>>;
  where?: InputMaybe<Session_Bool_Exp>;
};


export type Subscription_RootSession_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootSession_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Session_Stream_Cursor_Input>>;
  where?: InputMaybe<Session_Bool_Exp>;
};


export type Subscription_RootTeacherArgs = {
  distinct_on?: InputMaybe<Array<Teacher_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Teacher_Order_By>>;
  where?: InputMaybe<Teacher_Bool_Exp>;
};


export type Subscription_RootTeacher_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Teacher_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Teacher_Order_By>>;
  where?: InputMaybe<Teacher_Bool_Exp>;
};


export type Subscription_RootTeacher_By_PkArgs = {
  id: Scalars['Int']['input'];
};


export type Subscription_RootTeacher_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Teacher_Stream_Cursor_Input>>;
  where?: InputMaybe<Teacher_Bool_Exp>;
};


export type Subscription_RootUniversityArgs = {
  distinct_on?: InputMaybe<Array<University_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<University_Order_By>>;
  where?: InputMaybe<University_Bool_Exp>;
};


export type Subscription_RootUniversity_AggregateArgs = {
  distinct_on?: InputMaybe<Array<University_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<University_Order_By>>;
  where?: InputMaybe<University_Bool_Exp>;
};


export type Subscription_RootUniversity_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootUniversity_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<University_Stream_Cursor_Input>>;
  where?: InputMaybe<University_Bool_Exp>;
};


export type Subscription_RootUserArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};


export type Subscription_RootUserStatusArgs = {
  distinct_on?: InputMaybe<Array<UserStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<UserStatus_Order_By>>;
  where?: InputMaybe<UserStatus_Bool_Exp>;
};


export type Subscription_RootUserStatus_AggregateArgs = {
  distinct_on?: InputMaybe<Array<UserStatus_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<UserStatus_Order_By>>;
  where?: InputMaybe<UserStatus_Bool_Exp>;
};


export type Subscription_RootUserStatus_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootUserStatus_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<UserStatus_Stream_Cursor_Input>>;
  where?: InputMaybe<UserStatus_Bool_Exp>;
};


export type Subscription_RootUser_AggregateArgs = {
  distinct_on?: InputMaybe<Array<User_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<User_Order_By>>;
  where?: InputMaybe<User_Bool_Exp>;
};


export type Subscription_RootUser_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootUser_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<User_Stream_Cursor_Input>>;
  where?: InputMaybe<User_Bool_Exp>;
};


export type Subscription_RootWeekdayArgs = {
  distinct_on?: InputMaybe<Array<Weekday_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Weekday_Order_By>>;
  where?: InputMaybe<Weekday_Bool_Exp>;
};


export type Subscription_RootWeekday_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Weekday_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Weekday_Order_By>>;
  where?: InputMaybe<Weekday_Bool_Exp>;
};


export type Subscription_RootWeekday_By_PkArgs = {
  value: Scalars['String']['input'];
};


export type Subscription_RootWeekday_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Weekday_Stream_Cursor_Input>>;
  where?: InputMaybe<Weekday_Bool_Exp>;
};

/** Boolean expression to compare columns of type "time". All fields are combined with logical 'AND'. */
export type Time_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['time']['input']>;
  _gt?: InputMaybe<Scalars['time']['input']>;
  _gte?: InputMaybe<Scalars['time']['input']>;
  _in?: InputMaybe<Array<Scalars['time']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['time']['input']>;
  _lte?: InputMaybe<Scalars['time']['input']>;
  _neq?: InputMaybe<Scalars['time']['input']>;
  _nin?: InputMaybe<Array<Scalars['time']['input']>>;
};

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['timestamptz']['input']>;
  _gt?: InputMaybe<Scalars['timestamptz']['input']>;
  _gte?: InputMaybe<Scalars['timestamptz']['input']>;
  _in?: InputMaybe<Array<Scalars['timestamptz']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['timestamptz']['input']>;
  _lte?: InputMaybe<Scalars['timestamptz']['input']>;
  _neq?: InputMaybe<Scalars['timestamptz']['input']>;
  _nin?: InputMaybe<Array<Scalars['timestamptz']['input']>>;
};

/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['uuid']['input']>;
  _gt?: InputMaybe<Scalars['uuid']['input']>;
  _gte?: InputMaybe<Scalars['uuid']['input']>;
  _in?: InputMaybe<Array<Scalars['uuid']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['uuid']['input']>;
  _lte?: InputMaybe<Scalars['uuid']['input']>;
  _neq?: InputMaybe<Scalars['uuid']['input']>;
  _nin?: InputMaybe<Array<Scalars['uuid']['input']>>;
};

export type AchievementRecordAuthorFragmentFragment = { __typename?: 'AchievementRecordAuthor', id: number, created_at: any, User: (
    { __typename?: 'User' }
    & { ' $fragmentRefs'?: { 'UserFragmentFragment': UserFragmentFragment } }
  ) } & { ' $fragmentName'?: 'AchievementRecordAuthorFragmentFragment' };

export type AchievementOptionFragmentFragment = { __typename?: 'AchievementOption', id: number, title: string, description?: string | null, recordType: AchievementRecordType_Enum, evaluationScriptUrl?: string | null, csvTemplateUrl?: string | null, showScoreAuthors?: boolean | null, achievementDocumentationTemplateId?: number | null, AchievementOptionTemplate?: { __typename?: 'AchievementDocumentationTemplate', title: string, url: string } | null } & { ' $fragmentName'?: 'AchievementOptionFragmentFragment' };

export type AchievementRecordFragmentFragment = { __typename?: 'AchievementRecord', id: number, created_at?: any | null, csvResults?: string | null, description?: string | null, achievementOptionId: number, uploadUserId: any, coverImageUrl?: string | null, score?: any | null, rating: AchievementRecordRating_Enum, documentationUrl?: string | null, AchievementOption: { __typename?: 'AchievementOption', id: number, title: string, recordType: AchievementRecordType_Enum } } & { ' $fragmentName'?: 'AchievementRecordFragmentFragment' };

export type CourseEnrollmentFragmentFragment = { __typename?: 'CourseEnrollment', id: number, courseId: number, userId: any, invitationExpirationDate?: any | null, motivationLetter: string, status: CourseEnrollmentStatus_Enum, achievementCertificateURL?: string | null, attendanceCertificateURL?: string | null } & { ' $fragmentName'?: 'CourseEnrollmentFragmentFragment' };

export type CourseTileFragmentFragment = { __typename?: 'Course', id: number, title: string, tagline: string, coverImage?: string | null, language?: string | null, weekDay: Weekday_Enum, startTime?: any | null, endTime?: any | null, Program: { __typename?: 'Program', published: boolean, title: string }, CourseLocations: Array<{ __typename?: 'CourseLocation', locationOption?: LocationOption_Enum | null }> } & { ' $fragmentName'?: 'CourseTileFragmentFragment' };

export type CourseTileFragmentAnonymousFragment = { __typename?: 'Course', id: number, weekDay: Weekday_Enum, published: boolean, coverImage?: string | null, language?: string | null, title: string, startTime?: any | null, endTime?: any | null, CourseGroups: Array<{ __typename?: 'CourseGroup', id: number, CourseGroupOption: { __typename?: 'CourseGroupOption', id: number, title: string, order: number } }> } & { ' $fragmentName'?: 'CourseTileFragmentAnonymousFragment' };

export type CourseFragmentFragment = { __typename?: 'Course', id: number, ects: string, tagline: string, weekDay: Weekday_Enum, cost: string, published: boolean, applicationEnd: any, coverImage?: string | null, language?: string | null, maxMissedSessions: number, chatLink?: string | null, title: string, achievementCertificatePossible: boolean, attendanceCertificatePossible: boolean, programId: number, maxParticipants?: number | null, learningGoals?: string | null, headingDescriptionField1?: string | null, contentDescriptionField1?: string | null, headingDescriptionField2?: string | null, contentDescriptionField2?: string | null, externalRegistrationLink?: string | null, startTime?: any | null, endTime?: any | null, Sessions: Array<(
    { __typename?: 'Session' }
    & { ' $fragmentRefs'?: { 'SessionFragmentFragment': SessionFragmentFragment } }
  )>, CourseInstructors: Array<(
    { __typename?: 'CourseInstructor' }
    & { ' $fragmentRefs'?: { 'CourseInstructorFragmentFragment': CourseInstructorFragmentFragment } }
  )>, CourseLocations: Array<{ __typename?: 'CourseLocation', id: number, defaultSessionAddress?: string | null, locationOption?: LocationOption_Enum | null }>, Program: (
    { __typename?: 'Program' }
    & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
  ), CourseGroups: Array<{ __typename?: 'CourseGroup', id: number, CourseGroupOption: { __typename?: 'CourseGroupOption', id: number, title: string, order: number } }>, DegreeCourses: Array<{ __typename?: 'CourseDegree', id: number, courseId: number, Course: { __typename?: 'Course', id: number, title: string, published: boolean, ects: string, Program: { __typename?: 'Program', id: number, published: boolean } } }> } & { ' $fragmentName'?: 'CourseFragmentFragment' };

export type AdminCourseFragmentFragment = (
  { __typename?: 'Course', learningGoals?: string | null, status: CourseStatus_Enum, published: boolean, achievementCertificatePossible: boolean, attendanceCertificatePossible: boolean, chatLink?: string | null, Program: (
    { __typename?: 'Program' }
    & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
  ) }
  & { ' $fragmentRefs'?: { 'CourseFragmentFragment': CourseFragmentFragment } }
) & { ' $fragmentName'?: 'AdminCourseFragmentFragment' };

export type CourseFragmentMinimumFragment = { __typename?: 'Course', id: number, title: string, status: CourseStatus_Enum, ects: string, tagline: string, language?: string | null, applicationEnd: any, cost: string, achievementCertificatePossible: boolean, attendanceCertificatePossible: boolean, maxMissedSessions: number, weekDay: Weekday_Enum, coverImage?: string | null, programId: number, learningGoals?: string | null, chatLink?: string | null, published: boolean, maxParticipants?: number | null, endTime?: any | null, startTime?: any | null } & { ' $fragmentName'?: 'CourseFragmentMinimumFragment' };

export type CourseInstructorFragmentFragment = { __typename?: 'CourseInstructor', id: number, Expert: { __typename?: 'Expert', id: number, description?: string | null, User: { __typename?: 'User', firstName: string, picture?: string | null, id: any, lastName: string, university?: University_Enum | null, otherUniversity?: string | null, externalProfile?: string | null } } } & { ' $fragmentName'?: 'CourseInstructorFragmentFragment' };

export type EnrollmentFragmentFragment = { __typename?: 'CourseEnrollment', userId: any, courseId: number, invitationExpirationDate?: any | null, id: number, status: CourseEnrollmentStatus_Enum, achievementCertificateURL?: string | null, attendanceCertificateURL?: string | null } & { ' $fragmentName'?: 'EnrollmentFragmentFragment' };

export type AdminEnrollmentFragmentFragment = (
  { __typename?: 'CourseEnrollment', motivationLetter: string, motivationRating: MotivationRating_Enum }
  & { ' $fragmentRefs'?: { 'EnrollmentFragmentFragment': EnrollmentFragmentFragment } }
) & { ' $fragmentName'?: 'AdminEnrollmentFragmentFragment' };

export type ProgramFragmentMinimumPropertiesFragment = { __typename?: 'Program', id: number, title: string, shortTitle?: string | null, lectureStart?: any | null, lectureEnd?: any | null, defaultApplicationEnd?: any | null, achievementRecordUploadDeadline?: any | null, published: boolean, visibilityAchievementCertificate?: boolean | null, visibilityAttendanceCertificate?: boolean | null } & { ' $fragmentName'?: 'ProgramFragmentMinimumPropertiesFragment' };

export type ProgramFragmentFragment = (
  { __typename?: 'Program', defaultApplicationEnd?: any | null, applicationStart?: any | null, id: number, lectureEnd?: any | null, lectureStart?: any | null, title: string, shortTitle?: string | null, achievementRecordUploadDeadline?: any | null, published: boolean, visibilityAchievementCertificate?: boolean | null, visibilityAttendanceCertificate?: boolean | null }
  & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
) & { ' $fragmentName'?: 'ProgramFragmentFragment' };

export type AdminProgramFragmentFragment = (
  { __typename?: 'Program', applicationStart?: any | null, closingQuestionnaire?: string | null, defaultApplicationEnd?: any | null, defaultMaxMissedSessions?: number | null, speakerQuestionnaire?: string | null, startQuestionnaire?: string | null, attendanceCertificateTemplateURL?: string | null, achievementCertificateTemplateURL?: string | null, visibility: boolean, visibilityAchievementCertificate?: boolean | null, visibilityAttendanceCertificate?: boolean | null }
  & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
) & { ' $fragmentName'?: 'AdminProgramFragmentFragment' };

export type SessionFragmentFragment = { __typename?: 'Session', id: number, endDateTime: any, courseId: number, description: string, startDateTime: any, title: string, SessionAddresses: Array<{ __typename?: 'SessionAddress', id: number, address: string, CourseLocation?: { __typename?: 'CourseLocation', id: number, locationOption?: LocationOption_Enum | null, defaultSessionAddress?: string | null } | null }>, SessionSpeakers: Array<{ __typename?: 'SessionSpeaker', Expert: { __typename?: 'Expert', User: { __typename?: 'User', id: any, firstName: string, lastName: string, picture?: string | null, externalProfile?: string | null, university?: University_Enum | null, otherUniversity?: string | null } } }> } & { ' $fragmentName'?: 'SessionFragmentFragment' };

export type AdminSessionFragmentFragment = (
  { __typename?: 'Session', SessionSpeakers: Array<{ __typename?: 'SessionSpeaker', id: number, Expert: { __typename?: 'Expert', id: number, User: (
        { __typename?: 'User' }
        & { ' $fragmentRefs'?: { 'UserFragmentFragment': UserFragmentFragment } }
      ) } }> }
  & { ' $fragmentRefs'?: { 'SessionFragmentFragment': SessionFragmentFragment } }
) & { ' $fragmentName'?: 'AdminSessionFragmentFragment' };

export type UserFragmentFragment = { __typename?: 'User', id: any, firstName: string, lastName: string, email: string, picture?: string | null, externalProfile?: string | null, university?: University_Enum | null, otherUniversity?: string | null } & { ' $fragmentName'?: 'UserFragmentFragment' };

export type InsertCourseGroupMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  tagId: Scalars['Int']['input'];
}>;


export type InsertCourseGroupMutation = { __typename?: 'mutation_root', insert_CourseGroup?: { __typename?: 'CourseGroup_mutation_response', affected_rows: number } | null };

export type DeleteCourseGroupMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  tagId: Scalars['Int']['input'];
}>;


export type DeleteCourseGroupMutation = { __typename?: 'mutation_root', delete_CourseGroup?: { __typename?: 'CourseGroup_mutation_response', affected_rows: number } | null };

export type UpdateEnrollmentMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  courseId: Scalars['Int']['input'];
  motivationLetter: Scalars['String']['input'];
  status: CourseEnrollmentStatus_Enum;
}>;


export type UpdateEnrollmentMutation = { __typename?: 'mutation_root', insert_CourseEnrollment?: { __typename?: 'CourseEnrollment_mutation_response', affected_rows: number } | null };

export type InsertEnrollmentMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  courseId: Scalars['Int']['input'];
  motivationLetter: Scalars['String']['input'];
}>;


export type InsertEnrollmentMutation = { __typename?: 'mutation_root', insert_CourseEnrollment?: { __typename?: 'CourseEnrollment_mutation_response', affected_rows: number, returning: Array<(
      { __typename?: 'CourseEnrollment', Course: (
        { __typename?: 'Course', CourseEnrollments: Array<(
          { __typename?: 'CourseEnrollment' }
          & { ' $fragmentRefs'?: { 'EnrollmentFragmentFragment': EnrollmentFragmentFragment } }
        )> }
        & { ' $fragmentRefs'?: { 'CourseFragmentFragment': CourseFragmentFragment } }
      ) }
      & { ' $fragmentRefs'?: { 'EnrollmentFragmentFragment': EnrollmentFragmentFragment } }
    )> } | null };

export type UpdateEnrollmentRatingMutationVariables = Exact<{
  enrollmentId: Scalars['Int']['input'];
  rating: MotivationRating_Enum;
}>;


export type UpdateEnrollmentRatingMutation = { __typename?: 'mutation_root', update_CourseEnrollment_by_pk?: { __typename?: 'CourseEnrollment', id: number } | null };

export type UpdateEnrollmentForInviteMutationVariables = Exact<{
  enrollmentId: Scalars['Int']['input'];
  expire: Scalars['date']['input'];
}>;


export type UpdateEnrollmentForInviteMutation = { __typename?: 'mutation_root', update_CourseEnrollment_by_pk?: { __typename?: 'CourseEnrollment', id: number } | null };

export type UpdateEnrollmentStatusMutationVariables = Exact<{
  enrollmentId: Scalars['Int']['input'];
  status: CourseEnrollmentStatus_Enum;
  expire?: InputMaybe<Scalars['date']['input']>;
}>;


export type UpdateEnrollmentStatusMutation = { __typename?: 'mutation_root', update_CourseEnrollment_by_pk?: { __typename?: 'CourseEnrollment', id: number } | null };

export type InsertUserMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  email: Scalars['String']['input'];
}>;


export type InsertUserMutation = { __typename?: 'mutation_root', insert_User?: { __typename?: 'User_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'User', id: any, picture?: string | null, email: string, firstName: string, lastName: string }> } | null };

export type InsertSingleUserMutationVariables = Exact<{
  user: User_Insert_Input;
}>;


export type InsertSingleUserMutation = { __typename?: 'mutation_root', insert_User_one?: { __typename?: 'User', id: any, picture?: string | null, email: string, firstName: string, lastName: string } | null };

export type InsertAnAchievementOptionMutationVariables = Exact<{
  data: AchievementOption_Insert_Input;
}>;


export type InsertAnAchievementOptionMutation = { __typename?: 'mutation_root', insert_AchievementOption_one?: { __typename?: 'AchievementOption', id: number } | null };

export type UpdateAnAchievementOptionMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  changes?: InputMaybe<AchievementOption_Set_Input>;
}>;


export type UpdateAnAchievementOptionMutation = { __typename?: 'mutation_root', update_AchievementOption_by_pk?: { __typename?: 'AchievementOption', id: number } | null };

export type DeleteAnAchievementOptionMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type DeleteAnAchievementOptionMutation = { __typename?: 'mutation_root', delete_AchievementOption_by_pk?: { __typename?: 'AchievementOption', id: number } | null };

export type InsertAnAchievementOptionCourseMutationVariables = Exact<{
  data: AchievementOptionCourse_Insert_Input;
}>;


export type InsertAnAchievementOptionCourseMutation = { __typename?: 'mutation_root', insert_AchievementOptionCourse_one?: { __typename?: 'AchievementOptionCourse', id: number } | null };

export type UpdateAnAchievementOptionCourseMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  changes?: InputMaybe<AchievementOptionCourse_Set_Input>;
}>;


export type UpdateAnAchievementOptionCourseMutation = { __typename?: 'mutation_root', update_AchievementOptionCourse_by_pk?: { __typename?: 'AchievementOptionCourse', id: number } | null };

export type DeleteAnAchievementOptionCourseMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type DeleteAnAchievementOptionCourseMutation = { __typename?: 'mutation_root', delete_AchievementOptionCourse_by_pk?: { __typename?: 'AchievementOptionCourse', id: number } | null };

export type DeleteAnAchievementOptionCourseWithWhereMutationVariables = Exact<{
  where?: AchievementOptionCourse_Bool_Exp;
}>;


export type DeleteAnAchievementOptionCourseWithWhereMutation = { __typename?: 'mutation_root', delete_AchievementOptionCourse?: { __typename?: 'AchievementOptionCourse_mutation_response', affected_rows: number } | null };

export type InsertAnAchievementOptionMentorMutationVariables = Exact<{
  data: AchievementOptionMentor_Insert_Input;
}>;


export type InsertAnAchievementOptionMentorMutation = { __typename?: 'mutation_root', insert_AchievementOptionMentor_one?: { __typename?: 'AchievementOptionMentor', id: number } | null };

export type UpdateAnAchievementOptionMentorMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  changes?: InputMaybe<AchievementOptionMentor_Set_Input>;
}>;


export type UpdateAnAchievementOptionMentorMutation = { __typename?: 'mutation_root', update_AchievementOptionMentor_by_pk?: { __typename?: 'AchievementOptionMentor', id: number } | null };

export type DeleteAnAchievementOptionMentorMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type DeleteAnAchievementOptionMentorMutation = { __typename?: 'mutation_root', delete_AchievementOptionMentor_by_pk?: { __typename?: 'AchievementOptionMentor', id: number } | null };

export type DeleteAnAchievementOptionMentorWithWhereMutationVariables = Exact<{
  where?: AchievementOptionMentor_Bool_Exp;
}>;


export type DeleteAnAchievementOptionMentorWithWhereMutation = { __typename?: 'mutation_root', delete_AchievementOptionMentor?: { __typename?: 'AchievementOptionMentor_mutation_response', affected_rows: number } | null };

export type InsertCourseWithLocationMutationVariables = Exact<{
  title: Scalars['String']['input'];
  applicationEnd: Scalars['date']['input'];
  maxMissedSessions: Scalars['Int']['input'];
  programId: Scalars['Int']['input'];
  locationOption: LocationOption_Enum;
}>;


export type InsertCourseWithLocationMutation = { __typename?: 'mutation_root', insert_Course?: { __typename?: 'Course_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'Course', id: number, CourseLocations: Array<{ __typename?: 'CourseLocation', id: number }> }> } | null };

export type InsertSingleCourseMutationVariables = Exact<{
  course: Course_Insert_Input;
}>;


export type InsertSingleCourseMutation = { __typename?: 'mutation_root', insert_Course_one?: { __typename?: 'Course', id: number } | null };

export type DeleteCourseByPkMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type DeleteCourseByPkMutation = { __typename?: 'mutation_root', delete_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseByPkMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  changes?: InputMaybe<Course_Set_Input>;
}>;


export type UpdateCourseByPkMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type InsertCourseInstructorMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  expertId: Scalars['Int']['input'];
}>;


export type InsertCourseInstructorMutation = { __typename?: 'mutation_root', insert_CourseInstructor?: { __typename?: 'CourseInstructor_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'CourseInstructor', id: number }> } | null };

export type DeleteCourseInstructorMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  expertId: Scalars['Int']['input'];
}>;


export type DeleteCourseInstructorMutation = { __typename?: 'mutation_root', delete_CourseInstructor?: { __typename?: 'CourseInstructor_mutation_response', affected_rows: number } | null };

export type InsertProgramMutationVariables = Exact<{
  title: Scalars['String']['input'];
  today: Scalars['date']['input'];
}>;


export type InsertProgramMutation = { __typename?: 'mutation_root', insert_Program?: { __typename?: 'Program_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'Program', id: number }> } | null };

export type DeleteProgramMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
}>;


export type DeleteProgramMutation = { __typename?: 'mutation_root', delete_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramVisibilityMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  visible: Scalars['Boolean']['input'];
}>;


export type UpdateProgramVisibilityMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramPublishedMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  published: Scalars['Boolean']['input'];
}>;


export type UpdateProgramPublishedMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramTitleMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
}>;


export type UpdateProgramTitleMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramShortTitleMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  shortTitle: Scalars['String']['input'];
}>;


export type UpdateProgramShortTitleMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramParticipationTemplateMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  templatePath: Scalars['String']['input'];
}>;


export type UpdateProgramParticipationTemplateMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramAchievementTemplateMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  templatePath: Scalars['String']['input'];
}>;


export type UpdateProgramAchievementTemplateMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramApplicationStartMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  applicationStart: Scalars['date']['input'];
}>;


export type UpdateProgramApplicationStartMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramApplicationEndMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  applicationEnd: Scalars['date']['input'];
}>;


export type UpdateProgramApplicationEndMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramLectureStartMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  lectureStart: Scalars['date']['input'];
}>;


export type UpdateProgramLectureStartMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramLectureEndMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  lectureEnd: Scalars['date']['input'];
}>;


export type UpdateProgramLectureEndMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramUploadDeadlineMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  deadline: Scalars['date']['input'];
}>;


export type UpdateProgramUploadDeadlineMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramStartQuestionaireMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  questionaire: Scalars['String']['input'];
}>;


export type UpdateProgramStartQuestionaireMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramSpeakerQuestionaireMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  questionaire: Scalars['String']['input'];
}>;


export type UpdateProgramSpeakerQuestionaireMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramClosingQuestionaireMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  questionaire: Scalars['String']['input'];
}>;


export type UpdateProgramClosingQuestionaireMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramAchievementCertVisibleMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  isVisible: Scalars['Boolean']['input'];
}>;


export type UpdateProgramAchievementCertVisibleMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateProgramParticipationCertVisibleMutationVariables = Exact<{
  programId: Scalars['Int']['input'];
  isVisible: Scalars['Boolean']['input'];
}>;


export type UpdateProgramParticipationCertVisibleMutation = { __typename?: 'mutation_root', update_Program_by_pk?: { __typename?: 'Program', id: number } | null };

export type UpdateUserMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  matriculationNumber?: InputMaybe<Scalars['String']['input']>;
  university?: InputMaybe<University_Enum>;
  externalProfile?: InputMaybe<Scalars['String']['input']>;
  employment?: InputMaybe<Employment_Enum>;
  picture?: InputMaybe<Scalars['String']['input']>;
}>;


export type UpdateUserMutation = { __typename?: 'mutation_root', update_User_by_pk?: { __typename?: 'User', id: any, firstName: string, matriculationNumber?: string | null, lastName: string, employment?: Employment_Enum | null, email: string, externalProfile?: string | null, university?: University_Enum | null, picture?: string | null } | null };

export type UpdateUserOnEnrollmentConfirmationMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  matriculationNumber?: InputMaybe<Scalars['String']['input']>;
  otherUniversity?: InputMaybe<Scalars['String']['input']>;
  university?: InputMaybe<University_Enum>;
  employment?: InputMaybe<Employment_Enum>;
}>;


export type UpdateUserOnEnrollmentConfirmationMutation = { __typename?: 'mutation_root', update_User_by_pk?: { __typename?: 'User', id: any, matriculationNumber?: string | null, employment?: Employment_Enum | null, otherUniversity?: string | null, university?: University_Enum | null } | null };

export type UpdateUserProfilePictureMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  picture?: InputMaybe<Scalars['String']['input']>;
}>;


export type UpdateUserProfilePictureMutation = { __typename?: 'mutation_root', update_User_by_pk?: { __typename?: 'User', id: any, picture?: string | null } | null };

export type AchievementDocumentationTemplatesQueryVariables = Exact<{ [key: string]: never; }>;


export type AchievementDocumentationTemplatesQuery = { __typename?: 'query_root', AchievementDocumentationTemplate: Array<{ __typename?: 'AchievementDocumentationTemplate', id: number, title: string, url: string, updated_at: any }> };

export type InsertAchievementDocumentationTemplateMutationVariables = Exact<{
  insertInput: AchievementDocumentationTemplate_Insert_Input;
}>;


export type InsertAchievementDocumentationTemplateMutation = { __typename?: 'mutation_root', insert_AchievementDocumentationTemplate_one?: { __typename?: 'AchievementDocumentationTemplate', id: number } | null };

export type UpdateAchievementDocumentationTemplateMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
}>;


export type UpdateAchievementDocumentationTemplateMutation = { __typename?: 'mutation_root', update_AchievementDocumentationTemplate_by_pk?: { __typename?: 'AchievementDocumentationTemplate', id: number, title: string } | null };

export type UpdateAchievementDocumentationTemplateTitleMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text?: InputMaybe<Scalars['String']['input']>;
}>;


export type UpdateAchievementDocumentationTemplateTitleMutation = { __typename?: 'mutation_root', update_AchievementDocumentationTemplate_by_pk?: { __typename?: 'AchievementDocumentationTemplate', id: number, title: string } | null };

export type DeleteAchievementDocumentationTemplateMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type DeleteAchievementDocumentationTemplateMutation = { __typename?: 'mutation_root', delete_AchievementDocumentationTemplate_by_pk?: { __typename?: 'AchievementDocumentationTemplate', id: number } | null };

export type AchievementRecordTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type AchievementRecordTypesQuery = { __typename?: 'query_root', AchievementRecordType: Array<{ __typename?: 'AchievementRecordType', value: string }> };

export type AchievementOptionListQueryVariables = Exact<{
  where?: AchievementOption_Bool_Exp;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AchievementOption_Order_By>;
}>;


export type AchievementOptionListQuery = { __typename?: 'query_root', AchievementOption: Array<(
    { __typename?: 'AchievementOption', AchievementOptionCourses: Array<{ __typename?: 'AchievementOptionCourse', id: number, courseId: number, Course: { __typename?: 'Course', title: string, Program: (
          { __typename?: 'Program' }
          & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
        ) } }>, AchievementOptionMentors: Array<{ __typename?: 'AchievementOptionMentor', id: number, User: (
        { __typename?: 'User' }
        & { ' $fragmentRefs'?: { 'UserFragmentFragment': UserFragmentFragment } }
      ) }> }
    & { ' $fragmentRefs'?: { 'AchievementOptionFragmentFragment': AchievementOptionFragmentFragment } }
  )> };

export type AchievementOptionCoursesQueryVariables = Exact<{
  where?: InputMaybe<AchievementOptionCourse_Bool_Exp>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderByAchievementOptionCourse?: InputMaybe<AchievementOptionCourse_Order_By>;
}>;


export type AchievementOptionCoursesQuery = { __typename?: 'query_root', AchievementOptionCourse: Array<{ __typename?: 'AchievementOptionCourse', id: number, courseId: number, achievementOptionId: number, created_at: any, AchievementOption: (
      { __typename?: 'AchievementOption' }
      & { ' $fragmentRefs'?: { 'AchievementOptionFragmentFragment': AchievementOptionFragmentFragment } }
    ) }> };

export type AchievementRecordAuthorQueryQueryVariables = Exact<{
  where?: AchievementRecordAuthor_Bool_Exp;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AchievementRecordAuthor_Order_By>;
}>;


export type AchievementRecordAuthorQueryQuery = { __typename?: 'query_root', AchievementRecordAuthor: Array<{ __typename?: 'AchievementRecordAuthor', id: number, created_at: any, User: (
      { __typename?: 'User' }
      & { ' $fragmentRefs'?: { 'UserFragmentFragment': UserFragmentFragment } }
    ) }> };

export type InsertAnAchievementRecordMutationVariables = Exact<{
  insertInput: AchievementRecord_Insert_Input;
}>;


export type InsertAnAchievementRecordMutation = { __typename?: 'mutation_root', insert_AchievementRecord_one?: { __typename?: 'AchievementRecord', id: number } | null };

export type UpdateAchievementRecordByPkMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  setInput: AchievementRecord_Set_Input;
}>;


export type UpdateAchievementRecordByPkMutation = { __typename?: 'mutation_root', update_AchievementRecord_by_pk?: { __typename?: 'AchievementRecord', id: number } | null };

export type InsertAnAchievementRecordAuthorMutationVariables = Exact<{
  insertInput: AchievementRecordAuthor_Insert_Input;
}>;


export type InsertAnAchievementRecordAuthorMutation = { __typename?: 'mutation_root', insert_AchievementRecordAuthor_one?: { __typename?: 'AchievementRecordAuthor', id: number } | null };

export type DeleteAchievementRecordAuthorByPkMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type DeleteAchievementRecordAuthorByPkMutation = { __typename?: 'mutation_root', delete_AchievementRecordAuthor_by_pk?: { __typename?: 'AchievementRecordAuthor', id: number } | null };

export type AchievementRecordListWithAuthorsQueryVariables = Exact<{
  where?: AchievementRecord_Bool_Exp;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AchievementRecord_Order_By>;
}>;


export type AchievementRecordListWithAuthorsQuery = { __typename?: 'query_root', AchievementRecord: Array<(
    { __typename?: 'AchievementRecord', AchievementRecordAuthors: Array<(
      { __typename?: 'AchievementRecordAuthor' }
      & { ' $fragmentRefs'?: { 'AchievementRecordAuthorFragmentFragment': AchievementRecordAuthorFragmentFragment } }
    )> }
    & { ' $fragmentRefs'?: { 'AchievementRecordFragmentFragment': AchievementRecordFragmentFragment } }
  )> };

export type LoadParticipationDataQueryVariables = Exact<{
  programId: Scalars['Int']['input'];
}>;


export type LoadParticipationDataQuery = { __typename?: 'query_root', loadParticipationData?: { __typename?: 'loadFileOutput', link: string } | null };

export type SaveAttendanceCertificateTemplateMutationVariables = Exact<{
  base64File: Scalars['String']['input'];
  fileName: Scalars['String']['input'];
  programId: Scalars['Int']['input'];
}>;


export type SaveAttendanceCertificateTemplateMutation = { __typename?: 'mutation_root', saveAttendanceCertificateTemplate?: { __typename?: 'saveFileOutput', file_path: string, google_link: string } | null };

export type SaveAchievementCertificateTemplateMutationVariables = Exact<{
  base64File: Scalars['String']['input'];
  fileName: Scalars['String']['input'];
  programId: Scalars['Int']['input'];
}>;


export type SaveAchievementCertificateTemplateMutation = { __typename?: 'mutation_root', saveAchievementCertificateTemplate?: { __typename?: 'saveFileOutput', file_path: string, google_link: string } | null };

export type SaveAchievementRecordCoverImageMutationVariables = Exact<{
  base64File: Scalars['String']['input'];
  fileName: Scalars['String']['input'];
  achievementRecordId: Scalars['Int']['input'];
}>;


export type SaveAchievementRecordCoverImageMutation = { __typename?: 'mutation_root', saveAchievementRecordCoverImage?: { __typename?: 'saveFileOutput', file_path: string, google_link: string } | null };

export type SaveAchievementRecordDocumentationMutationVariables = Exact<{
  base64File: Scalars['String']['input'];
  fileName: Scalars['String']['input'];
  achievementRecordId: Scalars['Int']['input'];
}>;


export type SaveAchievementRecordDocumentationMutation = { __typename?: 'mutation_root', saveAchievementRecordDocumentation?: { __typename?: 'saveFileOutput', file_path: string, google_link: string } | null };

export type SaveAchievementDocumentationTemplateMutationVariables = Exact<{
  base64File: Scalars['String']['input'];
  fileName: Scalars['String']['input'];
  achievementDocumentationTemplateId: Scalars['Int']['input'];
}>;


export type SaveAchievementDocumentationTemplateMutation = { __typename?: 'mutation_root', saveAchievementDocumentationTemplate?: { __typename?: 'saveFileOutput', file_path: string, google_link: string } | null };

export type GetSignedUrlQueryVariables = Exact<{
  path: Scalars['String']['input'];
}>;


export type GetSignedUrlQuery = { __typename?: 'query_root', getSignedUrl?: { __typename?: 'getSignedUrlOutput', link: string } | null };

export type SaveUserProfileImageMutationVariables = Exact<{
  base64File: Scalars['String']['input'];
  fileName: Scalars['String']['input'];
  userId: Scalars['String']['input'];
}>;


export type SaveUserProfileImageMutation = { __typename?: 'mutation_root', saveUserProfileImage?: { __typename?: 'saveFileOutput', file_path: string, google_link: string } | null };

export type SaveCourseImageMutationVariables = Exact<{
  base64File: Scalars['String']['input'];
  fileName: Scalars['String']['input'];
  courseId: Scalars['Int']['input'];
}>;


export type SaveCourseImageMutation = { __typename?: 'mutation_root', saveCourseImage?: { __typename?: 'saveFileOutput', file_path: string, google_link: string } | null };

export type CreateCertificateMutationVariables = Exact<{
  userIds: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
  courseId: Scalars['Int']['input'];
  certificateType: Scalars['String']['input'];
}>;


export type CreateCertificateMutation = { __typename?: 'mutation_root', createCertificate?: { __typename?: 'result', result: string } | null };

export type CreateCertificatesMutationVariables = Exact<{
  userIds: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
  courseId: Scalars['Int']['input'];
  certificateType: Scalars['String']['input'];
}>;


export type CreateCertificatesMutation = { __typename?: 'mutation_root', createCertificate?: { __typename?: 'result', result: string } | null };

export type AppSettingsQueryVariables = Exact<{
  appName: Scalars['String']['input'];
}>;


export type AppSettingsQuery = { __typename?: 'query_root', AppSettings: Array<{ __typename?: 'AppSettings', appName: string, backgroundImageURL?: string | null, bannerBackgroundColor?: string | null, bannerFontColor?: string | null, bannerTextDe?: string | null, bannerTextEn?: string | null, previewImageURL?: string | null, timeZone: string }> };

export type UpdateTimeZoneMutationVariables = Exact<{
  appName: Scalars['String']['input'];
  value: Scalars['String']['input'];
}>;


export type UpdateTimeZoneMutation = { __typename?: 'mutation_root', update_AppSettings_by_pk?: { __typename?: 'AppSettings', appName: string, timeZone: string } | null };

export type UpdateBannerMutationVariables = Exact<{
  appName: Scalars['String']['input'];
  bannerBackgroundColor?: InputMaybe<Scalars['String']['input']>;
  bannerFontColor?: InputMaybe<Scalars['String']['input']>;
  bannerTextDe?: InputMaybe<Scalars['String']['input']>;
  bannerTextEn?: InputMaybe<Scalars['String']['input']>;
}>;


export type UpdateBannerMutation = { __typename?: 'mutation_root', update_AppSettings_by_pk?: { __typename?: 'AppSettings', appName: string, backgroundImageURL?: string | null, bannerBackgroundColor?: string | null, bannerFontColor?: string | null, bannerTextEn?: string | null, bannerTextDe?: string | null } | null };

export type CourseQueryVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type CourseQuery = { __typename?: 'query_root', Course_by_pk?: (
    { __typename?: 'Course' }
    & { ' $fragmentRefs'?: { 'CourseFragmentFragment': CourseFragmentFragment } }
  ) | null };

export type CourseMinimumQueryVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type CourseMinimumQuery = { __typename?: 'query_root', Course_by_pk?: (
    { __typename?: 'Course', Program: (
      { __typename?: 'Program' }
      & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
    ) }
    & { ' $fragmentRefs'?: { 'CourseFragmentMinimumFragment': CourseFragmentMinimumFragment } }
  ) | null };

export type ManagedCourseQueryVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type ManagedCourseQuery = { __typename?: 'query_root', Course_by_pk?: (
    { __typename?: 'Course', CourseEnrollments: Array<(
      { __typename?: 'CourseEnrollment', User: (
        { __typename?: 'User', Attendances: Array<{ __typename?: 'Attendance', id: number, status: AttendanceStatus_Enum, Session: { __typename?: 'Session', id: number } }>, CourseEnrollments: Array<{ __typename?: 'CourseEnrollment', status: CourseEnrollmentStatus_Enum, courseId: number, Course: { __typename?: 'Course', id: number, title: string, Program: { __typename?: 'Program', shortTitle?: string | null } } }> }
        & { ' $fragmentRefs'?: { 'UserFragmentFragment': UserFragmentFragment } }
      ) }
      & { ' $fragmentRefs'?: { 'AdminEnrollmentFragmentFragment': AdminEnrollmentFragmentFragment } }
    )>, CourseLocations: Array<{ __typename?: 'CourseLocation', id: number, defaultSessionAddress?: string | null, locationOption?: LocationOption_Enum | null }>, Sessions: Array<(
      { __typename?: 'Session' }
      & { ' $fragmentRefs'?: { 'AdminSessionFragmentFragment': AdminSessionFragmentFragment } }
    )>, AchievementOptionCourses: Array<{ __typename?: 'AchievementOptionCourse', AchievementOption: { __typename?: 'AchievementOption', recordType: AchievementRecordType_Enum, AchievementRecords: Array<{ __typename?: 'AchievementRecord', id: number, courseId?: number | null, documentationUrl?: string | null, rating: AchievementRecordRating_Enum, created_at?: any | null, AchievementRecordAuthors: Array<{ __typename?: 'AchievementRecordAuthor', userId: any }>, AchievementOption: { __typename?: 'AchievementOption', title: string } }> } }> }
    & { ' $fragmentRefs'?: { 'AdminCourseFragmentFragment': AdminCourseFragmentFragment } }
  ) | null };

export type InsertSessionMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  startTime: Scalars['timestamptz']['input'];
  endTime: Scalars['timestamptz']['input'];
}>;


export type InsertSessionMutation = { __typename?: 'mutation_root', insert_Session?: { __typename?: 'Session_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'Session', id: number }> } | null };

export type DeleteSessionMutationVariables = Exact<{
  sessionId: Scalars['Int']['input'];
}>;


export type DeleteSessionMutation = { __typename?: 'mutation_root', delete_Session_by_pk?: { __typename?: 'Session', id: number } | null };

export type UpdateSessionTitleMutationVariables = Exact<{
  sessionId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
}>;


export type UpdateSessionTitleMutation = { __typename?: 'mutation_root', update_Session_by_pk?: { __typename?: 'Session', id: number } | null };

export type UpdateSessionStartTimeMutationVariables = Exact<{
  sessionId: Scalars['Int']['input'];
  startTime: Scalars['timestamptz']['input'];
}>;


export type UpdateSessionStartTimeMutation = { __typename?: 'mutation_root', update_Session_by_pk?: { __typename?: 'Session', id: number } | null };

export type UpdateSessionEndTimeMutationVariables = Exact<{
  sessionId: Scalars['Int']['input'];
  endTime: Scalars['timestamptz']['input'];
}>;


export type UpdateSessionEndTimeMutation = { __typename?: 'mutation_root', update_Session_by_pk?: { __typename?: 'Session', id: number } | null };

export type InsertNewSessionSpeakerMutationVariables = Exact<{
  sessionId: Scalars['Int']['input'];
  expertId: Scalars['Int']['input'];
}>;


export type InsertNewSessionSpeakerMutation = { __typename?: 'mutation_root', insert_SessionSpeaker?: { __typename?: 'SessionSpeaker_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'SessionSpeaker', id: number }> } | null };

export type DeleteSessionSpeakerMutationVariables = Exact<{
  speakerId: Scalars['Int']['input'];
}>;


export type DeleteSessionSpeakerMutation = { __typename?: 'mutation_root', delete_SessionSpeaker_by_pk?: { __typename?: 'SessionSpeaker', id: number } | null };

export type InsertSessionAddressMutationVariables = Exact<{
  sessionId: Scalars['Int']['input'];
  address: Scalars['String']['input'];
  courseLocationId: Scalars['Int']['input'];
}>;


export type InsertSessionAddressMutation = { __typename?: 'mutation_root', insert_SessionAddress?: { __typename?: 'SessionAddress_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'SessionAddress', id: number }> } | null };

export type InsertSessionWithAddressesMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  startTime: Scalars['timestamptz']['input'];
  endTime: Scalars['timestamptz']['input'];
  sessionAddresses: Array<SessionAddress_Insert_Input> | SessionAddress_Insert_Input;
}>;


export type InsertSessionWithAddressesMutation = { __typename?: 'mutation_root', insert_Session?: { __typename?: 'Session_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'Session', id: number, SessionAddresses: Array<{ __typename?: 'SessionAddress', id: number, address: string, courseLocationId?: number | null }> }> } | null };

export type UpdateSessionAddressMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateSessionAddressMutation = { __typename?: 'mutation_root', update_SessionAddress_by_pk?: { __typename?: 'SessionAddress', id: number } | null };

export type DeleteSessionAddressesByCourseAndLocationMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  courseLocationId: Scalars['Int']['input'];
}>;


export type DeleteSessionAddressesByCourseAndLocationMutation = { __typename?: 'mutation_root', delete_SessionAddress?: { __typename?: 'SessionAddress_mutation_response', affected_rows: number } | null };

export type LocationOptionsQueryVariables = Exact<{ [key: string]: never; }>;


export type LocationOptionsQuery = { __typename?: 'query_root', LocationOption: Array<{ __typename?: 'LocationOption', value: string }> };

export type InsertCourseLocationMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  option: LocationOption_Enum;
}>;


export type InsertCourseLocationMutation = { __typename?: 'mutation_root', insert_CourseLocation?: { __typename?: 'CourseLocation_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'CourseLocation', id: number }> } | null };

export type UpdateCourseLocationMutationVariables = Exact<{
  locationId: Scalars['Int']['input'];
  value: LocationOption_Enum;
}>;


export type UpdateCourseLocationMutation = { __typename?: 'mutation_root', update_CourseLocation_by_pk?: { __typename?: 'CourseLocation', id: number, locationOption?: LocationOption_Enum | null } | null };

export type UpdateCourseDefaultSessionAddressMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseDefaultSessionAddressMutation = { __typename?: 'mutation_root', update_CourseLocation_by_pk?: { __typename?: 'CourseLocation', id: number } | null };

export type DeleteCourseLocationMutationVariables = Exact<{
  locationId: Scalars['Int']['input'];
}>;


export type DeleteCourseLocationMutation = { __typename?: 'mutation_root', delete_CourseLocation_by_pk?: { __typename?: 'CourseLocation', id: number } | null };

export type UpdateCourseStartTimeMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  startTime?: InputMaybe<Scalars['time']['input']>;
}>;


export type UpdateCourseStartTimeMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number, startTime?: any | null } | null };

export type UpdateCourseEndTimeMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  endTime?: InputMaybe<Scalars['time']['input']>;
}>;


export type UpdateCourseEndTimeMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number, endTime?: any | null } | null };

export type UpdateCourseLanguageMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  value: Scalars['String']['input'];
}>;


export type UpdateCourseLanguageMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseWeekdayMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  value: Weekday_Enum;
}>;


export type UpdateCourseWeekdayMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number, weekDay: Weekday_Enum } | null };

export type UpdateCourseHeadingDescription1MutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseHeadingDescription1Mutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseHeadingDescription2MutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseHeadingDescription2Mutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseContentDescriptionField1MutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseContentDescriptionField1Mutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseContentDescriptionField2MutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseContentDescriptionField2Mutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseLearningGoalsMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseLearningGoalsMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateShortDescriptionMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateShortDescriptionMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseMaxParticipantsMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  maxParticipants: Scalars['Int']['input'];
}>;


export type UpdateCourseMaxParticipantsMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseStatusMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  status: CourseStatus_Enum;
}>;


export type UpdateCourseStatusMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseAttendanceCertificatePossibleMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  isPossible: Scalars['Boolean']['input'];
}>;


export type UpdateCourseAttendanceCertificatePossibleMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseAchievementCertificatePossibleMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  isPossible: Scalars['Boolean']['input'];
}>;


export type UpdateCourseAchievementCertificatePossibleMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseTitleMutationVariables = Exact<{
  courseId: Scalars['Int']['input'];
  courseTitle: Scalars['String']['input'];
}>;


export type UpdateCourseTitleMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseChatLinkMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseChatLinkMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseEctsMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseEctsMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type UpdateCourseExternalRegistrationLinkMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  text: Scalars['String']['input'];
}>;


export type UpdateCourseExternalRegistrationLinkMutation = { __typename?: 'mutation_root', update_Course_by_pk?: { __typename?: 'Course', id: number } | null };

export type DegreeCoursesQueryVariables = Exact<{ [key: string]: never; }>;


export type DegreeCoursesQuery = { __typename?: 'query_root', Course: Array<{ __typename?: 'Course', id: number, title: string }> };

export type CompletedDegreeEnrollmentsQueryVariables = Exact<{
  degreeCourseId: Scalars['Int']['input'];
  userId: Scalars['uuid']['input'];
}>;


export type CompletedDegreeEnrollmentsQuery = { __typename?: 'query_root', CourseEnrollment: Array<{ __typename?: 'CourseEnrollment', Course: { __typename?: 'Course', id: number, title: string, ects: string, Program: { __typename?: 'Program', shortTitle?: string | null, title: string } } }> };

export type DegreeParticipantsWithDegreeEnrollmentsQueryVariables = Exact<{
  degreeCourseId: Scalars['Int']['input'];
}>;


export type DegreeParticipantsWithDegreeEnrollmentsQuery = { __typename?: 'query_root', Course_by_pk?: { __typename?: 'Course', CourseEnrollments: Array<{ __typename?: 'CourseEnrollment', id: number, status: CourseEnrollmentStatus_Enum, achievementCertificateURL?: string | null, attendanceCertificateURL?: string | null, User: { __typename?: 'User', id: any, firstName: string, lastName: string, email: string, CourseEnrollments: Array<{ __typename?: 'CourseEnrollment', id: number, status: CourseEnrollmentStatus_Enum, achievementCertificateURL?: string | null, attendanceCertificateURL?: string | null, updated_at?: any | null, Course: { __typename?: 'Course', id: number, title: string, ects: string, Program: { __typename?: 'Program', id: number, shortTitle?: string | null, title: string } } }> } }> } | null };

export type InsertCourseDegreeTagMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  tagId: Scalars['Int']['input'];
}>;


export type InsertCourseDegreeTagMutation = { __typename?: 'mutation_root', insert_CourseDegree?: { __typename?: 'CourseDegree_mutation_response', affected_rows: number } | null };

export type DeleteCourseDegreeTagMutationVariables = Exact<{
  itemId: Scalars['Int']['input'];
  tagId: Scalars['Int']['input'];
}>;


export type DeleteCourseDegreeTagMutation = { __typename?: 'mutation_root', delete_CourseDegree?: { __typename?: 'CourseDegree_mutation_response', affected_rows: number } | null };

export type InsertSingleAttendanceMutationVariables = Exact<{
  input: Attendance_Insert_Input;
}>;


export type InsertSingleAttendanceMutation = { __typename?: 'mutation_root', insert_Attendance_one?: { __typename?: 'Attendance', id: number } | null };

export type UpdateSingleAttendanceByPkMutationVariables = Exact<{
  pkId: Scalars['Int']['input'];
  changes: Attendance_Set_Input;
}>;


export type UpdateSingleAttendanceByPkMutation = { __typename?: 'mutation_root', update_Attendance_by_pk?: { __typename?: 'Attendance', id: number, status: AttendanceStatus_Enum } | null };

export type CourseEnrollmentQueryQueryVariables = Exact<{
  where?: CourseEnrollment_Bool_Exp;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type CourseEnrollmentQueryQuery = { __typename?: 'query_root', CourseEnrollment: Array<(
    { __typename?: 'CourseEnrollment' }
    & { ' $fragmentRefs'?: { 'CourseEnrollmentFragmentFragment': CourseEnrollmentFragmentFragment } }
  )> };

export type CourseEnrollmentWithUserQueryQueryVariables = Exact<{
  where?: CourseEnrollment_Bool_Exp;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type CourseEnrollmentWithUserQueryQuery = { __typename?: 'query_root', CourseEnrollment: Array<(
    { __typename?: 'CourseEnrollment', User: (
      { __typename?: 'User' }
      & { ' $fragmentRefs'?: { 'UserFragmentFragment': UserFragmentFragment } }
    ) }
    & { ' $fragmentRefs'?: { 'CourseEnrollmentFragmentFragment': CourseEnrollmentFragmentFragment } }
  )> };

export type CourseInstructorListQueryVariables = Exact<{ [key: string]: never; }>;


export type CourseInstructorListQuery = { __typename?: 'query_root', CourseInstructor: Array<(
    { __typename?: 'CourseInstructor' }
    & { ' $fragmentRefs'?: { 'CourseInstructorFragmentFragment': CourseInstructorFragmentFragment } }
  )> };

export type CourseTileListAnonymousQueryVariables = Exact<{ [key: string]: never; }>;


export type CourseTileListAnonymousQuery = { __typename?: 'query_root', Course: Array<(
    { __typename?: 'Course' }
    & { ' $fragmentRefs'?: { 'CourseTileFragmentAnonymousFragment': CourseTileFragmentAnonymousFragment } }
  )> };

export type CourseListQueryVariables = Exact<{ [key: string]: never; }>;


export type CourseListQuery = { __typename?: 'query_root', Course: Array<(
    { __typename?: 'Course' }
    & { ' $fragmentRefs'?: { 'CourseFragmentFragment': CourseFragmentFragment } }
  )> };

export type AdminCourseListQueryVariables = Exact<{
  where?: Course_Bool_Exp;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type AdminCourseListQuery = { __typename?: 'query_root', Course: Array<(
    { __typename?: 'Course', Program: (
      { __typename?: 'Program' }
      & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
    ), CourseEnrollments: Array<{ __typename?: 'CourseEnrollment', id: number, CourseEnrollmentStatus: { __typename?: 'CourseEnrollmentStatus', value: string } }>, CourseGroups: Array<{ __typename?: 'CourseGroup', id: number, groupOptionId: number, CourseGroupOption: { __typename?: 'CourseGroupOption', title: string } }>, CourseDegrees: Array<{ __typename?: 'CourseDegree', id: number, degreeCourseId: number, Course: { __typename?: 'Course', title: string }, DegreeCourse: { __typename?: 'Course', title: string } }>, AppliedAndUnratedCount: { __typename?: 'CourseEnrollment_aggregate', aggregate?: { __typename?: 'CourseEnrollment_aggregate_fields', count: number } | null } }
    & { ' $fragmentRefs'?: { 'AdminCourseFragmentFragment': AdminCourseFragmentFragment } }
  )>, Course_aggregate: { __typename?: 'Course_aggregate', aggregate?: { __typename?: 'Course_aggregate_fields', count: number } | null }, CourseGroupOption: Array<{ __typename?: 'CourseGroupOption', id: number, title: string, order: number }> };

export type CourseTilesQueryVariables = Exact<{ [key: string]: never; }>;


export type CourseTilesQuery = { __typename?: 'query_root', Course: Array<(
    { __typename?: 'Course', CourseGroups: Array<{ __typename?: 'CourseGroup', CourseGroupOption: { __typename?: 'CourseGroupOption', order: number, title: string } }> }
    & { ' $fragmentRefs'?: { 'CourseTileFragmentFragment': CourseTileFragmentFragment } }
  )> };

export type CoursesByInstructorQueryVariables = Exact<{
  userId: Scalars['uuid']['input'];
}>;


export type CoursesByInstructorQuery = { __typename?: 'query_root', Course: Array<(
    { __typename?: 'Course' }
    & { ' $fragmentRefs'?: { 'CourseTileFragmentFragment': CourseTileFragmentFragment } }
  )> };

export type CoursesEnrolledByUserQueryVariables = Exact<{
  userId: Scalars['uuid']['input'];
}>;


export type CoursesEnrolledByUserQuery = { __typename?: 'query_root', Course: Array<(
    { __typename?: 'Course' }
    & { ' $fragmentRefs'?: { 'CourseTileFragmentFragment': CourseTileFragmentFragment } }
  )> };

export type CourseWithEnrollmentQueryVariables = Exact<{
  id: Scalars['Int']['input'];
  userId: Scalars['uuid']['input'];
}>;


export type CourseWithEnrollmentQuery = { __typename?: 'query_root', Course_by_pk?: (
    { __typename?: 'Course', chatLink?: string | null, CourseEnrollments: Array<(
      { __typename?: 'CourseEnrollment' }
      & { ' $fragmentRefs'?: { 'EnrollmentFragmentFragment': EnrollmentFragmentFragment } }
    )>, CourseLocations: Array<{ __typename?: 'CourseLocation', id: number, locationOption?: LocationOption_Enum | null, defaultSessionAddress?: string | null }>, Program: (
      { __typename?: 'Program' }
      & { ' $fragmentRefs'?: { 'ProgramFragmentFragment': ProgramFragmentFragment } }
    ), Sessions: Array<(
      { __typename?: 'Session', Attendances: Array<{ __typename?: 'Attendance', id: number, status: AttendanceStatus_Enum, updated_at?: any | null }> }
      & { ' $fragmentRefs'?: { 'SessionFragmentFragment': SessionFragmentFragment } }
    )> }
    & { ' $fragmentRefs'?: { 'CourseFragmentFragment': CourseFragmentFragment } }
  ) | null };

export type MyCoursesQueryVariables = Exact<{
  userId: Scalars['uuid']['input'];
}>;


export type MyCoursesQuery = { __typename?: 'query_root', User_by_pk?: { __typename?: 'User', CourseEnrollments: Array<(
      { __typename?: 'CourseEnrollment', Course: (
        { __typename?: 'Course', CourseEnrollments: Array<(
          { __typename?: 'CourseEnrollment' }
          & { ' $fragmentRefs'?: { 'EnrollmentFragmentFragment': EnrollmentFragmentFragment } }
        )>, Program: (
          { __typename?: 'Program' }
          & { ' $fragmentRefs'?: { 'ProgramFragmentFragment': ProgramFragmentFragment } }
        ) }
        & { ' $fragmentRefs'?: { 'CourseFragmentFragment': CourseFragmentFragment } }
      ) }
      & { ' $fragmentRefs'?: { 'EnrollmentFragmentFragment': EnrollmentFragmentFragment } }
    )> } | null };

export type MyEnrollmentsForCourseQueryQueryVariables = Exact<{
  courseId: Scalars['Int']['input'];
}>;


export type MyEnrollmentsForCourseQueryQuery = { __typename?: 'query_root', CourseEnrollment: Array<(
    { __typename?: 'CourseEnrollment', Course: (
      { __typename?: 'Course' }
      & { ' $fragmentRefs'?: { 'CourseFragmentFragment': CourseFragmentFragment } }
    ) }
    & { ' $fragmentRefs'?: { 'EnrollmentFragmentFragment': EnrollmentFragmentFragment } }
  )> };

export type CourseGroupOptionsQueryVariables = Exact<{ [key: string]: never; }>;


export type CourseGroupOptionsQuery = { __typename?: 'query_root', CourseGroupOption: Array<{ __typename?: 'CourseGroupOption', id: number, order: number, title: string }> };

export type UpdateCourseGroupOptionOrderMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  order: Scalars['Int']['input'];
}>;


export type UpdateCourseGroupOptionOrderMutation = { __typename?: 'mutation_root', update_CourseGroupOption_by_pk?: { __typename: 'CourseGroupOption', id: number, order: number } | null };

export type EmplomentByValueQueryVariables = Exact<{ [key: string]: never; }>;


export type EmplomentByValueQuery = { __typename?: 'query_root', Employment: Array<{ __typename?: 'Employment', value: string, comment: string }> };

export type ExpertListQueryVariables = Exact<{
  where?: Expert_Bool_Exp;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type ExpertListQuery = { __typename?: 'query_root', Expert: Array<{ __typename?: 'Expert', id: number, userId: any, User: { __typename?: 'User', firstName: string, lastName: string, email: string } }> };

export type MailTemplatesQueryVariables = Exact<{ [key: string]: never; }>;


export type MailTemplatesQuery = { __typename?: 'query_root', MailTemplate: Array<{ __typename?: 'MailTemplate', id: number, subject: string, content: string, from?: string | null, cc?: string | null, bcc?: string | null, title?: string | null }> };

export type InsertMailLogMutationVariables = Exact<{
  subject: Scalars['String']['input'];
  content: Scalars['String']['input'];
  from: Scalars['String']['input'];
  cc?: InputMaybe<Scalars['String']['input']>;
  bcc?: InputMaybe<Scalars['String']['input']>;
  to: Scalars['String']['input'];
  status: Scalars['String']['input'];
}>;


export type InsertMailLogMutation = { __typename?: 'mutation_root', insert_MailLog?: { __typename?: 'MailLog_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'MailLog', id: number }> } | null };

export type MultiProgramEnrollmentsQueryVariables = Exact<{
  programIds?: InputMaybe<Array<Scalars['Int']['input']> | Scalars['Int']['input']>;
}>;


export type MultiProgramEnrollmentsQuery = { __typename?: 'query_root', Program: Array<{ __typename?: 'Program', id: number, title: string, shortTitle?: string | null, Courses: Array<{ __typename?: 'Course', id: number, title: string, CourseEnrollments: Array<{ __typename?: 'CourseEnrollment', id: number, status: CourseEnrollmentStatus_Enum, attendanceCertificateURL?: string | null, achievementCertificateURL?: string | null, created_at?: any | null, updated_at?: any | null }> }> }> };

export type ProgramListQueryVariables = Exact<{ [key: string]: never; }>;


export type ProgramListQuery = { __typename?: 'query_root', Program: Array<(
    { __typename?: 'Program', Courses: Array<{ __typename?: 'Course', id: number }> }
    & { ' $fragmentRefs'?: { 'AdminProgramFragmentFragment': AdminProgramFragmentFragment } }
  )> };

export type ProgramsQueryVariables = Exact<{ [key: string]: never; }>;


export type ProgramsQuery = { __typename?: 'query_root', Program: Array<(
    { __typename?: 'Program' }
    & { ' $fragmentRefs'?: { 'ProgramFragmentMinimumPropertiesFragment': ProgramFragmentMinimumPropertiesFragment } }
  )> };

export type UnversityByCommentQueryVariables = Exact<{ [key: string]: never; }>;


export type UnversityByCommentQuery = { __typename?: 'query_root', University: Array<{ __typename?: 'University', value: string, comment: string }> };

export type UserListQueryVariables = Exact<{ [key: string]: never; }>;


export type UserListQuery = { __typename?: 'query_root', User: Array<{ __typename?: 'User', id: any, firstName: string, lastName: string, email: string }> };

export type UserQueryVariables = Exact<{
  userId: Scalars['uuid']['input'];
}>;


export type UserQuery = { __typename?: 'query_root', User_by_pk?: { __typename?: 'User', id: any, firstName: string, lastName: string, matriculationNumber?: string | null, otherUniversity?: string | null, university?: University_Enum | null, picture?: string | null, externalProfile?: string | null, employment?: Employment_Enum | null, email: string } | null };

export type InsertExpertMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
}>;


export type InsertExpertMutation = { __typename?: 'mutation_root', insert_Expert?: { __typename?: 'Expert_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'Expert', id: number }> } | null };

export type UserForSelection1QueryVariables = Exact<{
  searchValue: Scalars['String']['input'];
}>;


export type UserForSelection1Query = { __typename?: 'query_root', User: Array<{ __typename?: 'User', id: any, firstName: string, lastName: string, email: string, Experts: Array<{ __typename?: 'Expert', id: number }> }> };

export type UserForSelection2QueryVariables = Exact<{
  searchValue1: Scalars['String']['input'];
  searchValue2: Scalars['String']['input'];
}>;


export type UserForSelection2Query = { __typename?: 'query_root', User: Array<{ __typename?: 'User', id: any, firstName: string, lastName: string, email: string, Experts: Array<{ __typename?: 'Expert', id: number }> }> };

export type UsersByLastNameQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<User_Bool_Exp>;
}>;


export type UsersByLastNameQuery = { __typename?: 'query_root', User: Array<{ __typename?: 'User', id: any, firstName: string, lastName: string, email: string, matriculationNumber?: string | null, university?: University_Enum | null, employment?: Employment_Enum | null, CourseEnrollments: Array<{ __typename?: 'CourseEnrollment', id: number, courseId: number, userId: any, status: CourseEnrollmentStatus_Enum, updated_at?: any | null, Course: { __typename?: 'Course', id: number, title: string, Program: { __typename?: 'Program', id: number, title: string, shortTitle?: string | null } } }> }>, User_aggregate: { __typename?: 'User_aggregate', aggregate?: { __typename?: 'User_aggregate_fields', count: number } | null } };

export type UsersWithExpertIdQueryVariables = Exact<{
  userOrderBy?: InputMaybe<User_Order_By>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<User_Bool_Exp>;
}>;


export type UsersWithExpertIdQuery = { __typename?: 'query_root', User_aggregate: { __typename?: 'User_aggregate', aggregate?: { __typename?: 'User_aggregate_fields', count: number } | null }, User: Array<{ __typename?: 'User', id: any, firstName: string, lastName: string, email: string, Experts: Array<{ __typename?: 'Expert', id: number }> }> };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type DeleteUserMutation = { __typename?: 'mutation_root', anonymizeUser?: { __typename?: 'AnonymizeUserResult', anonymizedUserId?: string | null, messageKey?: string | null, error?: string | null, steps?: { __typename?: 'AnonymizationSteps', keycloak_deletion: boolean, user_data_anonymization: boolean, motivation_letter_anonymization: boolean, profile_picture_removal: boolean, certificate_anonymization: boolean } | null } | null };

export const UserFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]} as unknown as DocumentNode<UserFragmentFragment, unknown>;
export const AchievementRecordAuthorFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AchievementRecordAuthorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecordAuthor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]} as unknown as DocumentNode<AchievementRecordAuthorFragmentFragment, unknown>;
export const AchievementOptionFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AchievementOptionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOption"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"recordType"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationScriptUrl"}},{"kind":"Field","name":{"kind":"Name","value":"csvTemplateUrl"}},{"kind":"Field","name":{"kind":"Name","value":"showScoreAuthors"}},{"kind":"Field","name":{"kind":"Name","value":"achievementDocumentationTemplateId"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOptionTemplate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]} as unknown as DocumentNode<AchievementOptionFragmentFragment, unknown>;
export const AchievementRecordFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AchievementRecordFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecord"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"csvResults"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"achievementOptionId"}},{"kind":"Field","name":{"kind":"Name","value":"uploadUserId"}},{"kind":"Field","name":{"kind":"Name","value":"coverImageUrl"}},{"kind":"Field","name":{"kind":"Name","value":"score"}},{"kind":"Field","name":{"kind":"Name","value":"rating"}},{"kind":"Field","name":{"kind":"Name","value":"documentationUrl"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"recordType"}}]}}]}}]} as unknown as DocumentNode<AchievementRecordFragmentFragment, unknown>;
export const CourseEnrollmentFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseEnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"motivationLetter"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}}]} as unknown as DocumentNode<CourseEnrollmentFragmentFragment, unknown>;
export const CourseTileFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseTileFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}}]}}]} as unknown as DocumentNode<CourseTileFragmentFragment, unknown>;
export const CourseTileFragmentAnonymousFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseTileFragmentAnonymous"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}}]}}]} as unknown as DocumentNode<CourseTileFragmentAnonymousFragment, unknown>;
export const SessionFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}}]} as unknown as DocumentNode<SessionFragmentFragment, unknown>;
export const CourseInstructorFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]} as unknown as DocumentNode<CourseInstructorFragmentFragment, unknown>;
export const ProgramFragmentMinimumPropertiesFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<ProgramFragmentMinimumPropertiesFragment, unknown>;
export const CourseFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<CourseFragmentFragment, unknown>;
export const AdminCourseFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminCourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}}]} as unknown as DocumentNode<AdminCourseFragmentFragment, unknown>;
export const CourseFragmentMinimumFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragmentMinimum"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}}]}}]} as unknown as DocumentNode<CourseFragmentMinimumFragment, unknown>;
export const EnrollmentFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"EnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}}]} as unknown as DocumentNode<EnrollmentFragmentFragment, unknown>;
export const AdminEnrollmentFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminEnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}},{"kind":"Field","name":{"kind":"Name","value":"motivationLetter"}},{"kind":"Field","name":{"kind":"Name","value":"motivationRating"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"EnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}}]} as unknown as DocumentNode<AdminEnrollmentFragmentFragment, unknown>;
export const ProgramFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"applicationStart"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<ProgramFragmentFragment, unknown>;
export const AdminProgramFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminProgramFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}},{"kind":"Field","name":{"kind":"Name","value":"applicationStart"}},{"kind":"Field","name":{"kind":"Name","value":"closingQuestionnaire"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultMaxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"speakerQuestionnaire"}},{"kind":"Field","name":{"kind":"Name","value":"startQuestionnaire"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateTemplateURL"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateTemplateURL"}},{"kind":"Field","name":{"kind":"Name","value":"visibility"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<AdminProgramFragmentFragment, unknown>;
export const AdminSessionFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminSessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]} as unknown as DocumentNode<AdminSessionFragmentFragment, unknown>;
export const InsertCourseGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertCourseGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_CourseGroup"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"groupOptionId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<InsertCourseGroupMutation, InsertCourseGroupMutationVariables>;
export const DeleteCourseGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCourseGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_CourseGroup"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"Course"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"CourseGroupOption"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}}}]}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<DeleteCourseGroupMutation, DeleteCourseGroupMutationVariables>;
export const UpdateEnrollmentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateEnrollment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"motivationLetter"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollmentStatus_enum"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_CourseEnrollment"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"motivationLetter"},"value":{"kind":"Variable","name":{"kind":"Name","value":"motivationLetter"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"on_conflict"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"constraint"},"value":{"kind":"EnumValue","value":"uniqueUserCourse"}},{"kind":"ObjectField","name":{"kind":"Name","value":"update_columns"},"value":{"kind":"ListValue","values":[{"kind":"EnumValue","value":"status"}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<UpdateEnrollmentMutation, UpdateEnrollmentMutationVariables>;
export const InsertEnrollmentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertEnrollment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"motivationLetter"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_CourseEnrollment"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"motivationLetter"},"value":{"kind":"Variable","name":{"kind":"Name","value":"motivationLetter"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"EnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}}]} as unknown as DocumentNode<InsertEnrollmentMutation, InsertEnrollmentMutationVariables>;
export const UpdateEnrollmentRatingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateEnrollmentRating"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"enrollmentId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"rating"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"MotivationRating_enum"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_CourseEnrollment_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"enrollmentId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"motivationRating"},"value":{"kind":"Variable","name":{"kind":"Name","value":"rating"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateEnrollmentRatingMutation, UpdateEnrollmentRatingMutationVariables>;
export const UpdateEnrollmentForInviteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateEnrollmentForInvite"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"enrollmentId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"expire"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_CourseEnrollment_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"enrollmentId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"invitationExpirationDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"expire"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"EnumValue","value":"INVITED"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateEnrollmentForInviteMutation, UpdateEnrollmentForInviteMutationVariables>;
export const UpdateEnrollmentStatusDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateEnrollmentStatus"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"enrollmentId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollmentStatus_enum"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"expire"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_CourseEnrollment_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"enrollmentId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"invitationExpirationDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"expire"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateEnrollmentStatusMutation, UpdateEnrollmentStatusMutationVariables>;
export const InsertUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_User"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"firstName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}}]}}]}}]}}]} as unknown as DocumentNode<InsertUserMutation, InsertUserMutationVariables>;
export const InsertSingleUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertSingleUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"user"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"User_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_User_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"user"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}}]}}]}}]} as unknown as DocumentNode<InsertSingleUserMutation, InsertSingleUserMutationVariables>;
export const InsertAnAchievementOptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertAnAchievementOption"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOption_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_AchievementOption_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertAnAchievementOptionMutation, InsertAnAchievementOptionMutationVariables>;
export const UpdateAnAchievementOptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAnAchievementOption"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOption_set_input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AchievementOption_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateAnAchievementOptionMutation, UpdateAnAchievementOptionMutationVariables>;
export const DeleteAnAchievementOptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAnAchievementOption"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_AchievementOption_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteAnAchievementOptionMutation, DeleteAnAchievementOptionMutationVariables>;
export const InsertAnAchievementOptionCourseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertAnAchievementOptionCourse"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionCourse_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_AchievementOptionCourse_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertAnAchievementOptionCourseMutation, InsertAnAchievementOptionCourseMutationVariables>;
export const UpdateAnAchievementOptionCourseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAnAchievementOptionCourse"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionCourse_set_input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AchievementOptionCourse_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateAnAchievementOptionCourseMutation, UpdateAnAchievementOptionCourseMutationVariables>;
export const DeleteAnAchievementOptionCourseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAnAchievementOptionCourse"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_AchievementOptionCourse_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteAnAchievementOptionCourseMutation, DeleteAnAchievementOptionCourseMutationVariables>;
export const DeleteAnAchievementOptionCourseWithWhereDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAnAchievementOptionCourseWithWhere"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionCourse_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_AchievementOptionCourse"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<DeleteAnAchievementOptionCourseWithWhereMutation, DeleteAnAchievementOptionCourseWithWhereMutationVariables>;
export const InsertAnAchievementOptionMentorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertAnAchievementOptionMentor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionMentor_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_AchievementOptionMentor_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertAnAchievementOptionMentorMutation, InsertAnAchievementOptionMentorMutationVariables>;
export const UpdateAnAchievementOptionMentorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAnAchievementOptionMentor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionMentor_set_input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AchievementOptionMentor_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateAnAchievementOptionMentorMutation, UpdateAnAchievementOptionMentorMutationVariables>;
export const DeleteAnAchievementOptionMentorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAnAchievementOptionMentor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_AchievementOptionMentor_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteAnAchievementOptionMentorMutation, DeleteAnAchievementOptionMentorMutationVariables>;
export const DeleteAnAchievementOptionMentorWithWhereDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAnAchievementOptionMentorWithWhere"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionMentor_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_AchievementOptionMentor"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<DeleteAnAchievementOptionMentorWithWhereMutation, DeleteAnAchievementOptionMentorWithWhereMutationVariables>;
export const InsertCourseWithLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertCourseWithLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"applicationEnd"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"maxMissedSessions"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"locationOption"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"LocationOption_enum"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"tagline"},"value":{"kind":"StringValue","value":"","block":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"language"},"value":{"kind":"StringValue","value":"DE","block":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"applicationEnd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"applicationEnd"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"maxMissedSessions"},"value":{"kind":"Variable","name":{"kind":"Name","value":"maxMissedSessions"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"programId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"CourseLocations"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"locationOption"},"value":{"kind":"Variable","name":{"kind":"Name","value":"locationOption"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"defaultSessionAddress"},"value":{"kind":"StringValue","value":"","block":false}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]}}]} as unknown as DocumentNode<InsertCourseWithLocationMutation, InsertCourseWithLocationMutationVariables>;
export const InsertSingleCourseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertSingleCourse"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"course"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Course_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_Course_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"course"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertSingleCourseMutation, InsertSingleCourseMutationVariables>;
export const DeleteCourseByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCourseByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteCourseByPkMutation, DeleteCourseByPkMutationVariables>;
export const UpdateCourseByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Course_set_input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseByPkMutation, UpdateCourseByPkMutationVariables>;
export const InsertCourseInstructorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertCourseInstructor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"expertId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_CourseInstructor"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"expertId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"expertId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertCourseInstructorMutation, InsertCourseInstructorMutationVariables>;
export const DeleteCourseInstructorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCourseInstructor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"expertId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_CourseInstructor"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"expertId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"expertId"}}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<DeleteCourseInstructorMutation, DeleteCourseInstructorMutationVariables>;
export const InsertProgramDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertProgram"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"today"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_Program"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lectureStart"},"value":{"kind":"Variable","name":{"kind":"Name","value":"today"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lectureEnd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"today"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"applicationStart"},"value":{"kind":"Variable","name":{"kind":"Name","value":"today"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"defaultApplicationEnd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"today"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"achievementRecordUploadDeadline"},"value":{"kind":"Variable","name":{"kind":"Name","value":"today"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"visibility"},"value":{"kind":"BooleanValue","value":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"visibilityAttendanceCertificate"},"value":{"kind":"BooleanValue","value":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"visibilityAchievementCertificate"},"value":{"kind":"BooleanValue","value":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"defaultMaxMissedSessions"},"value":{"kind":"IntValue","value":"2"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertProgramMutation, InsertProgramMutationVariables>;
export const DeleteProgramDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteProgram"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteProgramMutation, DeleteProgramMutationVariables>;
export const UpdateProgramVisibilityDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramVisibility"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"visible"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"visibility"},"value":{"kind":"Variable","name":{"kind":"Name","value":"visible"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramVisibilityMutation, UpdateProgramVisibilityMutationVariables>;
export const UpdateProgramPublishedDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramPublished"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"published"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"published"},"value":{"kind":"Variable","name":{"kind":"Name","value":"published"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramPublishedMutation, UpdateProgramPublishedMutationVariables>;
export const UpdateProgramTitleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramTitle"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramTitleMutation, UpdateProgramTitleMutationVariables>;
export const UpdateProgramShortTitleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramShortTitle"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"shortTitle"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"shortTitle"},"value":{"kind":"Variable","name":{"kind":"Name","value":"shortTitle"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramShortTitleMutation, UpdateProgramShortTitleMutationVariables>;
export const UpdateProgramParticipationTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramParticipationTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"templatePath"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"attendanceCertificateTemplateURL"},"value":{"kind":"Variable","name":{"kind":"Name","value":"templatePath"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramParticipationTemplateMutation, UpdateProgramParticipationTemplateMutationVariables>;
export const UpdateProgramAchievementTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramAchievementTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"templatePath"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"achievementCertificateTemplateURL"},"value":{"kind":"Variable","name":{"kind":"Name","value":"templatePath"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramAchievementTemplateMutation, UpdateProgramAchievementTemplateMutationVariables>;
export const UpdateProgramApplicationStartDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramApplicationStart"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"applicationStart"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"applicationStart"},"value":{"kind":"Variable","name":{"kind":"Name","value":"applicationStart"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramApplicationStartMutation, UpdateProgramApplicationStartMutationVariables>;
export const UpdateProgramApplicationEndDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramApplicationEnd"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"applicationEnd"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"defaultApplicationEnd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"applicationEnd"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramApplicationEndMutation, UpdateProgramApplicationEndMutationVariables>;
export const UpdateProgramLectureStartDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramLectureStart"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lectureStart"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lectureStart"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lectureStart"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramLectureStartMutation, UpdateProgramLectureStartMutationVariables>;
export const UpdateProgramLectureEndDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramLectureEnd"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lectureEnd"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lectureEnd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lectureEnd"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramLectureEndMutation, UpdateProgramLectureEndMutationVariables>;
export const UpdateProgramUploadDeadlineDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramUploadDeadline"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"deadline"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"achievementRecordUploadDeadline"},"value":{"kind":"Variable","name":{"kind":"Name","value":"deadline"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramUploadDeadlineMutation, UpdateProgramUploadDeadlineMutationVariables>;
export const UpdateProgramStartQuestionaireDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramStartQuestionaire"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"questionaire"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startQuestionnaire"},"value":{"kind":"Variable","name":{"kind":"Name","value":"questionaire"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramStartQuestionaireMutation, UpdateProgramStartQuestionaireMutationVariables>;
export const UpdateProgramSpeakerQuestionaireDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramSpeakerQuestionaire"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"questionaire"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"speakerQuestionnaire"},"value":{"kind":"Variable","name":{"kind":"Name","value":"questionaire"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramSpeakerQuestionaireMutation, UpdateProgramSpeakerQuestionaireMutationVariables>;
export const UpdateProgramClosingQuestionaireDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramClosingQuestionaire"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"questionaire"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"closingQuestionnaire"},"value":{"kind":"Variable","name":{"kind":"Name","value":"questionaire"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramClosingQuestionaireMutation, UpdateProgramClosingQuestionaireMutationVariables>;
export const UpdateProgramAchievementCertVisibleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramAchievementCertVisible"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isVisible"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"visibilityAchievementCertificate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isVisible"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramAchievementCertVisibleMutation, UpdateProgramAchievementCertVisibleMutationVariables>;
export const UpdateProgramParticipationCertVisibleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProgramParticipationCertVisible"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isVisible"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Program_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"visibilityAttendanceCertificate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isVisible"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateProgramParticipationCertVisibleMutation, UpdateProgramParticipationCertVisibleMutationVariables>;
export const UpdateUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"matriculationNumber"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"university"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"University_enum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"externalProfile"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"employment"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Employment_enum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"picture"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_User_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"firstName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"matriculationNumber"},"value":{"kind":"Variable","name":{"kind":"Name","value":"matriculationNumber"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"employment"},"value":{"kind":"Variable","name":{"kind":"Name","value":"employment"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"externalProfile"},"value":{"kind":"Variable","name":{"kind":"Name","value":"externalProfile"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"university"},"value":{"kind":"Variable","name":{"kind":"Name","value":"university"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"picture"},"value":{"kind":"Variable","name":{"kind":"Name","value":"picture"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"matriculationNumber"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"employment"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}}]}}]}}]} as unknown as DocumentNode<UpdateUserMutation, UpdateUserMutationVariables>;
export const UpdateUserOnEnrollmentConfirmationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUserOnEnrollmentConfirmation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"matriculationNumber"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"otherUniversity"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"university"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"University_enum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"employment"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Employment_enum"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_User_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"matriculationNumber"},"value":{"kind":"Variable","name":{"kind":"Name","value":"matriculationNumber"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"otherUniversity"},"value":{"kind":"Variable","name":{"kind":"Name","value":"otherUniversity"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"employment"},"value":{"kind":"Variable","name":{"kind":"Name","value":"employment"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"university"},"value":{"kind":"Variable","name":{"kind":"Name","value":"university"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"matriculationNumber"}},{"kind":"Field","name":{"kind":"Name","value":"employment"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"university"}}]}}]}}]} as unknown as DocumentNode<UpdateUserOnEnrollmentConfirmationMutation, UpdateUserOnEnrollmentConfirmationMutationVariables>;
export const UpdateUserProfilePictureDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUserProfilePicture"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"picture"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_User_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"picture"},"value":{"kind":"Variable","name":{"kind":"Name","value":"picture"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}}]}}]}}]} as unknown as DocumentNode<UpdateUserProfilePictureMutation, UpdateUserProfilePictureMutationVariables>;
export const AchievementDocumentationTemplatesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AchievementDocumentationTemplates"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementDocumentationTemplate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"updated_at"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"updated_at"}}]}}]}}]} as unknown as DocumentNode<AchievementDocumentationTemplatesQuery, AchievementDocumentationTemplatesQueryVariables>;
export const InsertAchievementDocumentationTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertAchievementDocumentationTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"insertInput"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementDocumentationTemplate_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_AchievementDocumentationTemplate_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"insertInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertAchievementDocumentationTemplateMutation, InsertAchievementDocumentationTemplateMutationVariables>;
export const UpdateAchievementDocumentationTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAchievementDocumentationTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"url"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AchievementDocumentationTemplate_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"url"},"value":{"kind":"Variable","name":{"kind":"Name","value":"url"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]} as unknown as DocumentNode<UpdateAchievementDocumentationTemplateMutation, UpdateAchievementDocumentationTemplateMutationVariables>;
export const UpdateAchievementDocumentationTemplateTitleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAchievementDocumentationTemplateTitle"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AchievementDocumentationTemplate_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]} as unknown as DocumentNode<UpdateAchievementDocumentationTemplateTitleMutation, UpdateAchievementDocumentationTemplateTitleMutationVariables>;
export const DeleteAchievementDocumentationTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAchievementDocumentationTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_AchievementDocumentationTemplate_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteAchievementDocumentationTemplateMutation, DeleteAchievementDocumentationTemplateMutationVariables>;
export const AchievementRecordTypesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AchievementRecordTypes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementRecordType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]} as unknown as DocumentNode<AchievementRecordTypesQuery, AchievementRecordTypesQueryVariables>;
export const AchievementOptionListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AchievementOptionList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOption_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOption_order_by"}},"defaultValue":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementOption"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AchievementOptionFragment"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOptionCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOptionMentors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AchievementOptionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOption"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"recordType"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationScriptUrl"}},{"kind":"Field","name":{"kind":"Name","value":"csvTemplateUrl"}},{"kind":"Field","name":{"kind":"Name","value":"showScoreAuthors"}},{"kind":"Field","name":{"kind":"Name","value":"achievementDocumentationTemplateId"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOptionTemplate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]} as unknown as DocumentNode<AchievementOptionListQuery, AchievementOptionListQueryVariables>;
export const AchievementOptionCoursesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AchievementOptionCourses"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionCourse_bool_exp"}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderByAchievementOptionCourse"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOptionCourse_order_by"}},"defaultValue":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementOptionCourse"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"orderByAchievementOptionCourse"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AchievementOptionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"achievementOptionId"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AchievementOptionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementOption"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"recordType"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationScriptUrl"}},{"kind":"Field","name":{"kind":"Name","value":"csvTemplateUrl"}},{"kind":"Field","name":{"kind":"Name","value":"showScoreAuthors"}},{"kind":"Field","name":{"kind":"Name","value":"achievementDocumentationTemplateId"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOptionTemplate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]} as unknown as DocumentNode<AchievementOptionCoursesQuery, AchievementOptionCoursesQueryVariables>;
export const AchievementRecordAuthorQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AchievementRecordAuthorQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecordAuthor_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecordAuthor_order_by"}},"defaultValue":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementRecordAuthor"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]} as unknown as DocumentNode<AchievementRecordAuthorQueryQuery, AchievementRecordAuthorQueryQueryVariables>;
export const InsertAnAchievementRecordDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertAnAchievementRecord"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"insertInput"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecord_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_AchievementRecord_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"insertInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertAnAchievementRecordMutation, InsertAnAchievementRecordMutationVariables>;
export const UpdateAchievementRecordByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAchievementRecordByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"setInput"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecord_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AchievementRecord_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"setInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateAchievementRecordByPkMutation, UpdateAchievementRecordByPkMutationVariables>;
export const InsertAnAchievementRecordAuthorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertAnAchievementRecordAuthor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"insertInput"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecordAuthor_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_AchievementRecordAuthor_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"insertInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertAnAchievementRecordAuthorMutation, InsertAnAchievementRecordAuthorMutationVariables>;
export const DeleteAchievementRecordAuthorByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAchievementRecordAuthorByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_AchievementRecordAuthor_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteAchievementRecordAuthorByPkMutation, DeleteAchievementRecordAuthorByPkMutationVariables>;
export const AchievementRecordListWithAuthorsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AchievementRecordListWithAuthors"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecord_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecord_order_by"}},"defaultValue":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementRecord"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AchievementRecordFragment"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementRecordAuthors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AchievementRecordAuthorFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AchievementRecordFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecord"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"csvResults"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"achievementOptionId"}},{"kind":"Field","name":{"kind":"Name","value":"uploadUserId"}},{"kind":"Field","name":{"kind":"Name","value":"coverImageUrl"}},{"kind":"Field","name":{"kind":"Name","value":"score"}},{"kind":"Field","name":{"kind":"Name","value":"rating"}},{"kind":"Field","name":{"kind":"Name","value":"documentationUrl"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"recordType"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AchievementRecordAuthorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AchievementRecordAuthor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}}]}}]}}]} as unknown as DocumentNode<AchievementRecordListWithAuthorsQuery, AchievementRecordListWithAuthorsQueryVariables>;
export const LoadParticipationDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"loadParticipationData"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"loadParticipationData"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"programId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}}]}}]}}]} as unknown as DocumentNode<LoadParticipationDataQuery, LoadParticipationDataQueryVariables>;
export const SaveAttendanceCertificateTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveAttendanceCertificateTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveAttendanceCertificateTemplate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"base64file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}}},{"kind":"Argument","name":{"kind":"Name","value":"filename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}}},{"kind":"Argument","name":{"kind":"Name","value":"programid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file_path"}},{"kind":"Field","name":{"kind":"Name","value":"google_link"}}]}}]}}]} as unknown as DocumentNode<SaveAttendanceCertificateTemplateMutation, SaveAttendanceCertificateTemplateMutationVariables>;
export const SaveAchievementCertificateTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveAchievementCertificateTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveAchievementCertificateTemplate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"base64file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}}},{"kind":"Argument","name":{"kind":"Name","value":"filename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}}},{"kind":"Argument","name":{"kind":"Name","value":"programid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file_path"}},{"kind":"Field","name":{"kind":"Name","value":"google_link"}}]}}]}}]} as unknown as DocumentNode<SaveAchievementCertificateTemplateMutation, SaveAchievementCertificateTemplateMutationVariables>;
export const SaveAchievementRecordCoverImageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveAchievementRecordCoverImage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"achievementRecordId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveAchievementRecordCoverImage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"base64file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}}},{"kind":"Argument","name":{"kind":"Name","value":"filename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}}},{"kind":"Argument","name":{"kind":"Name","value":"achievementRecordId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"achievementRecordId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file_path"}},{"kind":"Field","name":{"kind":"Name","value":"google_link"}}]}}]}}]} as unknown as DocumentNode<SaveAchievementRecordCoverImageMutation, SaveAchievementRecordCoverImageMutationVariables>;
export const SaveAchievementRecordDocumentationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveAchievementRecordDocumentation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"achievementRecordId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveAchievementRecordDocumentation"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"base64file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}}},{"kind":"Argument","name":{"kind":"Name","value":"filename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}}},{"kind":"Argument","name":{"kind":"Name","value":"achievementRecordId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"achievementRecordId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file_path"}},{"kind":"Field","name":{"kind":"Name","value":"google_link"}}]}}]}}]} as unknown as DocumentNode<SaveAchievementRecordDocumentationMutation, SaveAchievementRecordDocumentationMutationVariables>;
export const SaveAchievementDocumentationTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveAchievementDocumentationTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"achievementDocumentationTemplateId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveAchievementDocumentationTemplate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"base64file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}}},{"kind":"Argument","name":{"kind":"Name","value":"filename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}}},{"kind":"Argument","name":{"kind":"Name","value":"achievementDocumentationTemplateId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"achievementDocumentationTemplateId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file_path"}},{"kind":"Field","name":{"kind":"Name","value":"google_link"}}]}}]}}]} as unknown as DocumentNode<SaveAchievementDocumentationTemplateMutation, SaveAchievementDocumentationTemplateMutationVariables>;
export const GetSignedUrlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSignedUrl"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getSignedUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}}]}}]}}]} as unknown as DocumentNode<GetSignedUrlQuery, GetSignedUrlQueryVariables>;
export const SaveUserProfileImageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveUserProfileImage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveUserProfileImage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"base64file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}}},{"kind":"Argument","name":{"kind":"Name","value":"filename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}}},{"kind":"Argument","name":{"kind":"Name","value":"userid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file_path"}},{"kind":"Field","name":{"kind":"Name","value":"google_link"}}]}}]}}]} as unknown as DocumentNode<SaveUserProfileImageMutation, SaveUserProfileImageMutationVariables>;
export const SaveCourseImageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveCourseImage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveCourseImage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"base64file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"base64File"}}},{"kind":"Argument","name":{"kind":"Name","value":"filename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileName"}}},{"kind":"Argument","name":{"kind":"Name","value":"courseid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file_path"}},{"kind":"Field","name":{"kind":"Name","value":"google_link"}}]}}]}}]} as unknown as DocumentNode<SaveCourseImageMutation, SaveCourseImageMutationVariables>;
export const CreateCertificateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"createCertificate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"certificateType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCertificate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userIds"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}}},{"kind":"Argument","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"certificateType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"certificateType"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"result"}}]}}]}}]} as unknown as DocumentNode<CreateCertificateMutation, CreateCertificateMutationVariables>;
export const CreateCertificatesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"createCertificates"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"certificateType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCertificate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userIds"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}}},{"kind":"Argument","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"certificateType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"certificateType"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"result"}}]}}]}}]} as unknown as DocumentNode<CreateCertificatesMutation, CreateCertificatesMutationVariables>;
export const AppSettingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AppSettings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AppSettings"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"appName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appName"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"backgroundImageURL"}},{"kind":"Field","name":{"kind":"Name","value":"bannerBackgroundColor"}},{"kind":"Field","name":{"kind":"Name","value":"bannerFontColor"}},{"kind":"Field","name":{"kind":"Name","value":"bannerTextDe"}},{"kind":"Field","name":{"kind":"Name","value":"bannerTextEn"}},{"kind":"Field","name":{"kind":"Name","value":"previewImageURL"}},{"kind":"Field","name":{"kind":"Name","value":"timeZone"}}]}}]}}]} as unknown as DocumentNode<AppSettingsQuery, AppSettingsQueryVariables>;
export const UpdateTimeZoneDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateTimeZone"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"value"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AppSettings_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"appName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appName"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"timeZone"},"value":{"kind":"Variable","name":{"kind":"Name","value":"value"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"timeZone"}}]}}]}}]} as unknown as DocumentNode<UpdateTimeZoneMutation, UpdateTimeZoneMutationVariables>;
export const UpdateBannerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateBanner"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"bannerBackgroundColor"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"bannerFontColor"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"bannerTextDe"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"bannerTextEn"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_AppSettings_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"appName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appName"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"bannerBackgroundColor"},"value":{"kind":"Variable","name":{"kind":"Name","value":"bannerBackgroundColor"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"bannerFontColor"},"value":{"kind":"Variable","name":{"kind":"Name","value":"bannerFontColor"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"bannerTextDe"},"value":{"kind":"Variable","name":{"kind":"Name","value":"bannerTextDe"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"bannerTextEn"},"value":{"kind":"Variable","name":{"kind":"Name","value":"bannerTextEn"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"backgroundImageURL"}},{"kind":"Field","name":{"kind":"Name","value":"bannerBackgroundColor"}},{"kind":"Field","name":{"kind":"Name","value":"bannerFontColor"}},{"kind":"Field","name":{"kind":"Name","value":"bannerTextEn"}},{"kind":"Field","name":{"kind":"Name","value":"bannerTextDe"}}]}}]}}]} as unknown as DocumentNode<UpdateBannerMutation, UpdateBannerMutationVariables>;
export const CourseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Course"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}}]} as unknown as DocumentNode<CourseQuery, CourseQueryVariables>;
export const CourseMinimumDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseMinimum"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragmentMinimum"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragmentMinimum"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<CourseMinimumQuery, CourseMinimumQueryVariables>;
export const ManagedCourseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ManagedCourse"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AdminCourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AdminEnrollmentFragment"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}},{"kind":"Field","name":{"kind":"Name","value":"Attendances"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"Session"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"Session"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AdminSessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOptionCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"AchievementRecords"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"documentationUrl"}},{"kind":"Field","name":{"kind":"Name","value":"rating"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"AchievementRecordAuthors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}}]}},{"kind":"Field","name":{"kind":"Name","value":"AchievementOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"recordType"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"EnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminCourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminEnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}},{"kind":"Field","name":{"kind":"Name","value":"motivationLetter"}},{"kind":"Field","name":{"kind":"Name","value":"motivationRating"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminSessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}}]}}]}}]}}]}}]} as unknown as DocumentNode<ManagedCourseQuery, ManagedCourseQueryVariables>;
export const InsertSessionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertSession"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"timestamptz"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"timestamptz"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_Session"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"StringValue","value":"","block":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"endDateTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"description"},"value":{"kind":"StringValue","value":"","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertSessionMutation, InsertSessionMutationVariables>;
export const DeleteSessionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteSession"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_Session_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteSessionMutation, DeleteSessionMutationVariables>;
export const UpdateSessionTitleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSessionTitle"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Session_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateSessionTitleMutation, UpdateSessionTitleMutationVariables>;
export const UpdateSessionStartTimeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSessionStartTime"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"timestamptz"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Session_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateSessionStartTimeMutation, UpdateSessionStartTimeMutationVariables>;
export const UpdateSessionEndTimeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSessionEndTime"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"timestamptz"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Session_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"endDateTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateSessionEndTimeMutation, UpdateSessionEndTimeMutationVariables>;
export const InsertNewSessionSpeakerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertNewSessionSpeaker"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"expertId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_SessionSpeaker"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"sessionId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"expertId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"expertId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertNewSessionSpeakerMutation, InsertNewSessionSpeakerMutationVariables>;
export const DeleteSessionSpeakerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteSessionSpeaker"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"speakerId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_SessionSpeaker_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"speakerId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteSessionSpeakerMutation, DeleteSessionSpeakerMutationVariables>;
export const InsertSessionAddressDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertSessionAddress"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"address"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseLocationId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_SessionAddress"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"sessionId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sessionId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"address"},"value":{"kind":"Variable","name":{"kind":"Name","value":"address"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"courseLocationId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseLocationId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertSessionAddressMutation, InsertSessionAddressMutationVariables>;
export const InsertSessionWithAddressesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertSessionWithAddresses"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"timestamptz"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"timestamptz"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sessionAddresses"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SessionAddress_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_Session"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"StringValue","value":"","block":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"endDateTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"description"},"value":{"kind":"StringValue","value":"","block":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"SessionAddresses"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sessionAddresses"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"courseLocationId"}}]}}]}}]}}]}}]} as unknown as DocumentNode<InsertSessionWithAddressesMutation, InsertSessionWithAddressesMutationVariables>;
export const UpdateSessionAddressDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSessionAddress"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_SessionAddress_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"address"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateSessionAddressMutation, UpdateSessionAddressMutationVariables>;
export const DeleteSessionAddressesByCourseAndLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteSessionAddressesByCourseAndLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseLocationId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_SessionAddress"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"Session"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"courseLocationId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseLocationId"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<DeleteSessionAddressesByCourseAndLocationMutation, DeleteSessionAddressesByCourseAndLocationMutationVariables>;
export const LocationOptionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"LocationOptions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"LocationOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]} as unknown as DocumentNode<LocationOptionsQuery, LocationOptionsQueryVariables>;
export const InsertCourseLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertCourseLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"option"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"LocationOption_enum"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_CourseLocation"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"locationOption"},"value":{"kind":"Variable","name":{"kind":"Name","value":"option"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"defaultSessionAddress"},"value":{"kind":"StringValue","value":"","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertCourseLocationMutation, InsertCourseLocationMutationVariables>;
export const UpdateCourseLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"locationId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"value"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"LocationOption_enum"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_CourseLocation_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"locationId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"locationOption"},"value":{"kind":"Variable","name":{"kind":"Name","value":"value"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseLocationMutation, UpdateCourseLocationMutationVariables>;
export const UpdateCourseDefaultSessionAddressDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseDefaultSessionAddress"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_CourseLocation_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"defaultSessionAddress"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseDefaultSessionAddressMutation, UpdateCourseDefaultSessionAddressMutationVariables>;
export const DeleteCourseLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCourseLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"locationId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_CourseLocation_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"locationId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteCourseLocationMutation, DeleteCourseLocationMutationVariables>;
export const UpdateCourseStartTimeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseStartTime"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"time"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startTime"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseStartTimeMutation, UpdateCourseStartTimeMutationVariables>;
export const UpdateCourseEndTimeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseEndTime"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"time"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"endTime"},"value":{"kind":"Variable","name":{"kind":"Name","value":"endTime"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseEndTimeMutation, UpdateCourseEndTimeMutationVariables>;
export const UpdateCourseLanguageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseLanguage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"value"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"value"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseLanguageMutation, UpdateCourseLanguageMutationVariables>;
export const UpdateCourseWeekdayDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseWeekday"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"value"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Weekday_enum"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"weekDay"},"value":{"kind":"Variable","name":{"kind":"Name","value":"value"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseWeekdayMutation, UpdateCourseWeekdayMutationVariables>;
export const UpdateCourseHeadingDescription1Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseHeadingDescription1"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"headingDescriptionField1"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseHeadingDescription1Mutation, UpdateCourseHeadingDescription1MutationVariables>;
export const UpdateCourseHeadingDescription2Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseHeadingDescription2"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"headingDescriptionField2"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseHeadingDescription2Mutation, UpdateCourseHeadingDescription2MutationVariables>;
export const UpdateCourseContentDescriptionField1Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseContentDescriptionField1"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contentDescriptionField1"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseContentDescriptionField1Mutation, UpdateCourseContentDescriptionField1MutationVariables>;
export const UpdateCourseContentDescriptionField2Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseContentDescriptionField2"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contentDescriptionField2"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseContentDescriptionField2Mutation, UpdateCourseContentDescriptionField2MutationVariables>;
export const UpdateCourseLearningGoalsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseLearningGoals"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"learningGoals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseLearningGoalsMutation, UpdateCourseLearningGoalsMutationVariables>;
export const UpdateShortDescriptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateShortDescription"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"tagline"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateShortDescriptionMutation, UpdateShortDescriptionMutationVariables>;
export const UpdateCourseMaxParticipantsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseMaxParticipants"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"maxParticipants"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"maxParticipants"},"value":{"kind":"Variable","name":{"kind":"Name","value":"maxParticipants"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseMaxParticipantsMutation, UpdateCourseMaxParticipantsMutationVariables>;
export const UpdateCourseStatusDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseStatus"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CourseStatus_enum"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseStatusMutation, UpdateCourseStatusMutationVariables>;
export const UpdateCourseAttendanceCertificatePossibleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseAttendanceCertificatePossible"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isPossible"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"attendanceCertificatePossible"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isPossible"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseAttendanceCertificatePossibleMutation, UpdateCourseAttendanceCertificatePossibleMutationVariables>;
export const UpdateCourseAchievementCertificatePossibleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseAchievementCertificatePossible"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isPossible"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"achievementCertificatePossible"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isPossible"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseAchievementCertificatePossibleMutation, UpdateCourseAchievementCertificatePossibleMutationVariables>;
export const UpdateCourseTitleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseTitle"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseTitle"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseTitle"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseTitleMutation, UpdateCourseTitleMutationVariables>;
export const UpdateCourseChatLinkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseChatLink"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"chatLink"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseChatLinkMutation, UpdateCourseChatLinkMutationVariables>;
export const UpdateCourseEctsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseEcts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"ects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseEctsMutation, UpdateCourseEctsMutationVariables>;
export const UpdateCourseExternalRegistrationLinkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseExternalRegistrationLink"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"text"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"externalRegistrationLink"},"value":{"kind":"Variable","name":{"kind":"Name","value":"text"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseExternalRegistrationLinkMutation, UpdateCourseExternalRegistrationLinkMutationVariables>;
export const DegreeCoursesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"Program"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"shortTitle"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"StringValue","value":"DEGREES","block":false}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]} as unknown as DocumentNode<DegreeCoursesQuery, DegreeCoursesQueryVariables>;
export const CompletedDegreeEnrollmentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CompletedDegreeEnrollments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"degreeCourseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollment"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_or"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"Course"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"CourseDegrees"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"degreeCourseId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"degreeCourseId"}}}]}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"achievementCertificateURL"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_is_null"},"value":{"kind":"BooleanValue","value":false}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"Course"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"CourseDegrees"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"degreeCourseId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"degreeCourseId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"Program"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"shortTitle"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"StringValue","value":"EVENTS","block":false}}]}}]}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}}]} as unknown as DocumentNode<CompletedDegreeEnrollmentsQuery, CompletedDegreeEnrollmentsQueryVariables>;
export const DegreeParticipantsWithDegreeEnrollmentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"DegreeParticipantsWithDegreeEnrollments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"degreeCourseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"degreeCourseId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"Course"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"CourseDegrees"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"degreeCourseId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"degreeCourseId"}}}]}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"updated_at"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<DegreeParticipantsWithDegreeEnrollmentsQuery, DegreeParticipantsWithDegreeEnrollmentsQueryVariables>;
export const InsertCourseDegreeTagDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertCourseDegreeTag"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_CourseDegree"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"degreeCourseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<InsertCourseDegreeTagMutation, InsertCourseDegreeTagMutationVariables>;
export const DeleteCourseDegreeTagDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCourseDegreeTag"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_CourseDegree"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"Course"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"DegreeCourse"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"tagId"}}}]}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}}]}}]}}]} as unknown as DocumentNode<DeleteCourseDegreeTagMutation, DeleteCourseDegreeTagMutationVariables>;
export const InsertSingleAttendanceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertSingleAttendance"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Attendance_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_Attendance_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertSingleAttendanceMutation, InsertSingleAttendanceMutationVariables>;
export const UpdateSingleAttendanceByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSingleAttendanceByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pkId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Attendance_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_Attendance_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pkId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateSingleAttendanceByPkMutation, UpdateSingleAttendanceByPkMutationVariables>;
export const CourseEnrollmentQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseEnrollmentQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollment"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseEnrollmentFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseEnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"motivationLetter"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}}]} as unknown as DocumentNode<CourseEnrollmentQueryQuery, CourseEnrollmentQueryQueryVariables>;
export const CourseEnrollmentWithUserQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseEnrollmentWithUserQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollment"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseEnrollmentFragment"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseEnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"motivationLetter"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]} as unknown as DocumentNode<CourseEnrollmentWithUserQueryQuery, CourseEnrollmentWithUserQueryQueryVariables>;
export const CourseInstructorListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseInstructorList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseInstructor"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]} as unknown as DocumentNode<CourseInstructorListQuery, CourseInstructorListQueryVariables>;
export const CourseTileListAnonymousDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseTileListAnonymous"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseTileFragmentAnonymous"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseTileFragmentAnonymous"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}}]}}]} as unknown as DocumentNode<CourseTileListAnonymousQuery, CourseTileListAnonymousQueryVariables>;
export const CourseListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"updated_at"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}}]} as unknown as DocumentNode<CourseListQuery, CourseListQueryVariables>;
export const AdminCourseListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AdminCourseList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Course_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AdminCourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollmentStatus"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupOptionId"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseDegrees"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"degreeCourseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourse"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"AppliedAndUnratedCount"},"name":{"kind":"Name","value":"CourseEnrollments_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"CourseEnrollmentStatus"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"value"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"StringValue","value":"APPLIED","block":false}}]}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"MotivationRating"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"value"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"StringValue","value":"UNRATED","block":false}}]}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"Course_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminCourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}}]}}]} as unknown as DocumentNode<AdminCourseListQuery, AdminCourseListQueryVariables>;
export const CourseTilesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseTiles"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"updated_at"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseTileFragment"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"order"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseTileFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}}]}}]} as unknown as DocumentNode<CourseTilesQuery, CourseTilesQueryVariables>;
export const CoursesByInstructorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CoursesByInstructor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"applicationEnd"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"CourseInstructors"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"Expert"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"User"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseTileFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseTileFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}}]}}]} as unknown as DocumentNode<CoursesByInstructorQuery, CoursesByInstructorQueryVariables>;
export const CoursesEnrolledByUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CoursesEnrolledByUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"applicationEnd"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"CourseEnrollments"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseTileFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseTileFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}}]}}]} as unknown as DocumentNode<CoursesEnrolledByUserQuery, CoursesEnrolledByUserQueryVariables>;
export const CourseWithEnrollmentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseWithEnrollment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Course_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}},{"kind":"Field","name":{"kind":"Name","value":"Attendances"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"User"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"updated_at"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"EnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"applicationStart"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<CourseWithEnrollmentQuery, CourseWithEnrollmentQueryVariables>;
export const MyCoursesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MyCourses"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragment"}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"EnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"applicationStart"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<MyCoursesQuery, MyCoursesQueryVariables>;
export const MyEnrollmentsForCourseQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MyEnrollmentsForCourseQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollment"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"courseId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"courseId"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"EnrollmentFragment"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SessionFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Session"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"endDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"startDateTime"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"SessionAddresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"SessionSpeakers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseInstructorFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseInstructor"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"Expert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"EnrollmentFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CourseEnrollment"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"invitationExpirationDate"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CourseFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Course"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"tagline"}},{"kind":"Field","name":{"kind":"Name","value":"weekDay"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"applicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"}},{"kind":"Field","name":{"kind":"Name","value":"language"}},{"kind":"Field","name":{"kind":"Name","value":"maxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"chatLink"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificatePossible"}},{"kind":"Field","name":{"kind":"Name","value":"programId"}},{"kind":"Field","name":{"kind":"Name","value":"maxParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"learningGoals"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField1"}},{"kind":"Field","name":{"kind":"Name","value":"headingDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"contentDescriptionField2"}},{"kind":"Field","name":{"kind":"Name","value":"externalRegistrationLink"}},{"kind":"Field","name":{"kind":"Name","value":"startTime"}},{"kind":"Field","name":{"kind":"Name","value":"endTime"}},{"kind":"Field","name":{"kind":"Name","value":"Sessions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDateTime"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SessionFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseInstructors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CourseInstructorFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"defaultSessionAddress"}},{"kind":"Field","name":{"kind":"Name","value":"locationOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"order"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"DegreeCourses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"ects"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"published"}}]}}]}}]}}]}}]} as unknown as DocumentNode<MyEnrollmentsForCourseQueryQuery, MyEnrollmentsForCourseQueryQueryVariables>;
export const CourseGroupOptionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CourseGroupOptions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"CourseGroupOption"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"order"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"order"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]} as unknown as DocumentNode<CourseGroupOptionsQuery, CourseGroupOptionsQueryVariables>;
export const UpdateCourseGroupOptionOrderDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCourseGroupOptionOrder"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"order"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_CourseGroupOption_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"order"},"value":{"kind":"Variable","name":{"kind":"Name","value":"order"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"order"}},{"kind":"Field","name":{"kind":"Name","value":"__typename"}}]}}]}}]} as unknown as DocumentNode<UpdateCourseGroupOptionOrderMutation, UpdateCourseGroupOptionOrderMutationVariables>;
export const EmplomentByValueDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EmplomentByValue"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Employment"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"value"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"comment"}}]}}]}}]} as unknown as DocumentNode<EmplomentByValueQuery, EmplomentByValueQueryVariables>;
export const ExpertListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ExpertList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Expert_bool_exp"}}},"defaultValue":{"kind":"ObjectValue","fields":[]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Expert"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"User"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]}}]} as unknown as DocumentNode<ExpertListQuery, ExpertListQueryVariables>;
export const MailTemplatesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MailTemplates"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"MailTemplate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"subject"}},{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"from"}},{"kind":"Field","name":{"kind":"Name","value":"cc"}},{"kind":"Field","name":{"kind":"Name","value":"bcc"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]} as unknown as DocumentNode<MailTemplatesQuery, MailTemplatesQueryVariables>;
export const InsertMailLogDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertMailLog"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"subject"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"content"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"from"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cc"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"bcc"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"to"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_MailLog"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"subject"},"value":{"kind":"Variable","name":{"kind":"Name","value":"subject"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"content"},"value":{"kind":"Variable","name":{"kind":"Name","value":"content"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"from"},"value":{"kind":"Variable","name":{"kind":"Name","value":"from"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"cc"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cc"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"bcc"},"value":{"kind":"Variable","name":{"kind":"Name","value":"bcc"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"to"},"value":{"kind":"Variable","name":{"kind":"Name","value":"to"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertMailLogMutation, InsertMailLogMutationVariables>;
export const MultiProgramEnrollmentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MultiProgramEnrollments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"programIds"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Program"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"programIds"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"Courses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateURL"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"updated_at"}}]}}]}}]}}]}}]} as unknown as DocumentNode<MultiProgramEnrollmentsQuery, MultiProgramEnrollmentsQueryVariables>;
export const ProgramListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProgramList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AdminProgramFragment"}},{"kind":"Field","name":{"kind":"Name","value":"Courses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AdminProgramFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}},{"kind":"Field","name":{"kind":"Name","value":"applicationStart"}},{"kind":"Field","name":{"kind":"Name","value":"closingQuestionnaire"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultMaxMissedSessions"}},{"kind":"Field","name":{"kind":"Name","value":"speakerQuestionnaire"}},{"kind":"Field","name":{"kind":"Name","value":"startQuestionnaire"}},{"kind":"Field","name":{"kind":"Name","value":"attendanceCertificateTemplateURL"}},{"kind":"Field","name":{"kind":"Name","value":"achievementCertificateTemplateURL"}},{"kind":"Field","name":{"kind":"Name","value":"visibility"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<ProgramListQuery, ProgramListQueryVariables>;
export const ProgramsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Programs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Program"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProgramFragmentMinimumProperties"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Program"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}},{"kind":"Field","name":{"kind":"Name","value":"lectureStart"}},{"kind":"Field","name":{"kind":"Name","value":"lectureEnd"}},{"kind":"Field","name":{"kind":"Name","value":"defaultApplicationEnd"}},{"kind":"Field","name":{"kind":"Name","value":"achievementRecordUploadDeadline"}},{"kind":"Field","name":{"kind":"Name","value":"published"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAchievementCertificate"}},{"kind":"Field","name":{"kind":"Name","value":"visibilityAttendanceCertificate"}}]}}]} as unknown as DocumentNode<ProgramsQuery, ProgramsQueryVariables>;
export const UnversityByCommentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UnversityByComment"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"University"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"comment"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"comment"}}]}}]}}]} as unknown as DocumentNode<UnversityByCommentQuery, UnversityByCommentQueryVariables>;
export const UserListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"EnumValue","value":"ACTIVE"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]} as unknown as DocumentNode<UserListQuery, UserListQueryVariables>;
export const UserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"User"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"matriculationNumber"}},{"kind":"Field","name":{"kind":"Name","value":"otherUniversity"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"picture"}},{"kind":"Field","name":{"kind":"Name","value":"externalProfile"}},{"kind":"Field","name":{"kind":"Name","value":"employment"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]} as unknown as DocumentNode<UserQuery, UserQueryVariables>;
export const InsertExpertDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertExpert"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_Expert"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertExpertMutation, InsertExpertMutationVariables>;
export const UserForSelection1Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserForSelection1"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchValue"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"EnumValue","value":"asc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"EnumValue","value":"ACTIVE"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_or"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"firstName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_ilike"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchValue"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_ilike"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchValue"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_ilike"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchValue"}}}]}}]}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"Experts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UserForSelection1Query, UserForSelection1QueryVariables>;
export const UserForSelection2Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserForSelection2"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchValue1"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchValue2"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"EnumValue","value":"asc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"EnumValue","value":"ACTIVE"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_or"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"firstName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_ilike"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchValue1"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_ilike"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchValue2"}}}]}}]}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"Experts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UserForSelection2Query, UserForSelection2QueryVariables>;
export const UsersByLastNameDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UsersByLastName"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"10"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"User_bool_exp"}},"defaultValue":{"kind":"ObjectValue","fields":[]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"EnumValue","value":"asc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"EnumValue","value":"ACTIVE"}}]}}]},{"kind":"Variable","name":{"kind":"Name","value":"filter"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"matriculationNumber"}},{"kind":"Field","name":{"kind":"Name","value":"university"}},{"kind":"Field","name":{"kind":"Name","value":"employment"}},{"kind":"Field","name":{"kind":"Name","value":"CourseEnrollments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"courseId"}},{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"updated_at"}},{"kind":"Field","name":{"kind":"Name","value":"Course"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"Program"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"shortTitle"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"User_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<UsersByLastNameQuery, UsersByLastNameQueryVariables>;
export const UsersWithExpertIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UsersWithExpertId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userOrderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"User_order_by"}},"defaultValue":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"EnumValue","value":"asc"}}]}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"NullValue"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"User_bool_exp"}},"defaultValue":{"kind":"ObjectValue","fields":[]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"User_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"User"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"userOrderBy"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"EnumValue","value":"ACTIVE"}}]}}]},{"kind":"Variable","name":{"kind":"Name","value":"where"}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"Experts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UsersWithExpertIdQuery, UsersWithExpertIdQueryVariables>;
export const DeleteUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"anonymizeUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"anonymizedUserId"}},{"kind":"Field","name":{"kind":"Name","value":"messageKey"}},{"kind":"Field","name":{"kind":"Name","value":"error"}},{"kind":"Field","name":{"kind":"Name","value":"steps"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"keycloak_deletion"}},{"kind":"Field","name":{"kind":"Name","value":"user_data_anonymization"}},{"kind":"Field","name":{"kind":"Name","value":"motivation_letter_anonymization"}},{"kind":"Field","name":{"kind":"Name","value":"profile_picture_removal"}},{"kind":"Field","name":{"kind":"Name","value":"certificate_anonymization"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteUserMutation, DeleteUserMutationVariables>;