/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment AchievementRecordAuthorFragment on AchievementRecordAuthor {\n    id\n    created_at\n    User {\n      ...UserFragment\n    }\n  }\n": types.AchievementRecordAuthorFragmentFragmentDoc,
    "\n  fragment AchievementOptionFragment on AchievementOption {\n    id\n    title\n    description\n    recordType\n    evaluationScriptUrl\n    csvTemplateUrl\n    showScoreAuthors\n    achievementDocumentationTemplateId\n    AchievementOptionTemplate {\n      title\n      url\n    }\n  }\n": types.AchievementOptionFragmentFragmentDoc,
    "\n  fragment AchievementRecordFragment on AchievementRecord {\n    id\n    created_at\n    csvResults\n    description\n    achievementOptionId\n    uploadUserId\n    coverImageUrl\n    score\n    rating\n    documentationUrl\n    AchievementOption {\n      id\n      title\n      recordType\n    }\n  }\n": types.AchievementRecordFragmentFragmentDoc,
    "\n  fragment CourseEnrollmentFragment on CourseEnrollment {\n    id\n    courseId\n    userId\n    invitationExpirationDate\n    motivationLetter\n    status\n    achievementCertificateURL\n    attendanceCertificateURL\n  }\n": types.CourseEnrollmentFragmentFragmentDoc,
    "\n  fragment CourseTileFragment on Course {\n    id\n    title\n    tagline\n    coverImage\n    language\n    weekDay\n    startTime\n    endTime\n    Program {\n      published\n      title\n    }\n    CourseLocations {\n      locationOption\n    }\n  }\n": types.CourseTileFragmentFragmentDoc,
    "\n  fragment CourseTileFragmentAnonymous on Course {\n    id\n    weekDay\n    published\n    coverImage\n    language\n    title\n    startTime\n    endTime\n    CourseGroups {\n      id\n      CourseGroupOption {\n        id\n        title\n        order\n      }\n    }\n  }\n": types.CourseTileFragmentAnonymousFragmentDoc,
    "\n  fragment CourseFragment on Course {\n    id\n    ects\n    tagline\n    weekDay\n    cost\n    published\n    applicationEnd\n    coverImage\n    language\n    maxMissedSessions\n    chatLink\n    title\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    programId\n    maxParticipants\n    learningGoals\n    headingDescriptionField1\n    contentDescriptionField1\n    headingDescriptionField2\n    contentDescriptionField2\n    externalRegistrationLink\n    startTime\n    endTime\n    Sessions(order_by: { startDateTime: asc }) {\n      ...SessionFragment\n    }\n    CourseInstructors(order_by: { id: desc }) {\n      ...CourseInstructorFragment\n    }\n    CourseLocations {\n      id\n      defaultSessionAddress\n      locationOption\n    }\n    Program {\n      ...ProgramFragmentMinimumProperties\n    }\n    CourseGroups {\n      id\n      CourseGroupOption {\n        id\n        title\n        order\n      }\n    }\n    DegreeCourses {\n      id\n      courseId\n      Course {\n        id\n        title\n        published\n        ects\n        Program {\n          id\n          published\n        }\n      }\n    }\n  }\n": types.CourseFragmentFragmentDoc,
    "\n  fragment AdminCourseFragment on Course {\n    ...CourseFragment\n    learningGoals\n    status\n    published\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    chatLink\n    Program {\n      ...ProgramFragmentMinimumProperties\n    }\n  }\n": types.AdminCourseFragmentFragmentDoc,
    "\n  fragment CourseFragmentMinimum on Course {\n    id\n    title\n    status\n    ects\n    tagline\n    language\n    applicationEnd\n    cost\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    maxMissedSessions\n    weekDay\n    coverImage\n    programId\n    learningGoals\n    chatLink\n    published\n    maxParticipants\n    endTime\n    startTime\n  }\n": types.CourseFragmentMinimumFragmentDoc,
    "\n  fragment CourseInstructorFragment on CourseInstructor {\n    id\n    Expert {\n      id\n      User {\n        firstName\n        picture\n        id\n        lastName\n        university\n        otherUniversity\n        externalProfile\n      }\n      description\n    }\n  }\n": types.CourseInstructorFragmentFragmentDoc,
    "\n  fragment EnrollmentFragment on CourseEnrollment {\n    userId\n    courseId\n    invitationExpirationDate\n    id\n    status\n    achievementCertificateURL\n    attendanceCertificateURL\n  }\n": types.EnrollmentFragmentFragmentDoc,
    "\n  fragment AdminEnrollmentFragment on CourseEnrollment {\n    ...EnrollmentFragment\n    motivationLetter\n    motivationRating\n  }\n": types.AdminEnrollmentFragmentFragmentDoc,
    "\n  fragment ProgramFragmentMinimumProperties on Program {\n    id\n    title\n    shortTitle\n    lectureStart\n    lectureEnd\n    defaultApplicationEnd\n    achievementRecordUploadDeadline\n    published\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n": types.ProgramFragmentMinimumPropertiesFragmentDoc,
    "\n  fragment ProgramFragment on Program {\n    ...ProgramFragmentMinimumProperties\n    defaultApplicationEnd\n    applicationStart\n    id\n    lectureEnd\n    lectureStart\n    title\n    shortTitle\n    achievementRecordUploadDeadline\n    published\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n": types.ProgramFragmentFragmentDoc,
    "\n  fragment AdminProgramFragment on Program {\n    ...ProgramFragmentMinimumProperties\n    applicationStart\n    closingQuestionnaire\n    defaultApplicationEnd\n    defaultMaxMissedSessions\n    speakerQuestionnaire\n    startQuestionnaire\n    attendanceCertificateTemplateURL\n    achievementCertificateTemplateURL\n    visibility\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n": types.AdminProgramFragmentFragmentDoc,
    "\n  fragment SessionFragment on Session {\n    id\n    endDateTime\n    courseId\n    description\n    startDateTime\n    title\n    SessionAddresses {\n      id\n      address\n      CourseLocation {\n        id\n        locationOption\n        defaultSessionAddress\n      }\n    }\n    SessionSpeakers {\n      Expert {\n        User {\n          id\n          firstName\n          lastName\n          picture\n          externalProfile\n          university\n          otherUniversity\n        }\n      }\n    }\n  }\n": types.SessionFragmentFragmentDoc,
    "\n  fragment AdminSessionFragment on Session {\n    ...SessionFragment\n    SessionSpeakers {\n      id\n      Expert {\n        id\n        User {\n          ...UserFragment\n        }\n      }\n    }\n  }\n": types.AdminSessionFragmentFragmentDoc,
    "\n  fragment UserFragment on User {\n    id\n    firstName\n    lastName\n    email\n    picture\n    externalProfile\n    university\n    otherUniversity\n  }\n": types.UserFragmentFragmentDoc,
    "\n  mutation InsertCourseGroup($itemId: Int!, $tagId: Int!) {\n    insert_CourseGroup(objects: { courseId: $itemId, groupOptionId: $tagId }) {\n      affected_rows\n    }\n  }\n": types.InsertCourseGroupDocument,
    "\n  mutation DeleteCourseGroup($itemId: Int!, $tagId: Int!) {\n    delete_CourseGroup(\n      where: { Course: { id: { _eq: $itemId } }, _and: { CourseGroupOption: { id: { _eq: $tagId } } } }\n    ) {\n      affected_rows\n    }\n  }\n": types.DeleteCourseGroupDocument,
    "\n  mutation UpdateEnrollment(\n    $userId: uuid!\n    $courseId: Int!\n    $motivationLetter: String!\n    $status: CourseEnrollmentStatus_enum!\n  ) {\n    insert_CourseEnrollment(\n      objects: { userId: $userId, courseId: $courseId, motivationLetter: $motivationLetter, status: $status }\n      on_conflict: { constraint: uniqueUserCourse, update_columns: [status] }\n    ) {\n      affected_rows\n    }\n  }\n": types.UpdateEnrollmentDocument,
    "\n  mutation InsertEnrollment($userId: uuid!, $courseId: Int!, $motivationLetter: String!) {\n    insert_CourseEnrollment(objects: { userId: $userId, courseId: $courseId, motivationLetter: $motivationLetter }) {\n      affected_rows\n      returning {\n        ...EnrollmentFragment\n        Course {\n          ...CourseFragment\n          CourseEnrollments {\n            ...EnrollmentFragment\n          }\n        }\n      }\n    }\n  }\n": types.InsertEnrollmentDocument,
    "\n  mutation UpdateEnrollmentRating($enrollmentId: Int!, $rating: MotivationRating_enum!) {\n    update_CourseEnrollment_by_pk(pk_columns: { id: $enrollmentId }, _set: { motivationRating: $rating }) {\n      id\n    }\n  }\n": types.UpdateEnrollmentRatingDocument,
    "\n  mutation UpdateEnrollmentForInvite($enrollmentId: Int!, $expire: date!) {\n    update_CourseEnrollment_by_pk(\n      pk_columns: { id: $enrollmentId }\n      _set: { invitationExpirationDate: $expire, status: INVITED }\n    ) {\n      id\n    }\n  }\n": types.UpdateEnrollmentForInviteDocument,
    "\n  mutation UpdateEnrollmentStatus($enrollmentId: Int!, $status: CourseEnrollmentStatus_enum!, $expire: date) {\n    update_CourseEnrollment_by_pk(\n      pk_columns: { id: $enrollmentId }\n      _set: { status: $status, invitationExpirationDate: $expire }\n    ) {\n      id\n    }\n  }\n": types.UpdateEnrollmentStatusDocument,
    "\n  mutation InsertUser($userId: uuid!, $firstName: String!, $lastName: String!, $email: String!) {\n    insert_User(objects: { id: $userId, lastName: $lastName, firstName: $firstName, email: $email }) {\n      affected_rows\n      returning {\n        id\n        picture\n        email\n        firstName\n        lastName\n      }\n    }\n  }\n": types.InsertUserDocument,
    "\n  mutation InsertSingleUser($user: User_insert_input!) {\n    insert_User_one(object: $user) {\n      id\n      picture\n      email\n      firstName\n      lastName\n    }\n  }\n": types.InsertSingleUserDocument,
    "\n  mutation InsertAnAchievementOption($data: AchievementOption_insert_input!) {\n    insert_AchievementOption_one(object: $data) {\n      id\n    }\n  }\n": types.InsertAnAchievementOptionDocument,
    "\n  mutation UpdateAnAchievementOption($id: Int!, $changes: AchievementOption_set_input) {\n    update_AchievementOption_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n": types.UpdateAnAchievementOptionDocument,
    "\n  mutation DeleteAnAchievementOption($id: Int!) {\n    delete_AchievementOption_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteAnAchievementOptionDocument,
    "\n  mutation InsertAnAchievementOptionCourse($data: AchievementOptionCourse_insert_input!) {\n    insert_AchievementOptionCourse_one(object: $data) {\n      id\n    }\n  }\n": types.InsertAnAchievementOptionCourseDocument,
    "\n  mutation UpdateAnAchievementOptionCourse($id: Int!, $changes: AchievementOptionCourse_set_input) {\n    update_AchievementOptionCourse_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n": types.UpdateAnAchievementOptionCourseDocument,
    "\n  mutation DeleteAnAchievementOptionCourse($id: Int!) {\n    delete_AchievementOptionCourse_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteAnAchievementOptionCourseDocument,
    "\n  mutation DeleteAnAchievementOptionCourseWithWhere($where: AchievementOptionCourse_bool_exp! = {}) {\n    delete_AchievementOptionCourse(where: $where) {\n      affected_rows\n    }\n  }\n": types.DeleteAnAchievementOptionCourseWithWhereDocument,
    "\n  mutation InsertAnAchievementOptionMentor($data: AchievementOptionMentor_insert_input!) {\n    insert_AchievementOptionMentor_one(object: $data) {\n      id\n    }\n  }\n": types.InsertAnAchievementOptionMentorDocument,
    "\n  mutation UpdateAnAchievementOptionMentor($id: Int!, $changes: AchievementOptionMentor_set_input) {\n    update_AchievementOptionMentor_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n": types.UpdateAnAchievementOptionMentorDocument,
    "\n  mutation DeleteAnAchievementOptionMentor($id: Int!) {\n    delete_AchievementOptionMentor_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteAnAchievementOptionMentorDocument,
    "\n  mutation DeleteAnAchievementOptionMentorWithWhere($where: AchievementOptionMentor_bool_exp! = {}) {\n    delete_AchievementOptionMentor(where: $where) {\n      affected_rows\n    }\n  }\n": types.DeleteAnAchievementOptionMentorWithWhereDocument,
    "\n  mutation InsertCourseWithLocation(\n    $title: String!\n    $applicationEnd: date!\n    $maxMissedSessions: Int!\n    $programId: Int!\n    $locationOption: LocationOption_enum!\n  ) {\n    insert_Course(\n      objects: {\n        title: $title\n        tagline: \"\"\n        language: \"DE\"\n        applicationEnd: $applicationEnd\n        maxMissedSessions: $maxMissedSessions\n        programId: $programId\n        CourseLocations: { data: { locationOption: $locationOption, defaultSessionAddress: \"\" } }\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n        CourseLocations {\n          id\n        }\n      }\n    }\n  }\n": types.InsertCourseWithLocationDocument,
    "\n  mutation InsertSingleCourse($course: Course_insert_input!) {\n    insert_Course_one(object: $course) {\n      id\n    }\n  }\n": types.InsertSingleCourseDocument,
    "\n  mutation DeleteCourseByPk($id: Int!) {\n    delete_Course_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteCourseByPkDocument,
    "\n  mutation UpdateCourseByPk($id: Int!, $changes: Course_set_input) {\n    update_Course_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n": types.UpdateCourseByPkDocument,
    "\n  mutation InsertCourseInstructor($courseId: Int!, $expertId: Int!) {\n    insert_CourseInstructor(objects: { courseId: $courseId, expertId: $expertId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertCourseInstructorDocument,
    "\n  mutation DeleteCourseInstructor($courseId: Int!, $expertId: Int!) {\n    delete_CourseInstructor(where: { _and: [{ courseId: { _eq: $courseId } }, { expertId: { _eq: $expertId } }] }) {\n      affected_rows\n    }\n  }\n": types.DeleteCourseInstructorDocument,
    "\n  mutation InsertProgram($title: String!, $today: date!) {\n    insert_Program(\n      objects: {\n        lectureStart: $today\n        lectureEnd: $today\n        applicationStart: $today\n        defaultApplicationEnd: $today\n        achievementRecordUploadDeadline: $today\n        title: $title\n        visibility: false\n        visibilityAttendanceCertificate: false\n        visibilityAchievementCertificate: false\n        defaultMaxMissedSessions: 2\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertProgramDocument,
    "\n  mutation DeleteProgram($programId: Int!) {\n    delete_Program_by_pk(id: $programId) {\n      id\n    }\n  }\n": types.DeleteProgramDocument,
    "\n  mutation UpdateProgramVisibility($programId: Int!, $visible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibility: $visible }) {\n      id\n    }\n  }\n": types.UpdateProgramVisibilityDocument,
    "\n  mutation UpdateProgramPublished($programId: Int!, $published: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { published: $published }) {\n      id\n    }\n  }\n": types.UpdateProgramPublishedDocument,
    "\n  mutation UpdateProgramTitle($programId: Int!, $title: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { title: $title }) {\n      id\n    }\n  }\n": types.UpdateProgramTitleDocument,
    "\n  mutation UpdateProgramShortTitle($programId: Int!, $shortTitle: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { shortTitle: $shortTitle }) {\n      id\n    }\n  }\n": types.UpdateProgramShortTitleDocument,
    "\n  mutation UpdateProgramParticipationTemplate($programId: Int!, $templatePath: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { attendanceCertificateTemplateURL: $templatePath }) {\n      id\n    }\n  }\n": types.UpdateProgramParticipationTemplateDocument,
    "\n  mutation UpdateProgramAchievementTemplate($programId: Int!, $templatePath: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { achievementCertificateTemplateURL: $templatePath }) {\n      id\n    }\n  }\n": types.UpdateProgramAchievementTemplateDocument,
    "\n  mutation UpdateProgramApplicationStart($programId: Int!, $applicationStart: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { applicationStart: $applicationStart }) {\n      id\n    }\n  }\n": types.UpdateProgramApplicationStartDocument,
    "\n  mutation UpdateProgramApplicationEnd($programId: Int!, $applicationEnd: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { defaultApplicationEnd: $applicationEnd }) {\n      id\n    }\n  }\n": types.UpdateProgramApplicationEndDocument,
    "\n  mutation UpdateProgramLectureStart($programId: Int!, $lectureStart: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { lectureStart: $lectureStart }) {\n      id\n    }\n  }\n": types.UpdateProgramLectureStartDocument,
    "\n  mutation UpdateProgramLectureEnd($programId: Int!, $lectureEnd: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { lectureEnd: $lectureEnd }) {\n      id\n    }\n  }\n": types.UpdateProgramLectureEndDocument,
    "\n  mutation UpdateProgramUploadDeadline($programId: Int!, $deadline: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { achievementRecordUploadDeadline: $deadline }) {\n      id\n    }\n  }\n": types.UpdateProgramUploadDeadlineDocument,
    "\n  mutation UpdateProgramStartQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { startQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n": types.UpdateProgramStartQuestionaireDocument,
    "\n  mutation UpdateProgramSpeakerQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { speakerQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n": types.UpdateProgramSpeakerQuestionaireDocument,
    "\n  mutation UpdateProgramClosingQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { closingQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n": types.UpdateProgramClosingQuestionaireDocument,
    "\n  mutation UpdateProgramAchievementCertVisible($programId: Int!, $isVisible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibilityAchievementCertificate: $isVisible }) {\n      id\n    }\n  }\n": types.UpdateProgramAchievementCertVisibleDocument,
    "\n  mutation UpdateProgramParticipationCertVisible($programId: Int!, $isVisible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibilityAttendanceCertificate: $isVisible }) {\n      id\n    }\n  }\n": types.UpdateProgramParticipationCertVisibleDocument,
    "\n  mutation UpdateUser(\n    $userId: uuid!\n    $firstName: String\n    $lastName: String\n    $email: String\n    $matriculationNumber: String\n    $university: University_enum\n    $externalProfile: String\n    $employment: Employment_enum\n    $picture: String\n  ) {\n    update_User_by_pk(\n      pk_columns: { id: $userId }\n      _set: {\n        firstName: $firstName\n        matriculationNumber: $matriculationNumber\n        lastName: $lastName\n        employment: $employment\n        email: $email\n        externalProfile: $externalProfile\n        university: $university\n        picture: $picture\n      }\n    ) {\n      id\n      firstName\n      matriculationNumber\n      lastName\n      employment\n      email\n      externalProfile\n      university\n      picture\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation UpdateUserOnEnrollmentConfirmation(\n    $userId: uuid!\n    $matriculationNumber: String\n    $otherUniversity: String\n    $university: University_enum\n    $employment: Employment_enum\n  ) {\n    update_User_by_pk(\n      pk_columns: { id: $userId }\n      _set: {\n        matriculationNumber: $matriculationNumber\n        otherUniversity: $otherUniversity\n        employment: $employment\n        university: $university\n      }\n    ) {\n      id\n      matriculationNumber\n      employment\n      otherUniversity\n      university\n    }\n  }\n": types.UpdateUserOnEnrollmentConfirmationDocument,
    "\n  mutation UpdateUserProfilePicture($userId: uuid!, $picture: String) {\n    update_User_by_pk(pk_columns: { id: $userId }, _set: { picture: $picture }) {\n      id\n      picture\n    }\n  }\n": types.UpdateUserProfilePictureDocument,
    "\n  query AchievementDocumentationTemplates {\n    AchievementDocumentationTemplate(order_by: { updated_at: desc }) {\n      id\n      title\n      url\n      updated_at\n    }\n  }\n": types.AchievementDocumentationTemplatesDocument,
    "\n  mutation InsertAchievementDocumentationTemplate($insertInput: AchievementDocumentationTemplate_insert_input!) {\n    insert_AchievementDocumentationTemplate_one(object: $insertInput) {\n      id\n    }\n  }\n": types.InsertAchievementDocumentationTemplateDocument,
    "\n  mutation UpdateAchievementDocumentationTemplate($itemId: Int!, $text: String, $url: String) {\n    update_AchievementDocumentationTemplate_by_pk(pk_columns: { id: $itemId }, _set: { title: $text, url: $url }) {\n      id\n      title\n    }\n  }\n": types.UpdateAchievementDocumentationTemplateDocument,
    "\n  mutation UpdateAchievementDocumentationTemplateTitle($itemId: Int!, $text: String) {\n    update_AchievementDocumentationTemplate_by_pk(pk_columns: { id: $itemId }, _set: { title: $text }) {\n      id\n      title\n    }\n  }\n": types.UpdateAchievementDocumentationTemplateTitleDocument,
    "\n  mutation DeleteAchievementDocumentationTemplate($id: Int!) {\n    delete_AchievementDocumentationTemplate_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteAchievementDocumentationTemplateDocument,
    "\n  query AchievementRecordTypes {\n    AchievementRecordType {\n      value\n    }\n  }\n": types.AchievementRecordTypesDocument,
    "\n  query AchievementOptionList(\n    $where: AchievementOption_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementOption_order_by = { id: desc }\n  ) {\n    AchievementOption(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      ...AchievementOptionFragment\n      AchievementOptionCourses {\n        id\n        courseId\n        Course {\n          title\n          Program {\n            ...ProgramFragmentMinimumProperties\n          }\n        }\n      }\n      AchievementOptionMentors {\n        id\n        User {\n          ...UserFragment\n        }\n      }\n    }\n  }\n": types.AchievementOptionListDocument,
    "\n  query AchievementOptionCourses(\n    $where: AchievementOptionCourse_bool_exp = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderByAchievementOptionCourse: AchievementOptionCourse_order_by = { id: desc }\n  ) {\n    AchievementOptionCourse(\n      order_by: [$orderByAchievementOptionCourse]\n      where: $where\n      limit: $limit\n      offset: $offset\n    ) {\n      AchievementOption {\n        ...AchievementOptionFragment\n      }\n      id\n      courseId\n      achievementOptionId\n      created_at\n    }\n  }\n": types.AchievementOptionCoursesDocument,
    "\n  query AchievementRecordAuthorQuery(\n    $where: AchievementRecordAuthor_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementRecordAuthor_order_by = { id: desc }\n  ) {\n    AchievementRecordAuthor(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      id\n      created_at\n      User {\n        ...UserFragment\n      }\n    }\n  }\n": types.AchievementRecordAuthorQueryDocument,
    "\n  mutation InsertAnAchievementRecord($insertInput: AchievementRecord_insert_input!) {\n    insert_AchievementRecord_one(object: $insertInput) {\n      id\n    }\n  }\n": types.InsertAnAchievementRecordDocument,
    "\n  mutation UpdateAchievementRecordByPk($id: Int!, $setInput: AchievementRecord_set_input!) {\n    update_AchievementRecord_by_pk(pk_columns: { id: $id }, _set: $setInput) {\n      id\n    }\n  }\n": types.UpdateAchievementRecordByPkDocument,
    "\n  mutation InsertAnAchievementRecordAuthor($insertInput: AchievementRecordAuthor_insert_input!) {\n    insert_AchievementRecordAuthor_one(object: $insertInput) {\n      id\n    }\n  }\n": types.InsertAnAchievementRecordAuthorDocument,
    "\n  mutation DeleteAchievementRecordAuthorByPk($id: Int!) {\n    delete_AchievementRecordAuthor_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteAchievementRecordAuthorByPkDocument,
    "\n  query AchievementRecordListWithAuthors(\n    $where: AchievementRecord_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementRecord_order_by = { id: desc }\n  ) {\n    AchievementRecord(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      ...AchievementRecordFragment\n      AchievementRecordAuthors {\n        ...AchievementRecordAuthorFragment\n      }\n    }\n  }\n": types.AchievementRecordListWithAuthorsDocument,
    "\n  query loadParticipationData($programId: Int!) {\n    loadParticipationData(programId: $programId) {\n      link\n    }\n  }\n": types.LoadParticipationDataDocument,
    "\n  mutation SaveAttendanceCertificateTemplate($base64File: String!, $fileName: String!, $programId: Int!) {\n    saveAttendanceCertificateTemplate(base64file: $base64File, filename: $fileName, programid: $programId) {\n      file_path\n      google_link\n    }\n  }\n": types.SaveAttendanceCertificateTemplateDocument,
    "\n  mutation SaveAchievementCertificateTemplate($base64File: String!, $fileName: String!, $programId: Int!) {\n    saveAchievementCertificateTemplate(base64file: $base64File, filename: $fileName, programid: $programId) {\n      file_path\n      google_link\n    }\n  }\n": types.SaveAchievementCertificateTemplateDocument,
    "\n  mutation SaveAchievementRecordCoverImage($base64File: String!, $fileName: String!, $achievementRecordId: Int!) {\n    saveAchievementRecordCoverImage(\n      base64file: $base64File\n      filename: $fileName\n      achievementRecordId: $achievementRecordId\n    ) {\n      file_path\n      google_link\n    }\n  }\n": types.SaveAchievementRecordCoverImageDocument,
    "\n  mutation SaveAchievementRecordDocumentation($base64File: String!, $fileName: String!, $achievementRecordId: Int!) {\n    saveAchievementRecordDocumentation(\n      base64file: $base64File\n      filename: $fileName\n      achievementRecordId: $achievementRecordId\n    ) {\n      file_path\n      google_link\n    }\n  }\n": types.SaveAchievementRecordDocumentationDocument,
    "\n  mutation SaveAchievementDocumentationTemplate(\n    $base64File: String!\n    $fileName: String!\n    $achievementDocumentationTemplateId: Int!\n  ) {\n    saveAchievementDocumentationTemplate(\n      base64file: $base64File\n      filename: $fileName\n      achievementDocumentationTemplateId: $achievementDocumentationTemplateId\n    ) {\n      file_path\n      google_link\n    }\n  }\n": types.SaveAchievementDocumentationTemplateDocument,
    "\n  query GetSignedUrl($path: String!) {\n    getSignedUrl(path: $path) {\n      link\n    }\n  }\n": types.GetSignedUrlDocument,
    "\n  mutation SaveUserProfileImage($base64File: String!, $fileName: String!, $userId: String!) {\n    saveUserProfileImage(base64file: $base64File, filename: $fileName, userid: $userId) {\n      file_path\n      google_link\n    }\n  }\n": types.SaveUserProfileImageDocument,
    "\n  mutation SaveCourseImage($base64File: String!, $fileName: String!, $courseId: Int!) {\n    saveCourseImage(base64file: $base64File, filename: $fileName, courseid: $courseId) {\n      file_path\n      google_link\n    }\n  }\n": types.SaveCourseImageDocument,
    "\n  mutation createCertificate($userIds: [uuid!]!, $courseId: Int!, $certificateType: String!) {\n    createCertificate(userIds: $userIds, courseId: $courseId, certificateType: $certificateType) {\n      result\n    }\n  }\n": types.CreateCertificateDocument,
    "\n  mutation createCertificates($userIds: [uuid!]!, $courseId: Int!, $certificateType: String!) {\n    createCertificate(userIds: $userIds, courseId: $courseId, certificateType: $certificateType) {\n      result\n    }\n  }\n": types.CreateCertificatesDocument,
    "\n  query AppSettings($appName: String!) {\n    AppSettings(where: { appName: { _eq: $appName } }) {\n      appName\n      backgroundImageURL\n      bannerBackgroundColor\n      bannerFontColor\n      bannerTextDe\n      bannerTextEn\n      previewImageURL\n      timeZone\n    }\n  }\n": types.AppSettingsDocument,
    "\n  mutation UpdateTimeZone($appName: String!, $value: String!) {\n    update_AppSettings_by_pk(pk_columns: { appName: $appName }, _set: { timeZone: $value }) {\n      appName\n      timeZone\n    }\n  }\n": types.UpdateTimeZoneDocument,
    "\n  mutation UpdateBanner(\n    $appName: String!\n    $bannerBackgroundColor: String\n    $bannerFontColor: String\n    $bannerTextDe: String\n    $bannerTextEn: String\n  ) {\n    update_AppSettings_by_pk(\n      pk_columns: { appName: $appName }\n      _set: {\n        bannerBackgroundColor: $bannerBackgroundColor\n        bannerFontColor: $bannerFontColor\n        bannerTextDe: $bannerTextDe\n        bannerTextEn: $bannerTextEn\n      }\n    ) {\n      appName\n      backgroundImageURL\n      bannerBackgroundColor\n      bannerFontColor\n      bannerTextEn\n      bannerTextDe\n    }\n  }\n": types.UpdateBannerDocument,
    "\n  query Course($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragment\n    }\n  }\n": types.CourseDocument,
    "\n  query CourseMinimum($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragmentMinimum\n      Program {\n        ...ProgramFragmentMinimumProperties\n      }\n    }\n  }\n": types.CourseMinimumDocument,
    "\n  query ManagedCourse($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...AdminCourseFragment\n      CourseEnrollments {\n        ...AdminEnrollmentFragment\n        User {\n          ...UserFragment\n          Attendances(where: { Session: { courseId: { _eq: $id } } }) {\n            id\n            status\n            Session {\n              id\n            }\n          }\n          CourseEnrollments {\n            status\n            courseId\n            Course {\n              id\n              title\n              Program {\n                shortTitle\n              }\n            }\n          }\n        }\n      }\n      CourseLocations {\n        id\n        defaultSessionAddress\n        locationOption\n      }\n      Sessions(order_by: { startDateTime: asc }) {\n        ...AdminSessionFragment\n      }\n      AchievementOptionCourses {\n        AchievementOption {\n          AchievementRecords {\n            id\n            courseId\n            documentationUrl\n            rating\n            created_at\n            AchievementRecordAuthors {\n              userId\n            }\n            AchievementOption {\n              title\n            }\n          }\n          recordType\n        }\n      }\n    }\n  }\n": types.ManagedCourseDocument,
    "\n  mutation InsertSession($courseId: Int!, $startTime: timestamptz!, $endTime: timestamptz!) {\n    insert_Session(\n      objects: { courseId: $courseId, title: \"\", startDateTime: $startTime, endDateTime: $endTime, description: \"\" }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertSessionDocument,
    "\n  mutation DeleteSession($sessionId: Int!) {\n    delete_Session_by_pk(id: $sessionId) {\n      id\n    }\n  }\n": types.DeleteSessionDocument,
    "\n  mutation UpdateSessionTitle($sessionId: Int!, $title: String!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { title: $title }) {\n      id\n    }\n  }\n": types.UpdateSessionTitleDocument,
    "\n  mutation UpdateSessionStartTime($sessionId: Int!, $startTime: timestamptz!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { startDateTime: $startTime }) {\n      id\n    }\n  }\n": types.UpdateSessionStartTimeDocument,
    "\n  mutation UpdateSessionEndTime($sessionId: Int!, $endTime: timestamptz!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { endDateTime: $endTime }) {\n      id\n    }\n  }\n": types.UpdateSessionEndTimeDocument,
    "\n  mutation InsertNewSessionSpeaker($sessionId: Int!, $expertId: Int!) {\n    insert_SessionSpeaker(objects: { sessionId: $sessionId, expertId: $expertId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertNewSessionSpeakerDocument,
    "\n  mutation DeleteSessionSpeaker($speakerId: Int!) {\n    delete_SessionSpeaker_by_pk(id: $speakerId) {\n      id\n    }\n  }\n": types.DeleteSessionSpeakerDocument,
    "\n  mutation InsertSessionAddress($sessionId: Int!, $address: String!, $courseLocationId: Int!) {\n    insert_SessionAddress(objects: { sessionId: $sessionId, address: $address, courseLocationId: $courseLocationId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertSessionAddressDocument,
    "\n  mutation InsertSessionWithAddresses(\n    $courseId: Int!\n    $startTime: timestamptz!\n    $endTime: timestamptz!\n    $sessionAddresses: [SessionAddress_insert_input!]!\n  ) {\n    insert_Session(\n      objects: {\n        courseId: $courseId\n        title: \"\"\n        startDateTime: $startTime\n        endDateTime: $endTime\n        description: \"\"\n        SessionAddresses: { data: $sessionAddresses }\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n        SessionAddresses {\n          id\n          address\n          courseLocationId\n        }\n      }\n    }\n  }\n": types.InsertSessionWithAddressesDocument,
    "\n  mutation UpdateSessionAddress($itemId: Int!, $text: String!) {\n    update_SessionAddress_by_pk(pk_columns: { id: $itemId }, _set: { address: $text }) {\n      id\n    }\n  }\n": types.UpdateSessionAddressDocument,
    "\n  mutation DeleteSessionAddressesByCourseAndLocation($courseId: Int!, $courseLocationId: Int!) {\n    delete_SessionAddress(\n      where: { Session: { courseId: { _eq: $courseId } }, courseLocationId: { _eq: $courseLocationId } }\n    ) {\n      affected_rows\n    }\n  }\n": types.DeleteSessionAddressesByCourseAndLocationDocument,
    "\n  query LocationOptions {\n    LocationOption {\n      value\n    }\n  }\n": types.LocationOptionsDocument,
    "\n  mutation InsertCourseLocation($courseId: Int!, $option: LocationOption_enum!) {\n    insert_CourseLocation(objects: { courseId: $courseId, locationOption: $option, defaultSessionAddress: \"\" }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertCourseLocationDocument,
    "\n  mutation UpdateCourseLocation($locationId: Int!, $value: LocationOption_enum!) {\n    update_CourseLocation_by_pk(pk_columns: { id: $locationId }, _set: { locationOption: $value }) {\n      id\n      locationOption\n    }\n  }\n": types.UpdateCourseLocationDocument,
    "\n  mutation UpdateCourseDefaultSessionAddress($itemId: Int!, $text: String!) {\n    update_CourseLocation_by_pk(pk_columns: { id: $itemId }, _set: { defaultSessionAddress: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseDefaultSessionAddressDocument,
    "\n  mutation DeleteCourseLocation($locationId: Int!) {\n    delete_CourseLocation_by_pk(id: $locationId) {\n      id\n    }\n  }\n": types.DeleteCourseLocationDocument,
    "\n  mutation UpdateCourseStartTime($courseId: Int!, $startTime: time) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { startTime: $startTime }) {\n      id\n      startTime\n    }\n  }\n": types.UpdateCourseStartTimeDocument,
    "\n  mutation UpdateCourseEndTime($courseId: Int!, $endTime: time) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { endTime: $endTime }) {\n      id\n      endTime\n    }\n  }\n": types.UpdateCourseEndTimeDocument,
    "\n  mutation UpdateCourseLanguage($courseId: Int!, $value: String!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { language: $value }) {\n      id\n    }\n  }\n": types.UpdateCourseLanguageDocument,
    "\n  mutation UpdateCourseWeekday($courseId: Int!, $value: Weekday_enum!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { weekDay: $value }) {\n      id\n      weekDay\n    }\n  }\n": types.UpdateCourseWeekdayDocument,
    "\n  mutation UpdateCourseHeadingDescription1($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { headingDescriptionField1: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseHeadingDescription1Document,
    "\n  mutation UpdateCourseHeadingDescription2($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { headingDescriptionField2: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseHeadingDescription2Document,
    "\n  mutation UpdateCourseContentDescriptionField1($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { contentDescriptionField1: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseContentDescriptionField1Document,
    "\n  mutation UpdateCourseContentDescriptionField2($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { contentDescriptionField2: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseContentDescriptionField2Document,
    "\n  mutation UpdateCourseLearningGoals($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { learningGoals: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseLearningGoalsDocument,
    "\n  mutation UpdateShortDescription($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { tagline: $text }) {\n      id\n    }\n  }\n": types.UpdateShortDescriptionDocument,
    "\n  mutation UpdateCourseMaxParticipants($courseId: Int!, $maxParticipants: Int!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { maxParticipants: $maxParticipants }) {\n      id\n    }\n  }\n": types.UpdateCourseMaxParticipantsDocument,
    "\n  mutation UpdateCourseStatus($courseId: Int!, $status: CourseStatus_enum!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { status: $status }) {\n      id\n    }\n  }\n": types.UpdateCourseStatusDocument,
    "\n  mutation UpdateCourseAttendanceCertificatePossible($courseId: Int!, $isPossible: Boolean!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { attendanceCertificatePossible: $isPossible }) {\n      id\n    }\n  }\n": types.UpdateCourseAttendanceCertificatePossibleDocument,
    "\n  mutation UpdateCourseAchievementCertificatePossible($courseId: Int!, $isPossible: Boolean!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { achievementCertificatePossible: $isPossible }) {\n      id\n    }\n  }\n": types.UpdateCourseAchievementCertificatePossibleDocument,
    "\n  mutation UpdateCourseTitle($courseId: Int!, $courseTitle: String!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { title: $courseTitle }) {\n      id\n    }\n  }\n": types.UpdateCourseTitleDocument,
    "\n  mutation UpdateCourseChatLink($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { chatLink: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseChatLinkDocument,
    "\n  mutation UpdateCourseEcts($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { ects: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseEctsDocument,
    "\n  mutation UpdateCourseExternalRegistrationLink($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { externalRegistrationLink: $text }) {\n      id\n    }\n  }\n": types.UpdateCourseExternalRegistrationLinkDocument,
    "\n  query DegreeCourses {\n    Course(where: { Program: { shortTitle: { _eq: \"DEGREES\" } } }) {\n      id\n      title\n    }\n  }\n": types.DegreeCoursesDocument,
    "\n  query CompletedDegreeEnrollments($degreeCourseId: Int!, $userId: uuid!) {\n    CourseEnrollment(\n      where: {\n        _or: [\n          {\n            userId: { _eq: $userId }\n            Course: { CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } } }\n            achievementCertificateURL: { _is_null: false }\n          }\n          {\n            userId: { _eq: $userId }\n            Course: {\n              CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } }\n              Program: { shortTitle: { _eq: \"EVENTS\" } }\n            }\n          }\n        ]\n      }\n    ) {\n      Course {\n        id\n        title\n        ects\n        Program {\n          shortTitle\n          title\n        }\n      }\n    }\n  }\n": types.CompletedDegreeEnrollmentsDocument,
    "\n  query DegreeParticipantsWithDegreeEnrollments($degreeCourseId: Int!) {\n    Course_by_pk(id: $degreeCourseId) {\n      CourseEnrollments {\n        id\n        status\n        achievementCertificateURL\n        attendanceCertificateURL\n        User {\n          id\n          firstName\n          lastName\n          email\n          CourseEnrollments(where: { Course: { CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } } } }) {\n            id\n            status\n            achievementCertificateURL\n            attendanceCertificateURL\n            updated_at\n            Course {\n              id\n              title\n              ects\n              Program {\n                id\n                shortTitle\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.DegreeParticipantsWithDegreeEnrollmentsDocument,
    "\n  mutation InsertCourseDegreeTag($itemId: Int!, $tagId: Int!) {\n    insert_CourseDegree(objects: { courseId: $itemId, degreeCourseId: $tagId }) {\n      affected_rows\n    }\n  }\n": types.InsertCourseDegreeTagDocument,
    "\n  mutation DeleteCourseDegreeTag($itemId: Int!, $tagId: Int!) {\n    delete_CourseDegree(where: { Course: { id: { _eq: $itemId } }, _and: { DegreeCourse: { id: { _eq: $tagId } } } }) {\n      affected_rows\n    }\n  }\n": types.DeleteCourseDegreeTagDocument,
    "\n  mutation InsertSingleAttendance($input: Attendance_insert_input!) {\n    insert_Attendance_one(object: $input) {\n      id\n    }\n  }\n": types.InsertSingleAttendanceDocument,
    "\n  mutation UpdateSingleAttendanceByPk($pkId: Int!, $changes: Attendance_set_input!) {\n    update_Attendance_by_pk(pk_columns: { id: $pkId }, _set: $changes) {\n      id\n      status\n    }\n  }\n": types.UpdateSingleAttendanceByPkDocument,
    "\n  query CourseEnrollmentQuery($where: CourseEnrollment_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    CourseEnrollment(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...CourseEnrollmentFragment\n    }\n  }\n": types.CourseEnrollmentQueryDocument,
    "\n  query CourseEnrollmentWithUserQuery($where: CourseEnrollment_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    CourseEnrollment(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...CourseEnrollmentFragment\n      User {\n        ...UserFragment\n      }\n    }\n  }\n": types.CourseEnrollmentWithUserQueryDocument,
    "\n  query CourseInstructorList {\n    CourseInstructor {\n      ...CourseInstructorFragment\n    }\n  }\n": types.CourseInstructorListDocument,
    "\n  query CourseTileListAnonymous {\n    Course(order_by: { id: desc }) {\n      ...CourseTileFragmentAnonymous\n    }\n  }\n": types.CourseTileListAnonymousDocument,
    "\n  query CourseList {\n    Course(order_by: { updated_at: desc }) {\n      ...CourseFragment\n    }\n  }\n": types.CourseListDocument,
    "\n  query AdminCourseList($where: Course_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    Course(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...AdminCourseFragment\n      Program {\n        ...ProgramFragmentMinimumProperties\n      }\n      CourseEnrollments {\n        id\n        CourseEnrollmentStatus {\n          value\n        }\n      }\n      CourseGroups {\n        id\n        groupOptionId\n        CourseGroupOption {\n          title\n        }\n      }\n      CourseDegrees {\n        id\n        degreeCourseId\n        Course {\n          title\n        }\n        DegreeCourse {\n          title\n        }\n      }\n      AppliedAndUnratedCount: CourseEnrollments_aggregate(\n        where: {\n          _and: [\n            { CourseEnrollmentStatus: { value: { _eq: \"APPLIED\" } } }\n            { MotivationRating: { value: { _eq: \"UNRATED\" } } }\n          ]\n        }\n      ) {\n        aggregate {\n          count\n        }\n      }\n    }\n    Course_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    CourseGroupOption {\n      id\n      title\n      order\n    }\n  }\n": types.AdminCourseListDocument,
    "\n  query CourseTiles {\n    Course(order_by: { updated_at: desc }) {\n      ...CourseTileFragment\n      CourseGroups {\n        CourseGroupOption {\n          order\n          title\n        }\n      }\n    }\n  }\n": types.CourseTilesDocument,
    "\n  query CoursesByInstructor($userId: uuid!) {\n    Course(\n      order_by: { applicationEnd: desc }\n      where: { CourseInstructors: { Expert: { User: { id: { _eq: $userId } } } } }\n    ) {\n      ...CourseTileFragment\n    }\n  }\n": types.CoursesByInstructorDocument,
    "\n  query CoursesEnrolledByUser($userId: uuid!) {\n    Course(order_by: { applicationEnd: desc }, where: { CourseEnrollments: { userId: { _eq: $userId } } }) {\n      ...CourseTileFragment\n    }\n  }\n": types.CoursesEnrolledByUserDocument,
    "\n  query CourseWithEnrollment($id: Int!, $userId: uuid!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragment\n      chatLink\n      # LinkVideoCall\n      CourseEnrollments {\n        ...EnrollmentFragment\n      }\n      CourseLocations {\n        id\n        locationOption\n        defaultSessionAddress\n      }\n      Program {\n        ...ProgramFragment\n      }\n      Sessions(order_by: { startDateTime: asc }) {\n        ...SessionFragment\n        Attendances(where: { User: { id: { _eq: $userId } } }) {\n          id\n          status\n          updated_at\n        }\n      }\n    }\n  }\n": types.CourseWithEnrollmentDocument,
    "\n  query MyCourses($userId: uuid!) {\n    User_by_pk(id: $userId) {\n      CourseEnrollments {\n        ...EnrollmentFragment\n        Course {\n          ...CourseFragment\n          CourseEnrollments {\n            ...EnrollmentFragment\n          }\n          Program {\n            ...ProgramFragment\n          }\n        }\n      }\n    }\n  }\n": types.MyCoursesDocument,
    "\n  query MyEnrollmentsForCourseQuery($courseId: Int!) {\n    CourseEnrollment(where: { courseId: { _eq: $courseId } }) {\n      ...EnrollmentFragment\n      Course {\n        ...CourseFragment\n      }\n    }\n  }\n": types.MyEnrollmentsForCourseQueryDocument,
    "\n  query CourseGroupOptions {\n    CourseGroupOption(order_by: { order: asc }) {\n      id\n      order\n      title\n    }\n  }\n": types.CourseGroupOptionsDocument,
    "\n  mutation UpdateCourseGroupOptionOrder($id: Int!, $order: Int!) {\n    update_CourseGroupOption_by_pk(pk_columns: { id: $id }, _set: { order: $order }) {\n      id\n      order\n      __typename\n    }\n  }\n": types.UpdateCourseGroupOptionOrderDocument,
    "\n  query EmplomentByValue {\n    Employment(order_by: { value: asc }) {\n      value\n      comment\n    }\n  }\n": types.EmplomentByValueDocument,
    "\n  query ExpertList($where: Expert_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    Expert(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      id\n      userId\n      User {\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": types.ExpertListDocument,
    "\n  query MailTemplates {\n    MailTemplate {\n      id\n      subject\n      content\n      from\n      cc\n      bcc\n      title\n    }\n  }\n": types.MailTemplatesDocument,
    "\n  mutation InsertMailLog(\n    $subject: String!\n    $content: String!\n    $from: String!\n    $cc: String\n    $bcc: String\n    $to: String!\n    $status: String!\n  ) {\n    insert_MailLog(\n      objects: { subject: $subject, content: $content, from: $from, cc: $cc, bcc: $bcc, to: $to, status: $status }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertMailLogDocument,
    "\n  query MultiProgramEnrollments($programIds: [Int!]) {\n    Program(where: { id: { _in: $programIds } }) {\n      id\n      title\n      shortTitle\n      Courses {\n        id\n        title\n        CourseEnrollments {\n          id\n          status\n          attendanceCertificateURL\n          achievementCertificateURL\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n": types.MultiProgramEnrollmentsDocument,
    "\n  query ProgramList {\n    Program {\n      ...AdminProgramFragment\n      Courses {\n        id\n      }\n    }\n  }\n": types.ProgramListDocument,
    "\n  query Programs {\n    Program(order_by: { id: desc }) {\n      ...ProgramFragmentMinimumProperties\n    }\n  }\n": types.ProgramsDocument,
    "\n  query UnversityByComment {\n    University(order_by: { comment: asc }) {\n      value\n      comment\n    }\n  }\n": types.UnversityByCommentDocument,
    "\n  query UserList {\n    User(where: { status: { _eq: ACTIVE } }) {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n": types.UserListDocument,
    "\n  query User($userId: uuid!) {\n    User_by_pk(id: $userId) {\n      id\n      firstName\n      lastName\n      matriculationNumber\n      otherUniversity\n      university\n      picture\n      externalProfile\n      employment\n      email\n    }\n  }\n": types.UserDocument,
    "\n  mutation InsertExpert($userId: uuid!) {\n    insert_Expert(objects: { userId: $userId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n": types.InsertExpertDocument,
    "\n  query UserForSelection1($searchValue: String!) {\n    User(\n      order_by: { lastName: asc }\n      where: {\n        _and: [\n          { status: { _eq: ACTIVE } }\n          {\n            _or: [\n              { firstName: { _ilike: $searchValue } }\n              { lastName: { _ilike: $searchValue } }\n              { email: { _ilike: $searchValue } }\n            ]\n          }\n        ]\n      }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n": types.UserForSelection1Document,
    "\n  query UserForSelection2($searchValue1: String!, $searchValue2: String!) {\n    User(\n      order_by: { lastName: asc }\n      where: {\n        _and: [\n          { status: { _eq: ACTIVE } }\n          { _or: [{ firstName: { _ilike: $searchValue1 }, lastName: { _ilike: $searchValue2 } }] }\n        ]\n      }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n": types.UserForSelection2Document,
    "\n  query UsersByLastName($limit: Int = 10, $offset: Int = 0, $filter: User_bool_exp = {}) {\n    User(\n      limit: $limit\n      offset: $offset\n      order_by: { lastName: asc }\n      where: { _and: [{ status: { _eq: ACTIVE } }, $filter] }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      matriculationNumber\n      university\n      employment\n      CourseEnrollments {\n        id\n        courseId\n        userId\n        status\n        updated_at\n        Course {\n          id\n          title\n          Program {\n            id\n            title\n            shortTitle\n          }\n        }\n      }\n    }\n    User_aggregate(where: $filter) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.UsersByLastNameDocument,
    "\n  query UsersWithExpertId(\n    $userOrderBy: User_order_by = { lastName: asc }\n    $limit: Int = null\n    $offset: Int = 0\n    $where: User_bool_exp = {}\n  ) {\n    User_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    User(\n      order_by: [$userOrderBy]\n      where: { _and: [{ status: { _eq: ACTIVE } }, $where] }\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n": types.UsersWithExpertIdDocument,
    "\n  mutation DeleteUser($id: uuid!) {\n    anonymizeUser(userId: $id) {\n      anonymizedUserId\n      messageKey\n      error\n      steps {\n        keycloak_deletion\n        user_data_anonymization\n        motivation_letter_anonymization\n        profile_picture_removal\n        certificate_anonymization\n      }\n    }\n  }\n": types.DeleteUserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AchievementRecordAuthorFragment on AchievementRecordAuthor {\n    id\n    created_at\n    User {\n      ...UserFragment\n    }\n  }\n"): (typeof documents)["\n  fragment AchievementRecordAuthorFragment on AchievementRecordAuthor {\n    id\n    created_at\n    User {\n      ...UserFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AchievementOptionFragment on AchievementOption {\n    id\n    title\n    description\n    recordType\n    evaluationScriptUrl\n    csvTemplateUrl\n    showScoreAuthors\n    achievementDocumentationTemplateId\n    AchievementOptionTemplate {\n      title\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment AchievementOptionFragment on AchievementOption {\n    id\n    title\n    description\n    recordType\n    evaluationScriptUrl\n    csvTemplateUrl\n    showScoreAuthors\n    achievementDocumentationTemplateId\n    AchievementOptionTemplate {\n      title\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AchievementRecordFragment on AchievementRecord {\n    id\n    created_at\n    csvResults\n    description\n    achievementOptionId\n    uploadUserId\n    coverImageUrl\n    score\n    rating\n    documentationUrl\n    AchievementOption {\n      id\n      title\n      recordType\n    }\n  }\n"): (typeof documents)["\n  fragment AchievementRecordFragment on AchievementRecord {\n    id\n    created_at\n    csvResults\n    description\n    achievementOptionId\n    uploadUserId\n    coverImageUrl\n    score\n    rating\n    documentationUrl\n    AchievementOption {\n      id\n      title\n      recordType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseEnrollmentFragment on CourseEnrollment {\n    id\n    courseId\n    userId\n    invitationExpirationDate\n    motivationLetter\n    status\n    achievementCertificateURL\n    attendanceCertificateURL\n  }\n"): (typeof documents)["\n  fragment CourseEnrollmentFragment on CourseEnrollment {\n    id\n    courseId\n    userId\n    invitationExpirationDate\n    motivationLetter\n    status\n    achievementCertificateURL\n    attendanceCertificateURL\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseTileFragment on Course {\n    id\n    title\n    tagline\n    coverImage\n    language\n    weekDay\n    startTime\n    endTime\n    Program {\n      published\n      title\n    }\n    CourseLocations {\n      locationOption\n    }\n  }\n"): (typeof documents)["\n  fragment CourseTileFragment on Course {\n    id\n    title\n    tagline\n    coverImage\n    language\n    weekDay\n    startTime\n    endTime\n    Program {\n      published\n      title\n    }\n    CourseLocations {\n      locationOption\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseTileFragmentAnonymous on Course {\n    id\n    weekDay\n    published\n    coverImage\n    language\n    title\n    startTime\n    endTime\n    CourseGroups {\n      id\n      CourseGroupOption {\n        id\n        title\n        order\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseTileFragmentAnonymous on Course {\n    id\n    weekDay\n    published\n    coverImage\n    language\n    title\n    startTime\n    endTime\n    CourseGroups {\n      id\n      CourseGroupOption {\n        id\n        title\n        order\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseFragment on Course {\n    id\n    ects\n    tagline\n    weekDay\n    cost\n    published\n    applicationEnd\n    coverImage\n    language\n    maxMissedSessions\n    chatLink\n    title\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    programId\n    maxParticipants\n    learningGoals\n    headingDescriptionField1\n    contentDescriptionField1\n    headingDescriptionField2\n    contentDescriptionField2\n    externalRegistrationLink\n    startTime\n    endTime\n    Sessions(order_by: { startDateTime: asc }) {\n      ...SessionFragment\n    }\n    CourseInstructors(order_by: { id: desc }) {\n      ...CourseInstructorFragment\n    }\n    CourseLocations {\n      id\n      defaultSessionAddress\n      locationOption\n    }\n    Program {\n      ...ProgramFragmentMinimumProperties\n    }\n    CourseGroups {\n      id\n      CourseGroupOption {\n        id\n        title\n        order\n      }\n    }\n    DegreeCourses {\n      id\n      courseId\n      Course {\n        id\n        title\n        published\n        ects\n        Program {\n          id\n          published\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseFragment on Course {\n    id\n    ects\n    tagline\n    weekDay\n    cost\n    published\n    applicationEnd\n    coverImage\n    language\n    maxMissedSessions\n    chatLink\n    title\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    programId\n    maxParticipants\n    learningGoals\n    headingDescriptionField1\n    contentDescriptionField1\n    headingDescriptionField2\n    contentDescriptionField2\n    externalRegistrationLink\n    startTime\n    endTime\n    Sessions(order_by: { startDateTime: asc }) {\n      ...SessionFragment\n    }\n    CourseInstructors(order_by: { id: desc }) {\n      ...CourseInstructorFragment\n    }\n    CourseLocations {\n      id\n      defaultSessionAddress\n      locationOption\n    }\n    Program {\n      ...ProgramFragmentMinimumProperties\n    }\n    CourseGroups {\n      id\n      CourseGroupOption {\n        id\n        title\n        order\n      }\n    }\n    DegreeCourses {\n      id\n      courseId\n      Course {\n        id\n        title\n        published\n        ects\n        Program {\n          id\n          published\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminCourseFragment on Course {\n    ...CourseFragment\n    learningGoals\n    status\n    published\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    chatLink\n    Program {\n      ...ProgramFragmentMinimumProperties\n    }\n  }\n"): (typeof documents)["\n  fragment AdminCourseFragment on Course {\n    ...CourseFragment\n    learningGoals\n    status\n    published\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    chatLink\n    Program {\n      ...ProgramFragmentMinimumProperties\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseFragmentMinimum on Course {\n    id\n    title\n    status\n    ects\n    tagline\n    language\n    applicationEnd\n    cost\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    maxMissedSessions\n    weekDay\n    coverImage\n    programId\n    learningGoals\n    chatLink\n    published\n    maxParticipants\n    endTime\n    startTime\n  }\n"): (typeof documents)["\n  fragment CourseFragmentMinimum on Course {\n    id\n    title\n    status\n    ects\n    tagline\n    language\n    applicationEnd\n    cost\n    achievementCertificatePossible\n    attendanceCertificatePossible\n    maxMissedSessions\n    weekDay\n    coverImage\n    programId\n    learningGoals\n    chatLink\n    published\n    maxParticipants\n    endTime\n    startTime\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseInstructorFragment on CourseInstructor {\n    id\n    Expert {\n      id\n      User {\n        firstName\n        picture\n        id\n        lastName\n        university\n        otherUniversity\n        externalProfile\n      }\n      description\n    }\n  }\n"): (typeof documents)["\n  fragment CourseInstructorFragment on CourseInstructor {\n    id\n    Expert {\n      id\n      User {\n        firstName\n        picture\n        id\n        lastName\n        university\n        otherUniversity\n        externalProfile\n      }\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EnrollmentFragment on CourseEnrollment {\n    userId\n    courseId\n    invitationExpirationDate\n    id\n    status\n    achievementCertificateURL\n    attendanceCertificateURL\n  }\n"): (typeof documents)["\n  fragment EnrollmentFragment on CourseEnrollment {\n    userId\n    courseId\n    invitationExpirationDate\n    id\n    status\n    achievementCertificateURL\n    attendanceCertificateURL\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminEnrollmentFragment on CourseEnrollment {\n    ...EnrollmentFragment\n    motivationLetter\n    motivationRating\n  }\n"): (typeof documents)["\n  fragment AdminEnrollmentFragment on CourseEnrollment {\n    ...EnrollmentFragment\n    motivationLetter\n    motivationRating\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProgramFragmentMinimumProperties on Program {\n    id\n    title\n    shortTitle\n    lectureStart\n    lectureEnd\n    defaultApplicationEnd\n    achievementRecordUploadDeadline\n    published\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n"): (typeof documents)["\n  fragment ProgramFragmentMinimumProperties on Program {\n    id\n    title\n    shortTitle\n    lectureStart\n    lectureEnd\n    defaultApplicationEnd\n    achievementRecordUploadDeadline\n    published\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProgramFragment on Program {\n    ...ProgramFragmentMinimumProperties\n    defaultApplicationEnd\n    applicationStart\n    id\n    lectureEnd\n    lectureStart\n    title\n    shortTitle\n    achievementRecordUploadDeadline\n    published\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n"): (typeof documents)["\n  fragment ProgramFragment on Program {\n    ...ProgramFragmentMinimumProperties\n    defaultApplicationEnd\n    applicationStart\n    id\n    lectureEnd\n    lectureStart\n    title\n    shortTitle\n    achievementRecordUploadDeadline\n    published\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminProgramFragment on Program {\n    ...ProgramFragmentMinimumProperties\n    applicationStart\n    closingQuestionnaire\n    defaultApplicationEnd\n    defaultMaxMissedSessions\n    speakerQuestionnaire\n    startQuestionnaire\n    attendanceCertificateTemplateURL\n    achievementCertificateTemplateURL\n    visibility\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n"): (typeof documents)["\n  fragment AdminProgramFragment on Program {\n    ...ProgramFragmentMinimumProperties\n    applicationStart\n    closingQuestionnaire\n    defaultApplicationEnd\n    defaultMaxMissedSessions\n    speakerQuestionnaire\n    startQuestionnaire\n    attendanceCertificateTemplateURL\n    achievementCertificateTemplateURL\n    visibility\n    visibilityAchievementCertificate\n    visibilityAttendanceCertificate\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SessionFragment on Session {\n    id\n    endDateTime\n    courseId\n    description\n    startDateTime\n    title\n    SessionAddresses {\n      id\n      address\n      CourseLocation {\n        id\n        locationOption\n        defaultSessionAddress\n      }\n    }\n    SessionSpeakers {\n      Expert {\n        User {\n          id\n          firstName\n          lastName\n          picture\n          externalProfile\n          university\n          otherUniversity\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment SessionFragment on Session {\n    id\n    endDateTime\n    courseId\n    description\n    startDateTime\n    title\n    SessionAddresses {\n      id\n      address\n      CourseLocation {\n        id\n        locationOption\n        defaultSessionAddress\n      }\n    }\n    SessionSpeakers {\n      Expert {\n        User {\n          id\n          firstName\n          lastName\n          picture\n          externalProfile\n          university\n          otherUniversity\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminSessionFragment on Session {\n    ...SessionFragment\n    SessionSpeakers {\n      id\n      Expert {\n        id\n        User {\n          ...UserFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminSessionFragment on Session {\n    ...SessionFragment\n    SessionSpeakers {\n      id\n      Expert {\n        id\n        User {\n          ...UserFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserFragment on User {\n    id\n    firstName\n    lastName\n    email\n    picture\n    externalProfile\n    university\n    otherUniversity\n  }\n"): (typeof documents)["\n  fragment UserFragment on User {\n    id\n    firstName\n    lastName\n    email\n    picture\n    externalProfile\n    university\n    otherUniversity\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertCourseGroup($itemId: Int!, $tagId: Int!) {\n    insert_CourseGroup(objects: { courseId: $itemId, groupOptionId: $tagId }) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation InsertCourseGroup($itemId: Int!, $tagId: Int!) {\n    insert_CourseGroup(objects: { courseId: $itemId, groupOptionId: $tagId }) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCourseGroup($itemId: Int!, $tagId: Int!) {\n    delete_CourseGroup(\n      where: { Course: { id: { _eq: $itemId } }, _and: { CourseGroupOption: { id: { _eq: $tagId } } } }\n    ) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCourseGroup($itemId: Int!, $tagId: Int!) {\n    delete_CourseGroup(\n      where: { Course: { id: { _eq: $itemId } }, _and: { CourseGroupOption: { id: { _eq: $tagId } } } }\n    ) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEnrollment(\n    $userId: uuid!\n    $courseId: Int!\n    $motivationLetter: String!\n    $status: CourseEnrollmentStatus_enum!\n  ) {\n    insert_CourseEnrollment(\n      objects: { userId: $userId, courseId: $courseId, motivationLetter: $motivationLetter, status: $status }\n      on_conflict: { constraint: uniqueUserCourse, update_columns: [status] }\n    ) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEnrollment(\n    $userId: uuid!\n    $courseId: Int!\n    $motivationLetter: String!\n    $status: CourseEnrollmentStatus_enum!\n  ) {\n    insert_CourseEnrollment(\n      objects: { userId: $userId, courseId: $courseId, motivationLetter: $motivationLetter, status: $status }\n      on_conflict: { constraint: uniqueUserCourse, update_columns: [status] }\n    ) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertEnrollment($userId: uuid!, $courseId: Int!, $motivationLetter: String!) {\n    insert_CourseEnrollment(objects: { userId: $userId, courseId: $courseId, motivationLetter: $motivationLetter }) {\n      affected_rows\n      returning {\n        ...EnrollmentFragment\n        Course {\n          ...CourseFragment\n          CourseEnrollments {\n            ...EnrollmentFragment\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertEnrollment($userId: uuid!, $courseId: Int!, $motivationLetter: String!) {\n    insert_CourseEnrollment(objects: { userId: $userId, courseId: $courseId, motivationLetter: $motivationLetter }) {\n      affected_rows\n      returning {\n        ...EnrollmentFragment\n        Course {\n          ...CourseFragment\n          CourseEnrollments {\n            ...EnrollmentFragment\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEnrollmentRating($enrollmentId: Int!, $rating: MotivationRating_enum!) {\n    update_CourseEnrollment_by_pk(pk_columns: { id: $enrollmentId }, _set: { motivationRating: $rating }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEnrollmentRating($enrollmentId: Int!, $rating: MotivationRating_enum!) {\n    update_CourseEnrollment_by_pk(pk_columns: { id: $enrollmentId }, _set: { motivationRating: $rating }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEnrollmentForInvite($enrollmentId: Int!, $expire: date!) {\n    update_CourseEnrollment_by_pk(\n      pk_columns: { id: $enrollmentId }\n      _set: { invitationExpirationDate: $expire, status: INVITED }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEnrollmentForInvite($enrollmentId: Int!, $expire: date!) {\n    update_CourseEnrollment_by_pk(\n      pk_columns: { id: $enrollmentId }\n      _set: { invitationExpirationDate: $expire, status: INVITED }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEnrollmentStatus($enrollmentId: Int!, $status: CourseEnrollmentStatus_enum!, $expire: date) {\n    update_CourseEnrollment_by_pk(\n      pk_columns: { id: $enrollmentId }\n      _set: { status: $status, invitationExpirationDate: $expire }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEnrollmentStatus($enrollmentId: Int!, $status: CourseEnrollmentStatus_enum!, $expire: date) {\n    update_CourseEnrollment_by_pk(\n      pk_columns: { id: $enrollmentId }\n      _set: { status: $status, invitationExpirationDate: $expire }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertUser($userId: uuid!, $firstName: String!, $lastName: String!, $email: String!) {\n    insert_User(objects: { id: $userId, lastName: $lastName, firstName: $firstName, email: $email }) {\n      affected_rows\n      returning {\n        id\n        picture\n        email\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertUser($userId: uuid!, $firstName: String!, $lastName: String!, $email: String!) {\n    insert_User(objects: { id: $userId, lastName: $lastName, firstName: $firstName, email: $email }) {\n      affected_rows\n      returning {\n        id\n        picture\n        email\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertSingleUser($user: User_insert_input!) {\n    insert_User_one(object: $user) {\n      id\n      picture\n      email\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation InsertSingleUser($user: User_insert_input!) {\n    insert_User_one(object: $user) {\n      id\n      picture\n      email\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertAnAchievementOption($data: AchievementOption_insert_input!) {\n    insert_AchievementOption_one(object: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertAnAchievementOption($data: AchievementOption_insert_input!) {\n    insert_AchievementOption_one(object: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAnAchievementOption($id: Int!, $changes: AchievementOption_set_input) {\n    update_AchievementOption_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAnAchievementOption($id: Int!, $changes: AchievementOption_set_input) {\n    update_AchievementOption_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAnAchievementOption($id: Int!) {\n    delete_AchievementOption_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAnAchievementOption($id: Int!) {\n    delete_AchievementOption_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertAnAchievementOptionCourse($data: AchievementOptionCourse_insert_input!) {\n    insert_AchievementOptionCourse_one(object: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertAnAchievementOptionCourse($data: AchievementOptionCourse_insert_input!) {\n    insert_AchievementOptionCourse_one(object: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAnAchievementOptionCourse($id: Int!, $changes: AchievementOptionCourse_set_input) {\n    update_AchievementOptionCourse_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAnAchievementOptionCourse($id: Int!, $changes: AchievementOptionCourse_set_input) {\n    update_AchievementOptionCourse_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAnAchievementOptionCourse($id: Int!) {\n    delete_AchievementOptionCourse_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAnAchievementOptionCourse($id: Int!) {\n    delete_AchievementOptionCourse_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAnAchievementOptionCourseWithWhere($where: AchievementOptionCourse_bool_exp! = {}) {\n    delete_AchievementOptionCourse(where: $where) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAnAchievementOptionCourseWithWhere($where: AchievementOptionCourse_bool_exp! = {}) {\n    delete_AchievementOptionCourse(where: $where) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertAnAchievementOptionMentor($data: AchievementOptionMentor_insert_input!) {\n    insert_AchievementOptionMentor_one(object: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertAnAchievementOptionMentor($data: AchievementOptionMentor_insert_input!) {\n    insert_AchievementOptionMentor_one(object: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAnAchievementOptionMentor($id: Int!, $changes: AchievementOptionMentor_set_input) {\n    update_AchievementOptionMentor_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAnAchievementOptionMentor($id: Int!, $changes: AchievementOptionMentor_set_input) {\n    update_AchievementOptionMentor_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAnAchievementOptionMentor($id: Int!) {\n    delete_AchievementOptionMentor_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAnAchievementOptionMentor($id: Int!) {\n    delete_AchievementOptionMentor_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAnAchievementOptionMentorWithWhere($where: AchievementOptionMentor_bool_exp! = {}) {\n    delete_AchievementOptionMentor(where: $where) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAnAchievementOptionMentorWithWhere($where: AchievementOptionMentor_bool_exp! = {}) {\n    delete_AchievementOptionMentor(where: $where) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertCourseWithLocation(\n    $title: String!\n    $applicationEnd: date!\n    $maxMissedSessions: Int!\n    $programId: Int!\n    $locationOption: LocationOption_enum!\n  ) {\n    insert_Course(\n      objects: {\n        title: $title\n        tagline: \"\"\n        language: \"DE\"\n        applicationEnd: $applicationEnd\n        maxMissedSessions: $maxMissedSessions\n        programId: $programId\n        CourseLocations: { data: { locationOption: $locationOption, defaultSessionAddress: \"\" } }\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n        CourseLocations {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertCourseWithLocation(\n    $title: String!\n    $applicationEnd: date!\n    $maxMissedSessions: Int!\n    $programId: Int!\n    $locationOption: LocationOption_enum!\n  ) {\n    insert_Course(\n      objects: {\n        title: $title\n        tagline: \"\"\n        language: \"DE\"\n        applicationEnd: $applicationEnd\n        maxMissedSessions: $maxMissedSessions\n        programId: $programId\n        CourseLocations: { data: { locationOption: $locationOption, defaultSessionAddress: \"\" } }\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n        CourseLocations {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertSingleCourse($course: Course_insert_input!) {\n    insert_Course_one(object: $course) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertSingleCourse($course: Course_insert_input!) {\n    insert_Course_one(object: $course) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCourseByPk($id: Int!) {\n    delete_Course_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCourseByPk($id: Int!) {\n    delete_Course_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseByPk($id: Int!, $changes: Course_set_input) {\n    update_Course_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseByPk($id: Int!, $changes: Course_set_input) {\n    update_Course_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertCourseInstructor($courseId: Int!, $expertId: Int!) {\n    insert_CourseInstructor(objects: { courseId: $courseId, expertId: $expertId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertCourseInstructor($courseId: Int!, $expertId: Int!) {\n    insert_CourseInstructor(objects: { courseId: $courseId, expertId: $expertId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCourseInstructor($courseId: Int!, $expertId: Int!) {\n    delete_CourseInstructor(where: { _and: [{ courseId: { _eq: $courseId } }, { expertId: { _eq: $expertId } }] }) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCourseInstructor($courseId: Int!, $expertId: Int!) {\n    delete_CourseInstructor(where: { _and: [{ courseId: { _eq: $courseId } }, { expertId: { _eq: $expertId } }] }) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertProgram($title: String!, $today: date!) {\n    insert_Program(\n      objects: {\n        lectureStart: $today\n        lectureEnd: $today\n        applicationStart: $today\n        defaultApplicationEnd: $today\n        achievementRecordUploadDeadline: $today\n        title: $title\n        visibility: false\n        visibilityAttendanceCertificate: false\n        visibilityAchievementCertificate: false\n        defaultMaxMissedSessions: 2\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertProgram($title: String!, $today: date!) {\n    insert_Program(\n      objects: {\n        lectureStart: $today\n        lectureEnd: $today\n        applicationStart: $today\n        defaultApplicationEnd: $today\n        achievementRecordUploadDeadline: $today\n        title: $title\n        visibility: false\n        visibilityAttendanceCertificate: false\n        visibilityAchievementCertificate: false\n        defaultMaxMissedSessions: 2\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteProgram($programId: Int!) {\n    delete_Program_by_pk(id: $programId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteProgram($programId: Int!) {\n    delete_Program_by_pk(id: $programId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramVisibility($programId: Int!, $visible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibility: $visible }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramVisibility($programId: Int!, $visible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibility: $visible }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramPublished($programId: Int!, $published: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { published: $published }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramPublished($programId: Int!, $published: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { published: $published }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramTitle($programId: Int!, $title: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { title: $title }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramTitle($programId: Int!, $title: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { title: $title }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramShortTitle($programId: Int!, $shortTitle: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { shortTitle: $shortTitle }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramShortTitle($programId: Int!, $shortTitle: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { shortTitle: $shortTitle }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramParticipationTemplate($programId: Int!, $templatePath: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { attendanceCertificateTemplateURL: $templatePath }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramParticipationTemplate($programId: Int!, $templatePath: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { attendanceCertificateTemplateURL: $templatePath }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramAchievementTemplate($programId: Int!, $templatePath: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { achievementCertificateTemplateURL: $templatePath }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramAchievementTemplate($programId: Int!, $templatePath: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { achievementCertificateTemplateURL: $templatePath }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramApplicationStart($programId: Int!, $applicationStart: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { applicationStart: $applicationStart }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramApplicationStart($programId: Int!, $applicationStart: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { applicationStart: $applicationStart }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramApplicationEnd($programId: Int!, $applicationEnd: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { defaultApplicationEnd: $applicationEnd }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramApplicationEnd($programId: Int!, $applicationEnd: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { defaultApplicationEnd: $applicationEnd }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramLectureStart($programId: Int!, $lectureStart: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { lectureStart: $lectureStart }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramLectureStart($programId: Int!, $lectureStart: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { lectureStart: $lectureStart }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramLectureEnd($programId: Int!, $lectureEnd: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { lectureEnd: $lectureEnd }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramLectureEnd($programId: Int!, $lectureEnd: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { lectureEnd: $lectureEnd }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramUploadDeadline($programId: Int!, $deadline: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { achievementRecordUploadDeadline: $deadline }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramUploadDeadline($programId: Int!, $deadline: date!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { achievementRecordUploadDeadline: $deadline }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramStartQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { startQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramStartQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { startQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramSpeakerQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { speakerQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramSpeakerQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { speakerQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramClosingQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { closingQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramClosingQuestionaire($programId: Int!, $questionaire: String!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { closingQuestionnaire: $questionaire }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramAchievementCertVisible($programId: Int!, $isVisible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibilityAchievementCertificate: $isVisible }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramAchievementCertVisible($programId: Int!, $isVisible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibilityAchievementCertificate: $isVisible }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProgramParticipationCertVisible($programId: Int!, $isVisible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibilityAttendanceCertificate: $isVisible }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProgramParticipationCertVisible($programId: Int!, $isVisible: Boolean!) {\n    update_Program_by_pk(pk_columns: { id: $programId }, _set: { visibilityAttendanceCertificate: $isVisible }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser(\n    $userId: uuid!\n    $firstName: String\n    $lastName: String\n    $email: String\n    $matriculationNumber: String\n    $university: University_enum\n    $externalProfile: String\n    $employment: Employment_enum\n    $picture: String\n  ) {\n    update_User_by_pk(\n      pk_columns: { id: $userId }\n      _set: {\n        firstName: $firstName\n        matriculationNumber: $matriculationNumber\n        lastName: $lastName\n        employment: $employment\n        email: $email\n        externalProfile: $externalProfile\n        university: $university\n        picture: $picture\n      }\n    ) {\n      id\n      firstName\n      matriculationNumber\n      lastName\n      employment\n      email\n      externalProfile\n      university\n      picture\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser(\n    $userId: uuid!\n    $firstName: String\n    $lastName: String\n    $email: String\n    $matriculationNumber: String\n    $university: University_enum\n    $externalProfile: String\n    $employment: Employment_enum\n    $picture: String\n  ) {\n    update_User_by_pk(\n      pk_columns: { id: $userId }\n      _set: {\n        firstName: $firstName\n        matriculationNumber: $matriculationNumber\n        lastName: $lastName\n        employment: $employment\n        email: $email\n        externalProfile: $externalProfile\n        university: $university\n        picture: $picture\n      }\n    ) {\n      id\n      firstName\n      matriculationNumber\n      lastName\n      employment\n      email\n      externalProfile\n      university\n      picture\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserOnEnrollmentConfirmation(\n    $userId: uuid!\n    $matriculationNumber: String\n    $otherUniversity: String\n    $university: University_enum\n    $employment: Employment_enum\n  ) {\n    update_User_by_pk(\n      pk_columns: { id: $userId }\n      _set: {\n        matriculationNumber: $matriculationNumber\n        otherUniversity: $otherUniversity\n        employment: $employment\n        university: $university\n      }\n    ) {\n      id\n      matriculationNumber\n      employment\n      otherUniversity\n      university\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserOnEnrollmentConfirmation(\n    $userId: uuid!\n    $matriculationNumber: String\n    $otherUniversity: String\n    $university: University_enum\n    $employment: Employment_enum\n  ) {\n    update_User_by_pk(\n      pk_columns: { id: $userId }\n      _set: {\n        matriculationNumber: $matriculationNumber\n        otherUniversity: $otherUniversity\n        employment: $employment\n        university: $university\n      }\n    ) {\n      id\n      matriculationNumber\n      employment\n      otherUniversity\n      university\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserProfilePicture($userId: uuid!, $picture: String) {\n    update_User_by_pk(pk_columns: { id: $userId }, _set: { picture: $picture }) {\n      id\n      picture\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserProfilePicture($userId: uuid!, $picture: String) {\n    update_User_by_pk(pk_columns: { id: $userId }, _set: { picture: $picture }) {\n      id\n      picture\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AchievementDocumentationTemplates {\n    AchievementDocumentationTemplate(order_by: { updated_at: desc }) {\n      id\n      title\n      url\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  query AchievementDocumentationTemplates {\n    AchievementDocumentationTemplate(order_by: { updated_at: desc }) {\n      id\n      title\n      url\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertAchievementDocumentationTemplate($insertInput: AchievementDocumentationTemplate_insert_input!) {\n    insert_AchievementDocumentationTemplate_one(object: $insertInput) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertAchievementDocumentationTemplate($insertInput: AchievementDocumentationTemplate_insert_input!) {\n    insert_AchievementDocumentationTemplate_one(object: $insertInput) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAchievementDocumentationTemplate($itemId: Int!, $text: String, $url: String) {\n    update_AchievementDocumentationTemplate_by_pk(pk_columns: { id: $itemId }, _set: { title: $text, url: $url }) {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAchievementDocumentationTemplate($itemId: Int!, $text: String, $url: String) {\n    update_AchievementDocumentationTemplate_by_pk(pk_columns: { id: $itemId }, _set: { title: $text, url: $url }) {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAchievementDocumentationTemplateTitle($itemId: Int!, $text: String) {\n    update_AchievementDocumentationTemplate_by_pk(pk_columns: { id: $itemId }, _set: { title: $text }) {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAchievementDocumentationTemplateTitle($itemId: Int!, $text: String) {\n    update_AchievementDocumentationTemplate_by_pk(pk_columns: { id: $itemId }, _set: { title: $text }) {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAchievementDocumentationTemplate($id: Int!) {\n    delete_AchievementDocumentationTemplate_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAchievementDocumentationTemplate($id: Int!) {\n    delete_AchievementDocumentationTemplate_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AchievementRecordTypes {\n    AchievementRecordType {\n      value\n    }\n  }\n"): (typeof documents)["\n  query AchievementRecordTypes {\n    AchievementRecordType {\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AchievementOptionList(\n    $where: AchievementOption_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementOption_order_by = { id: desc }\n  ) {\n    AchievementOption(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      ...AchievementOptionFragment\n      AchievementOptionCourses {\n        id\n        courseId\n        Course {\n          title\n          Program {\n            ...ProgramFragmentMinimumProperties\n          }\n        }\n      }\n      AchievementOptionMentors {\n        id\n        User {\n          ...UserFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AchievementOptionList(\n    $where: AchievementOption_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementOption_order_by = { id: desc }\n  ) {\n    AchievementOption(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      ...AchievementOptionFragment\n      AchievementOptionCourses {\n        id\n        courseId\n        Course {\n          title\n          Program {\n            ...ProgramFragmentMinimumProperties\n          }\n        }\n      }\n      AchievementOptionMentors {\n        id\n        User {\n          ...UserFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AchievementOptionCourses(\n    $where: AchievementOptionCourse_bool_exp = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderByAchievementOptionCourse: AchievementOptionCourse_order_by = { id: desc }\n  ) {\n    AchievementOptionCourse(\n      order_by: [$orderByAchievementOptionCourse]\n      where: $where\n      limit: $limit\n      offset: $offset\n    ) {\n      AchievementOption {\n        ...AchievementOptionFragment\n      }\n      id\n      courseId\n      achievementOptionId\n      created_at\n    }\n  }\n"): (typeof documents)["\n  query AchievementOptionCourses(\n    $where: AchievementOptionCourse_bool_exp = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderByAchievementOptionCourse: AchievementOptionCourse_order_by = { id: desc }\n  ) {\n    AchievementOptionCourse(\n      order_by: [$orderByAchievementOptionCourse]\n      where: $where\n      limit: $limit\n      offset: $offset\n    ) {\n      AchievementOption {\n        ...AchievementOptionFragment\n      }\n      id\n      courseId\n      achievementOptionId\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AchievementRecordAuthorQuery(\n    $where: AchievementRecordAuthor_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementRecordAuthor_order_by = { id: desc }\n  ) {\n    AchievementRecordAuthor(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      id\n      created_at\n      User {\n        ...UserFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query AchievementRecordAuthorQuery(\n    $where: AchievementRecordAuthor_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementRecordAuthor_order_by = { id: desc }\n  ) {\n    AchievementRecordAuthor(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      id\n      created_at\n      User {\n        ...UserFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertAnAchievementRecord($insertInput: AchievementRecord_insert_input!) {\n    insert_AchievementRecord_one(object: $insertInput) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertAnAchievementRecord($insertInput: AchievementRecord_insert_input!) {\n    insert_AchievementRecord_one(object: $insertInput) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAchievementRecordByPk($id: Int!, $setInput: AchievementRecord_set_input!) {\n    update_AchievementRecord_by_pk(pk_columns: { id: $id }, _set: $setInput) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAchievementRecordByPk($id: Int!, $setInput: AchievementRecord_set_input!) {\n    update_AchievementRecord_by_pk(pk_columns: { id: $id }, _set: $setInput) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertAnAchievementRecordAuthor($insertInput: AchievementRecordAuthor_insert_input!) {\n    insert_AchievementRecordAuthor_one(object: $insertInput) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertAnAchievementRecordAuthor($insertInput: AchievementRecordAuthor_insert_input!) {\n    insert_AchievementRecordAuthor_one(object: $insertInput) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAchievementRecordAuthorByPk($id: Int!) {\n    delete_AchievementRecordAuthor_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAchievementRecordAuthorByPk($id: Int!) {\n    delete_AchievementRecordAuthor_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AchievementRecordListWithAuthors(\n    $where: AchievementRecord_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementRecord_order_by = { id: desc }\n  ) {\n    AchievementRecord(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      ...AchievementRecordFragment\n      AchievementRecordAuthors {\n        ...AchievementRecordAuthorFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query AchievementRecordListWithAuthors(\n    $where: AchievementRecord_bool_exp! = {}\n    $limit: Int = null\n    $offset: Int = 0\n    $orderBy: AchievementRecord_order_by = { id: desc }\n  ) {\n    AchievementRecord(order_by: [$orderBy], where: $where, limit: $limit, offset: $offset) {\n      ...AchievementRecordFragment\n      AchievementRecordAuthors {\n        ...AchievementRecordAuthorFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query loadParticipationData($programId: Int!) {\n    loadParticipationData(programId: $programId) {\n      link\n    }\n  }\n"): (typeof documents)["\n  query loadParticipationData($programId: Int!) {\n    loadParticipationData(programId: $programId) {\n      link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveAttendanceCertificateTemplate($base64File: String!, $fileName: String!, $programId: Int!) {\n    saveAttendanceCertificateTemplate(base64file: $base64File, filename: $fileName, programid: $programId) {\n      file_path\n      google_link\n    }\n  }\n"): (typeof documents)["\n  mutation SaveAttendanceCertificateTemplate($base64File: String!, $fileName: String!, $programId: Int!) {\n    saveAttendanceCertificateTemplate(base64file: $base64File, filename: $fileName, programid: $programId) {\n      file_path\n      google_link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveAchievementCertificateTemplate($base64File: String!, $fileName: String!, $programId: Int!) {\n    saveAchievementCertificateTemplate(base64file: $base64File, filename: $fileName, programid: $programId) {\n      file_path\n      google_link\n    }\n  }\n"): (typeof documents)["\n  mutation SaveAchievementCertificateTemplate($base64File: String!, $fileName: String!, $programId: Int!) {\n    saveAchievementCertificateTemplate(base64file: $base64File, filename: $fileName, programid: $programId) {\n      file_path\n      google_link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveAchievementRecordCoverImage($base64File: String!, $fileName: String!, $achievementRecordId: Int!) {\n    saveAchievementRecordCoverImage(\n      base64file: $base64File\n      filename: $fileName\n      achievementRecordId: $achievementRecordId\n    ) {\n      file_path\n      google_link\n    }\n  }\n"): (typeof documents)["\n  mutation SaveAchievementRecordCoverImage($base64File: String!, $fileName: String!, $achievementRecordId: Int!) {\n    saveAchievementRecordCoverImage(\n      base64file: $base64File\n      filename: $fileName\n      achievementRecordId: $achievementRecordId\n    ) {\n      file_path\n      google_link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveAchievementRecordDocumentation($base64File: String!, $fileName: String!, $achievementRecordId: Int!) {\n    saveAchievementRecordDocumentation(\n      base64file: $base64File\n      filename: $fileName\n      achievementRecordId: $achievementRecordId\n    ) {\n      file_path\n      google_link\n    }\n  }\n"): (typeof documents)["\n  mutation SaveAchievementRecordDocumentation($base64File: String!, $fileName: String!, $achievementRecordId: Int!) {\n    saveAchievementRecordDocumentation(\n      base64file: $base64File\n      filename: $fileName\n      achievementRecordId: $achievementRecordId\n    ) {\n      file_path\n      google_link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveAchievementDocumentationTemplate(\n    $base64File: String!\n    $fileName: String!\n    $achievementDocumentationTemplateId: Int!\n  ) {\n    saveAchievementDocumentationTemplate(\n      base64file: $base64File\n      filename: $fileName\n      achievementDocumentationTemplateId: $achievementDocumentationTemplateId\n    ) {\n      file_path\n      google_link\n    }\n  }\n"): (typeof documents)["\n  mutation SaveAchievementDocumentationTemplate(\n    $base64File: String!\n    $fileName: String!\n    $achievementDocumentationTemplateId: Int!\n  ) {\n    saveAchievementDocumentationTemplate(\n      base64file: $base64File\n      filename: $fileName\n      achievementDocumentationTemplateId: $achievementDocumentationTemplateId\n    ) {\n      file_path\n      google_link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSignedUrl($path: String!) {\n    getSignedUrl(path: $path) {\n      link\n    }\n  }\n"): (typeof documents)["\n  query GetSignedUrl($path: String!) {\n    getSignedUrl(path: $path) {\n      link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveUserProfileImage($base64File: String!, $fileName: String!, $userId: String!) {\n    saveUserProfileImage(base64file: $base64File, filename: $fileName, userid: $userId) {\n      file_path\n      google_link\n    }\n  }\n"): (typeof documents)["\n  mutation SaveUserProfileImage($base64File: String!, $fileName: String!, $userId: String!) {\n    saveUserProfileImage(base64file: $base64File, filename: $fileName, userid: $userId) {\n      file_path\n      google_link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveCourseImage($base64File: String!, $fileName: String!, $courseId: Int!) {\n    saveCourseImage(base64file: $base64File, filename: $fileName, courseid: $courseId) {\n      file_path\n      google_link\n    }\n  }\n"): (typeof documents)["\n  mutation SaveCourseImage($base64File: String!, $fileName: String!, $courseId: Int!) {\n    saveCourseImage(base64file: $base64File, filename: $fileName, courseid: $courseId) {\n      file_path\n      google_link\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCertificate($userIds: [uuid!]!, $courseId: Int!, $certificateType: String!) {\n    createCertificate(userIds: $userIds, courseId: $courseId, certificateType: $certificateType) {\n      result\n    }\n  }\n"): (typeof documents)["\n  mutation createCertificate($userIds: [uuid!]!, $courseId: Int!, $certificateType: String!) {\n    createCertificate(userIds: $userIds, courseId: $courseId, certificateType: $certificateType) {\n      result\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCertificates($userIds: [uuid!]!, $courseId: Int!, $certificateType: String!) {\n    createCertificate(userIds: $userIds, courseId: $courseId, certificateType: $certificateType) {\n      result\n    }\n  }\n"): (typeof documents)["\n  mutation createCertificates($userIds: [uuid!]!, $courseId: Int!, $certificateType: String!) {\n    createCertificate(userIds: $userIds, courseId: $courseId, certificateType: $certificateType) {\n      result\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AppSettings($appName: String!) {\n    AppSettings(where: { appName: { _eq: $appName } }) {\n      appName\n      backgroundImageURL\n      bannerBackgroundColor\n      bannerFontColor\n      bannerTextDe\n      bannerTextEn\n      previewImageURL\n      timeZone\n    }\n  }\n"): (typeof documents)["\n  query AppSettings($appName: String!) {\n    AppSettings(where: { appName: { _eq: $appName } }) {\n      appName\n      backgroundImageURL\n      bannerBackgroundColor\n      bannerFontColor\n      bannerTextDe\n      bannerTextEn\n      previewImageURL\n      timeZone\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateTimeZone($appName: String!, $value: String!) {\n    update_AppSettings_by_pk(pk_columns: { appName: $appName }, _set: { timeZone: $value }) {\n      appName\n      timeZone\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTimeZone($appName: String!, $value: String!) {\n    update_AppSettings_by_pk(pk_columns: { appName: $appName }, _set: { timeZone: $value }) {\n      appName\n      timeZone\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBanner(\n    $appName: String!\n    $bannerBackgroundColor: String\n    $bannerFontColor: String\n    $bannerTextDe: String\n    $bannerTextEn: String\n  ) {\n    update_AppSettings_by_pk(\n      pk_columns: { appName: $appName }\n      _set: {\n        bannerBackgroundColor: $bannerBackgroundColor\n        bannerFontColor: $bannerFontColor\n        bannerTextDe: $bannerTextDe\n        bannerTextEn: $bannerTextEn\n      }\n    ) {\n      appName\n      backgroundImageURL\n      bannerBackgroundColor\n      bannerFontColor\n      bannerTextEn\n      bannerTextDe\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBanner(\n    $appName: String!\n    $bannerBackgroundColor: String\n    $bannerFontColor: String\n    $bannerTextDe: String\n    $bannerTextEn: String\n  ) {\n    update_AppSettings_by_pk(\n      pk_columns: { appName: $appName }\n      _set: {\n        bannerBackgroundColor: $bannerBackgroundColor\n        bannerFontColor: $bannerFontColor\n        bannerTextDe: $bannerTextDe\n        bannerTextEn: $bannerTextEn\n      }\n    ) {\n      appName\n      backgroundImageURL\n      bannerBackgroundColor\n      bannerFontColor\n      bannerTextEn\n      bannerTextDe\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Course($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragment\n    }\n  }\n"): (typeof documents)["\n  query Course($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseMinimum($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragmentMinimum\n      Program {\n        ...ProgramFragmentMinimumProperties\n      }\n    }\n  }\n"): (typeof documents)["\n  query CourseMinimum($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragmentMinimum\n      Program {\n        ...ProgramFragmentMinimumProperties\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ManagedCourse($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...AdminCourseFragment\n      CourseEnrollments {\n        ...AdminEnrollmentFragment\n        User {\n          ...UserFragment\n          Attendances(where: { Session: { courseId: { _eq: $id } } }) {\n            id\n            status\n            Session {\n              id\n            }\n          }\n          CourseEnrollments {\n            status\n            courseId\n            Course {\n              id\n              title\n              Program {\n                shortTitle\n              }\n            }\n          }\n        }\n      }\n      CourseLocations {\n        id\n        defaultSessionAddress\n        locationOption\n      }\n      Sessions(order_by: { startDateTime: asc }) {\n        ...AdminSessionFragment\n      }\n      AchievementOptionCourses {\n        AchievementOption {\n          AchievementRecords {\n            id\n            courseId\n            documentationUrl\n            rating\n            created_at\n            AchievementRecordAuthors {\n              userId\n            }\n            AchievementOption {\n              title\n            }\n          }\n          recordType\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ManagedCourse($id: Int!) {\n    Course_by_pk(id: $id) {\n      ...AdminCourseFragment\n      CourseEnrollments {\n        ...AdminEnrollmentFragment\n        User {\n          ...UserFragment\n          Attendances(where: { Session: { courseId: { _eq: $id } } }) {\n            id\n            status\n            Session {\n              id\n            }\n          }\n          CourseEnrollments {\n            status\n            courseId\n            Course {\n              id\n              title\n              Program {\n                shortTitle\n              }\n            }\n          }\n        }\n      }\n      CourseLocations {\n        id\n        defaultSessionAddress\n        locationOption\n      }\n      Sessions(order_by: { startDateTime: asc }) {\n        ...AdminSessionFragment\n      }\n      AchievementOptionCourses {\n        AchievementOption {\n          AchievementRecords {\n            id\n            courseId\n            documentationUrl\n            rating\n            created_at\n            AchievementRecordAuthors {\n              userId\n            }\n            AchievementOption {\n              title\n            }\n          }\n          recordType\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertSession($courseId: Int!, $startTime: timestamptz!, $endTime: timestamptz!) {\n    insert_Session(\n      objects: { courseId: $courseId, title: \"\", startDateTime: $startTime, endDateTime: $endTime, description: \"\" }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertSession($courseId: Int!, $startTime: timestamptz!, $endTime: timestamptz!) {\n    insert_Session(\n      objects: { courseId: $courseId, title: \"\", startDateTime: $startTime, endDateTime: $endTime, description: \"\" }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteSession($sessionId: Int!) {\n    delete_Session_by_pk(id: $sessionId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSession($sessionId: Int!) {\n    delete_Session_by_pk(id: $sessionId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSessionTitle($sessionId: Int!, $title: String!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { title: $title }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSessionTitle($sessionId: Int!, $title: String!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { title: $title }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSessionStartTime($sessionId: Int!, $startTime: timestamptz!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { startDateTime: $startTime }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSessionStartTime($sessionId: Int!, $startTime: timestamptz!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { startDateTime: $startTime }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSessionEndTime($sessionId: Int!, $endTime: timestamptz!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { endDateTime: $endTime }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSessionEndTime($sessionId: Int!, $endTime: timestamptz!) {\n    update_Session_by_pk(pk_columns: { id: $sessionId }, _set: { endDateTime: $endTime }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertNewSessionSpeaker($sessionId: Int!, $expertId: Int!) {\n    insert_SessionSpeaker(objects: { sessionId: $sessionId, expertId: $expertId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertNewSessionSpeaker($sessionId: Int!, $expertId: Int!) {\n    insert_SessionSpeaker(objects: { sessionId: $sessionId, expertId: $expertId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteSessionSpeaker($speakerId: Int!) {\n    delete_SessionSpeaker_by_pk(id: $speakerId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSessionSpeaker($speakerId: Int!) {\n    delete_SessionSpeaker_by_pk(id: $speakerId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertSessionAddress($sessionId: Int!, $address: String!, $courseLocationId: Int!) {\n    insert_SessionAddress(objects: { sessionId: $sessionId, address: $address, courseLocationId: $courseLocationId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertSessionAddress($sessionId: Int!, $address: String!, $courseLocationId: Int!) {\n    insert_SessionAddress(objects: { sessionId: $sessionId, address: $address, courseLocationId: $courseLocationId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertSessionWithAddresses(\n    $courseId: Int!\n    $startTime: timestamptz!\n    $endTime: timestamptz!\n    $sessionAddresses: [SessionAddress_insert_input!]!\n  ) {\n    insert_Session(\n      objects: {\n        courseId: $courseId\n        title: \"\"\n        startDateTime: $startTime\n        endDateTime: $endTime\n        description: \"\"\n        SessionAddresses: { data: $sessionAddresses }\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n        SessionAddresses {\n          id\n          address\n          courseLocationId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertSessionWithAddresses(\n    $courseId: Int!\n    $startTime: timestamptz!\n    $endTime: timestamptz!\n    $sessionAddresses: [SessionAddress_insert_input!]!\n  ) {\n    insert_Session(\n      objects: {\n        courseId: $courseId\n        title: \"\"\n        startDateTime: $startTime\n        endDateTime: $endTime\n        description: \"\"\n        SessionAddresses: { data: $sessionAddresses }\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n        SessionAddresses {\n          id\n          address\n          courseLocationId\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSessionAddress($itemId: Int!, $text: String!) {\n    update_SessionAddress_by_pk(pk_columns: { id: $itemId }, _set: { address: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSessionAddress($itemId: Int!, $text: String!) {\n    update_SessionAddress_by_pk(pk_columns: { id: $itemId }, _set: { address: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteSessionAddressesByCourseAndLocation($courseId: Int!, $courseLocationId: Int!) {\n    delete_SessionAddress(\n      where: { Session: { courseId: { _eq: $courseId } }, courseLocationId: { _eq: $courseLocationId } }\n    ) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSessionAddressesByCourseAndLocation($courseId: Int!, $courseLocationId: Int!) {\n    delete_SessionAddress(\n      where: { Session: { courseId: { _eq: $courseId } }, courseLocationId: { _eq: $courseLocationId } }\n    ) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LocationOptions {\n    LocationOption {\n      value\n    }\n  }\n"): (typeof documents)["\n  query LocationOptions {\n    LocationOption {\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertCourseLocation($courseId: Int!, $option: LocationOption_enum!) {\n    insert_CourseLocation(objects: { courseId: $courseId, locationOption: $option, defaultSessionAddress: \"\" }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertCourseLocation($courseId: Int!, $option: LocationOption_enum!) {\n    insert_CourseLocation(objects: { courseId: $courseId, locationOption: $option, defaultSessionAddress: \"\" }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseLocation($locationId: Int!, $value: LocationOption_enum!) {\n    update_CourseLocation_by_pk(pk_columns: { id: $locationId }, _set: { locationOption: $value }) {\n      id\n      locationOption\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseLocation($locationId: Int!, $value: LocationOption_enum!) {\n    update_CourseLocation_by_pk(pk_columns: { id: $locationId }, _set: { locationOption: $value }) {\n      id\n      locationOption\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseDefaultSessionAddress($itemId: Int!, $text: String!) {\n    update_CourseLocation_by_pk(pk_columns: { id: $itemId }, _set: { defaultSessionAddress: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseDefaultSessionAddress($itemId: Int!, $text: String!) {\n    update_CourseLocation_by_pk(pk_columns: { id: $itemId }, _set: { defaultSessionAddress: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCourseLocation($locationId: Int!) {\n    delete_CourseLocation_by_pk(id: $locationId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCourseLocation($locationId: Int!) {\n    delete_CourseLocation_by_pk(id: $locationId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseStartTime($courseId: Int!, $startTime: time) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { startTime: $startTime }) {\n      id\n      startTime\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseStartTime($courseId: Int!, $startTime: time) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { startTime: $startTime }) {\n      id\n      startTime\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseEndTime($courseId: Int!, $endTime: time) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { endTime: $endTime }) {\n      id\n      endTime\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseEndTime($courseId: Int!, $endTime: time) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { endTime: $endTime }) {\n      id\n      endTime\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseLanguage($courseId: Int!, $value: String!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { language: $value }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseLanguage($courseId: Int!, $value: String!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { language: $value }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseWeekday($courseId: Int!, $value: Weekday_enum!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { weekDay: $value }) {\n      id\n      weekDay\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseWeekday($courseId: Int!, $value: Weekday_enum!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { weekDay: $value }) {\n      id\n      weekDay\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseHeadingDescription1($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { headingDescriptionField1: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseHeadingDescription1($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { headingDescriptionField1: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseHeadingDescription2($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { headingDescriptionField2: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseHeadingDescription2($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { headingDescriptionField2: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseContentDescriptionField1($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { contentDescriptionField1: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseContentDescriptionField1($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { contentDescriptionField1: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseContentDescriptionField2($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { contentDescriptionField2: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseContentDescriptionField2($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { contentDescriptionField2: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseLearningGoals($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { learningGoals: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseLearningGoals($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { learningGoals: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateShortDescription($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { tagline: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateShortDescription($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { tagline: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseMaxParticipants($courseId: Int!, $maxParticipants: Int!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { maxParticipants: $maxParticipants }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseMaxParticipants($courseId: Int!, $maxParticipants: Int!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { maxParticipants: $maxParticipants }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseStatus($courseId: Int!, $status: CourseStatus_enum!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { status: $status }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseStatus($courseId: Int!, $status: CourseStatus_enum!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { status: $status }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseAttendanceCertificatePossible($courseId: Int!, $isPossible: Boolean!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { attendanceCertificatePossible: $isPossible }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseAttendanceCertificatePossible($courseId: Int!, $isPossible: Boolean!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { attendanceCertificatePossible: $isPossible }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseAchievementCertificatePossible($courseId: Int!, $isPossible: Boolean!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { achievementCertificatePossible: $isPossible }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseAchievementCertificatePossible($courseId: Int!, $isPossible: Boolean!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { achievementCertificatePossible: $isPossible }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseTitle($courseId: Int!, $courseTitle: String!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { title: $courseTitle }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseTitle($courseId: Int!, $courseTitle: String!) {\n    update_Course_by_pk(pk_columns: { id: $courseId }, _set: { title: $courseTitle }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseChatLink($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { chatLink: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseChatLink($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { chatLink: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseEcts($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { ects: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseEcts($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { ects: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseExternalRegistrationLink($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { externalRegistrationLink: $text }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseExternalRegistrationLink($itemId: Int!, $text: String!) {\n    update_Course_by_pk(pk_columns: { id: $itemId }, _set: { externalRegistrationLink: $text }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DegreeCourses {\n    Course(where: { Program: { shortTitle: { _eq: \"DEGREES\" } } }) {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  query DegreeCourses {\n    Course(where: { Program: { shortTitle: { _eq: \"DEGREES\" } } }) {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CompletedDegreeEnrollments($degreeCourseId: Int!, $userId: uuid!) {\n    CourseEnrollment(\n      where: {\n        _or: [\n          {\n            userId: { _eq: $userId }\n            Course: { CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } } }\n            achievementCertificateURL: { _is_null: false }\n          }\n          {\n            userId: { _eq: $userId }\n            Course: {\n              CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } }\n              Program: { shortTitle: { _eq: \"EVENTS\" } }\n            }\n          }\n        ]\n      }\n    ) {\n      Course {\n        id\n        title\n        ects\n        Program {\n          shortTitle\n          title\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CompletedDegreeEnrollments($degreeCourseId: Int!, $userId: uuid!) {\n    CourseEnrollment(\n      where: {\n        _or: [\n          {\n            userId: { _eq: $userId }\n            Course: { CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } } }\n            achievementCertificateURL: { _is_null: false }\n          }\n          {\n            userId: { _eq: $userId }\n            Course: {\n              CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } }\n              Program: { shortTitle: { _eq: \"EVENTS\" } }\n            }\n          }\n        ]\n      }\n    ) {\n      Course {\n        id\n        title\n        ects\n        Program {\n          shortTitle\n          title\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DegreeParticipantsWithDegreeEnrollments($degreeCourseId: Int!) {\n    Course_by_pk(id: $degreeCourseId) {\n      CourseEnrollments {\n        id\n        status\n        achievementCertificateURL\n        attendanceCertificateURL\n        User {\n          id\n          firstName\n          lastName\n          email\n          CourseEnrollments(where: { Course: { CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } } } }) {\n            id\n            status\n            achievementCertificateURL\n            attendanceCertificateURL\n            updated_at\n            Course {\n              id\n              title\n              ects\n              Program {\n                id\n                shortTitle\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DegreeParticipantsWithDegreeEnrollments($degreeCourseId: Int!) {\n    Course_by_pk(id: $degreeCourseId) {\n      CourseEnrollments {\n        id\n        status\n        achievementCertificateURL\n        attendanceCertificateURL\n        User {\n          id\n          firstName\n          lastName\n          email\n          CourseEnrollments(where: { Course: { CourseDegrees: { degreeCourseId: { _eq: $degreeCourseId } } } }) {\n            id\n            status\n            achievementCertificateURL\n            attendanceCertificateURL\n            updated_at\n            Course {\n              id\n              title\n              ects\n              Program {\n                id\n                shortTitle\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertCourseDegreeTag($itemId: Int!, $tagId: Int!) {\n    insert_CourseDegree(objects: { courseId: $itemId, degreeCourseId: $tagId }) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation InsertCourseDegreeTag($itemId: Int!, $tagId: Int!) {\n    insert_CourseDegree(objects: { courseId: $itemId, degreeCourseId: $tagId }) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCourseDegreeTag($itemId: Int!, $tagId: Int!) {\n    delete_CourseDegree(where: { Course: { id: { _eq: $itemId } }, _and: { DegreeCourse: { id: { _eq: $tagId } } } }) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCourseDegreeTag($itemId: Int!, $tagId: Int!) {\n    delete_CourseDegree(where: { Course: { id: { _eq: $itemId } }, _and: { DegreeCourse: { id: { _eq: $tagId } } } }) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertSingleAttendance($input: Attendance_insert_input!) {\n    insert_Attendance_one(object: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertSingleAttendance($input: Attendance_insert_input!) {\n    insert_Attendance_one(object: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSingleAttendanceByPk($pkId: Int!, $changes: Attendance_set_input!) {\n    update_Attendance_by_pk(pk_columns: { id: $pkId }, _set: $changes) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSingleAttendanceByPk($pkId: Int!, $changes: Attendance_set_input!) {\n    update_Attendance_by_pk(pk_columns: { id: $pkId }, _set: $changes) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseEnrollmentQuery($where: CourseEnrollment_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    CourseEnrollment(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...CourseEnrollmentFragment\n    }\n  }\n"): (typeof documents)["\n  query CourseEnrollmentQuery($where: CourseEnrollment_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    CourseEnrollment(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...CourseEnrollmentFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseEnrollmentWithUserQuery($where: CourseEnrollment_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    CourseEnrollment(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...CourseEnrollmentFragment\n      User {\n        ...UserFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query CourseEnrollmentWithUserQuery($where: CourseEnrollment_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    CourseEnrollment(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...CourseEnrollmentFragment\n      User {\n        ...UserFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseInstructorList {\n    CourseInstructor {\n      ...CourseInstructorFragment\n    }\n  }\n"): (typeof documents)["\n  query CourseInstructorList {\n    CourseInstructor {\n      ...CourseInstructorFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseTileListAnonymous {\n    Course(order_by: { id: desc }) {\n      ...CourseTileFragmentAnonymous\n    }\n  }\n"): (typeof documents)["\n  query CourseTileListAnonymous {\n    Course(order_by: { id: desc }) {\n      ...CourseTileFragmentAnonymous\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseList {\n    Course(order_by: { updated_at: desc }) {\n      ...CourseFragment\n    }\n  }\n"): (typeof documents)["\n  query CourseList {\n    Course(order_by: { updated_at: desc }) {\n      ...CourseFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminCourseList($where: Course_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    Course(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...AdminCourseFragment\n      Program {\n        ...ProgramFragmentMinimumProperties\n      }\n      CourseEnrollments {\n        id\n        CourseEnrollmentStatus {\n          value\n        }\n      }\n      CourseGroups {\n        id\n        groupOptionId\n        CourseGroupOption {\n          title\n        }\n      }\n      CourseDegrees {\n        id\n        degreeCourseId\n        Course {\n          title\n        }\n        DegreeCourse {\n          title\n        }\n      }\n      AppliedAndUnratedCount: CourseEnrollments_aggregate(\n        where: {\n          _and: [\n            { CourseEnrollmentStatus: { value: { _eq: \"APPLIED\" } } }\n            { MotivationRating: { value: { _eq: \"UNRATED\" } } }\n          ]\n        }\n      ) {\n        aggregate {\n          count\n        }\n      }\n    }\n    Course_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    CourseGroupOption {\n      id\n      title\n      order\n    }\n  }\n"): (typeof documents)["\n  query AdminCourseList($where: Course_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    Course(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      ...AdminCourseFragment\n      Program {\n        ...ProgramFragmentMinimumProperties\n      }\n      CourseEnrollments {\n        id\n        CourseEnrollmentStatus {\n          value\n        }\n      }\n      CourseGroups {\n        id\n        groupOptionId\n        CourseGroupOption {\n          title\n        }\n      }\n      CourseDegrees {\n        id\n        degreeCourseId\n        Course {\n          title\n        }\n        DegreeCourse {\n          title\n        }\n      }\n      AppliedAndUnratedCount: CourseEnrollments_aggregate(\n        where: {\n          _and: [\n            { CourseEnrollmentStatus: { value: { _eq: \"APPLIED\" } } }\n            { MotivationRating: { value: { _eq: \"UNRATED\" } } }\n          ]\n        }\n      ) {\n        aggregate {\n          count\n        }\n      }\n    }\n    Course_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    CourseGroupOption {\n      id\n      title\n      order\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseTiles {\n    Course(order_by: { updated_at: desc }) {\n      ...CourseTileFragment\n      CourseGroups {\n        CourseGroupOption {\n          order\n          title\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CourseTiles {\n    Course(order_by: { updated_at: desc }) {\n      ...CourseTileFragment\n      CourseGroups {\n        CourseGroupOption {\n          order\n          title\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CoursesByInstructor($userId: uuid!) {\n    Course(\n      order_by: { applicationEnd: desc }\n      where: { CourseInstructors: { Expert: { User: { id: { _eq: $userId } } } } }\n    ) {\n      ...CourseTileFragment\n    }\n  }\n"): (typeof documents)["\n  query CoursesByInstructor($userId: uuid!) {\n    Course(\n      order_by: { applicationEnd: desc }\n      where: { CourseInstructors: { Expert: { User: { id: { _eq: $userId } } } } }\n    ) {\n      ...CourseTileFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CoursesEnrolledByUser($userId: uuid!) {\n    Course(order_by: { applicationEnd: desc }, where: { CourseEnrollments: { userId: { _eq: $userId } } }) {\n      ...CourseTileFragment\n    }\n  }\n"): (typeof documents)["\n  query CoursesEnrolledByUser($userId: uuid!) {\n    Course(order_by: { applicationEnd: desc }, where: { CourseEnrollments: { userId: { _eq: $userId } } }) {\n      ...CourseTileFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseWithEnrollment($id: Int!, $userId: uuid!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragment\n      chatLink\n      # LinkVideoCall\n      CourseEnrollments {\n        ...EnrollmentFragment\n      }\n      CourseLocations {\n        id\n        locationOption\n        defaultSessionAddress\n      }\n      Program {\n        ...ProgramFragment\n      }\n      Sessions(order_by: { startDateTime: asc }) {\n        ...SessionFragment\n        Attendances(where: { User: { id: { _eq: $userId } } }) {\n          id\n          status\n          updated_at\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CourseWithEnrollment($id: Int!, $userId: uuid!) {\n    Course_by_pk(id: $id) {\n      ...CourseFragment\n      chatLink\n      # LinkVideoCall\n      CourseEnrollments {\n        ...EnrollmentFragment\n      }\n      CourseLocations {\n        id\n        locationOption\n        defaultSessionAddress\n      }\n      Program {\n        ...ProgramFragment\n      }\n      Sessions(order_by: { startDateTime: asc }) {\n        ...SessionFragment\n        Attendances(where: { User: { id: { _eq: $userId } } }) {\n          id\n          status\n          updated_at\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MyCourses($userId: uuid!) {\n    User_by_pk(id: $userId) {\n      CourseEnrollments {\n        ...EnrollmentFragment\n        Course {\n          ...CourseFragment\n          CourseEnrollments {\n            ...EnrollmentFragment\n          }\n          Program {\n            ...ProgramFragment\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MyCourses($userId: uuid!) {\n    User_by_pk(id: $userId) {\n      CourseEnrollments {\n        ...EnrollmentFragment\n        Course {\n          ...CourseFragment\n          CourseEnrollments {\n            ...EnrollmentFragment\n          }\n          Program {\n            ...ProgramFragment\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MyEnrollmentsForCourseQuery($courseId: Int!) {\n    CourseEnrollment(where: { courseId: { _eq: $courseId } }) {\n      ...EnrollmentFragment\n      Course {\n        ...CourseFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query MyEnrollmentsForCourseQuery($courseId: Int!) {\n    CourseEnrollment(where: { courseId: { _eq: $courseId } }) {\n      ...EnrollmentFragment\n      Course {\n        ...CourseFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourseGroupOptions {\n    CourseGroupOption(order_by: { order: asc }) {\n      id\n      order\n      title\n    }\n  }\n"): (typeof documents)["\n  query CourseGroupOptions {\n    CourseGroupOption(order_by: { order: asc }) {\n      id\n      order\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourseGroupOptionOrder($id: Int!, $order: Int!) {\n    update_CourseGroupOption_by_pk(pk_columns: { id: $id }, _set: { order: $order }) {\n      id\n      order\n      __typename\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourseGroupOptionOrder($id: Int!, $order: Int!) {\n    update_CourseGroupOption_by_pk(pk_columns: { id: $id }, _set: { order: $order }) {\n      id\n      order\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmplomentByValue {\n    Employment(order_by: { value: asc }) {\n      value\n      comment\n    }\n  }\n"): (typeof documents)["\n  query EmplomentByValue {\n    Employment(order_by: { value: asc }) {\n      value\n      comment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExpertList($where: Expert_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    Expert(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      id\n      userId\n      User {\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query ExpertList($where: Expert_bool_exp! = {}, $limit: Int = null, $offset: Int = 0) {\n    Expert(order_by: { id: desc }, where: $where, limit: $limit, offset: $offset) {\n      id\n      userId\n      User {\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MailTemplates {\n    MailTemplate {\n      id\n      subject\n      content\n      from\n      cc\n      bcc\n      title\n    }\n  }\n"): (typeof documents)["\n  query MailTemplates {\n    MailTemplate {\n      id\n      subject\n      content\n      from\n      cc\n      bcc\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertMailLog(\n    $subject: String!\n    $content: String!\n    $from: String!\n    $cc: String\n    $bcc: String\n    $to: String!\n    $status: String!\n  ) {\n    insert_MailLog(\n      objects: { subject: $subject, content: $content, from: $from, cc: $cc, bcc: $bcc, to: $to, status: $status }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertMailLog(\n    $subject: String!\n    $content: String!\n    $from: String!\n    $cc: String\n    $bcc: String\n    $to: String!\n    $status: String!\n  ) {\n    insert_MailLog(\n      objects: { subject: $subject, content: $content, from: $from, cc: $cc, bcc: $bcc, to: $to, status: $status }\n    ) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MultiProgramEnrollments($programIds: [Int!]) {\n    Program(where: { id: { _in: $programIds } }) {\n      id\n      title\n      shortTitle\n      Courses {\n        id\n        title\n        CourseEnrollments {\n          id\n          status\n          attendanceCertificateURL\n          achievementCertificateURL\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MultiProgramEnrollments($programIds: [Int!]) {\n    Program(where: { id: { _in: $programIds } }) {\n      id\n      title\n      shortTitle\n      Courses {\n        id\n        title\n        CourseEnrollments {\n          id\n          status\n          attendanceCertificateURL\n          achievementCertificateURL\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProgramList {\n    Program {\n      ...AdminProgramFragment\n      Courses {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProgramList {\n    Program {\n      ...AdminProgramFragment\n      Courses {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Programs {\n    Program(order_by: { id: desc }) {\n      ...ProgramFragmentMinimumProperties\n    }\n  }\n"): (typeof documents)["\n  query Programs {\n    Program(order_by: { id: desc }) {\n      ...ProgramFragmentMinimumProperties\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UnversityByComment {\n    University(order_by: { comment: asc }) {\n      value\n      comment\n    }\n  }\n"): (typeof documents)["\n  query UnversityByComment {\n    University(order_by: { comment: asc }) {\n      value\n      comment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserList {\n    User(where: { status: { _eq: ACTIVE } }) {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n"): (typeof documents)["\n  query UserList {\n    User(where: { status: { _eq: ACTIVE } }) {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query User($userId: uuid!) {\n    User_by_pk(id: $userId) {\n      id\n      firstName\n      lastName\n      matriculationNumber\n      otherUniversity\n      university\n      picture\n      externalProfile\n      employment\n      email\n    }\n  }\n"): (typeof documents)["\n  query User($userId: uuid!) {\n    User_by_pk(id: $userId) {\n      id\n      firstName\n      lastName\n      matriculationNumber\n      otherUniversity\n      university\n      picture\n      externalProfile\n      employment\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertExpert($userId: uuid!) {\n    insert_Expert(objects: { userId: $userId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertExpert($userId: uuid!) {\n    insert_Expert(objects: { userId: $userId }) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserForSelection1($searchValue: String!) {\n    User(\n      order_by: { lastName: asc }\n      where: {\n        _and: [\n          { status: { _eq: ACTIVE } }\n          {\n            _or: [\n              { firstName: { _ilike: $searchValue } }\n              { lastName: { _ilike: $searchValue } }\n              { email: { _ilike: $searchValue } }\n            ]\n          }\n        ]\n      }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserForSelection1($searchValue: String!) {\n    User(\n      order_by: { lastName: asc }\n      where: {\n        _and: [\n          { status: { _eq: ACTIVE } }\n          {\n            _or: [\n              { firstName: { _ilike: $searchValue } }\n              { lastName: { _ilike: $searchValue } }\n              { email: { _ilike: $searchValue } }\n            ]\n          }\n        ]\n      }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserForSelection2($searchValue1: String!, $searchValue2: String!) {\n    User(\n      order_by: { lastName: asc }\n      where: {\n        _and: [\n          { status: { _eq: ACTIVE } }\n          { _or: [{ firstName: { _ilike: $searchValue1 }, lastName: { _ilike: $searchValue2 } }] }\n        ]\n      }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserForSelection2($searchValue1: String!, $searchValue2: String!) {\n    User(\n      order_by: { lastName: asc }\n      where: {\n        _and: [\n          { status: { _eq: ACTIVE } }\n          { _or: [{ firstName: { _ilike: $searchValue1 }, lastName: { _ilike: $searchValue2 } }] }\n        ]\n      }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersByLastName($limit: Int = 10, $offset: Int = 0, $filter: User_bool_exp = {}) {\n    User(\n      limit: $limit\n      offset: $offset\n      order_by: { lastName: asc }\n      where: { _and: [{ status: { _eq: ACTIVE } }, $filter] }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      matriculationNumber\n      university\n      employment\n      CourseEnrollments {\n        id\n        courseId\n        userId\n        status\n        updated_at\n        Course {\n          id\n          title\n          Program {\n            id\n            title\n            shortTitle\n          }\n        }\n      }\n    }\n    User_aggregate(where: $filter) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query UsersByLastName($limit: Int = 10, $offset: Int = 0, $filter: User_bool_exp = {}) {\n    User(\n      limit: $limit\n      offset: $offset\n      order_by: { lastName: asc }\n      where: { _and: [{ status: { _eq: ACTIVE } }, $filter] }\n    ) {\n      id\n      firstName\n      lastName\n      email\n      matriculationNumber\n      university\n      employment\n      CourseEnrollments {\n        id\n        courseId\n        userId\n        status\n        updated_at\n        Course {\n          id\n          title\n          Program {\n            id\n            title\n            shortTitle\n          }\n        }\n      }\n    }\n    User_aggregate(where: $filter) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersWithExpertId(\n    $userOrderBy: User_order_by = { lastName: asc }\n    $limit: Int = null\n    $offset: Int = 0\n    $where: User_bool_exp = {}\n  ) {\n    User_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    User(\n      order_by: [$userOrderBy]\n      where: { _and: [{ status: { _eq: ACTIVE } }, $where] }\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query UsersWithExpertId(\n    $userOrderBy: User_order_by = { lastName: asc }\n    $limit: Int = null\n    $offset: Int = 0\n    $where: User_bool_exp = {}\n  ) {\n    User_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    User(\n      order_by: [$userOrderBy]\n      where: { _and: [{ status: { _eq: ACTIVE } }, $where] }\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      firstName\n      lastName\n      email\n      Experts {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUser($id: uuid!) {\n    anonymizeUser(userId: $id) {\n      anonymizedUserId\n      messageKey\n      error\n      steps {\n        keycloak_deletion\n        user_data_anonymization\n        motivation_letter_anonymization\n        profile_picture_removal\n        certificate_anonymization\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUser($id: uuid!) {\n    anonymizeUser(userId: $id) {\n      anonymizedUserId\n      messageKey\n      error\n      steps {\n        keycloak_deletion\n        user_data_anonymization\n        motivation_letter_anonymization\n        profile_picture_removal\n        certificate_anonymization\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;