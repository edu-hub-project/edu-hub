name: Setup Staging Environment
on:
  push:
    # Run only on changes in the following branches
    branches:
      - staging

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  pull_request:
    # Run tests for PRs.
    branches:
      - staging

env:
  TF_WORKSPACE: eduhub-application-staging
  TF_WORKSPACE_ID: ws-wVwkztBCRbphphYw
  TF_VAR_ID_COMMIT_SHA: var-sSiBMg7YBPL7NcFh

jobs:

  check_changes:
    runs-on: ubuntu-latest
    outputs:
      frontend_changes: ${{ steps.check_changes.outputs.frontend_changes }}
      hasura_changes: ${{ steps.check_changes.outputs.hasura_changes }}
      keycloak_changes: ${{ steps.check_changes.outputs.keycloak_changes }}
      functions_changes: ${{ steps.check_changes.outputs.functions_changes }}
    steps:
      - name: Check for changes in specific folders
        id: check_changes
        uses: actions/github-script@v5
        with:
          script: |
            const { commits } = context.payload;
            console.log('Context Payload:', context.payload);
            if (!commits) return { frontend_changes: false, hasura_changes: false, functions_changes: false, keycloak_changes: false };

            function hasChanges(folder) {
              return commits.some(commit => {
                return (commit.modified || []).concat(commit.added || [], commit.removed || [])
                  .some(file => file.startsWith(folder));
              });
            }

            const frontendChanges = hasChanges('frontend-nx');
            const hasuraChanges = hasChanges('backend');
            const functionsChanges = hasChanges('functions');
            const keycloakChanges = hasChanges('keycloak');

            return { frontend_changes: frontendChanges, hasura_changes: hasuraChanges, functions_changes: functionsChanges, keycloak_changes: keycloakChanges };

  save-commit-sha:
    name: Save SHA of current commit in Terraform Cloud
    runs-on: ubuntu-latest
    steps:
      - name: Check Out the Repository Branch
        uses: actions/checkout@v3
      - name: Save commit SHA in Terraform Cloud variable
        run: |
          curl \
          --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request PATCH \
          --data "{ \"data\": { \"id\":\"$TF_VAR_ID_COMMIT_SHA\", \"attributes\": { \"value\":\"$(git rev-parse --short "$GITHUB_SHA")\" }, \"type\":\"vars\" }}" \
          https://app.terraform.io/api/v2/workspaces/$TF_WORKSPACE_ID/vars/$TF_VAR_ID_COMMIT_SHA

  build-keycloak:
    if: needs.check_changes.outputs.keycloak_changes == 'true'
    name: Build and Store Keycloak Docker Image in Google Docker Repo
    needs: [check_changes]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: keycloak
      DOCKERFILE_NAME: Dockerfile
      IMAGE_NAME: keycloak
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-hasura:
    if: needs.check_changes.outputs.hasura_changes == 'true'
    name: Build and Store Hasura Docker Image in Google Docker Repo
    needs: [check_changes]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: backend
      IMAGE_NAME: backend
      DOCKERFILE_NAME: Dockerfile
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-frontend:
    if: needs.check_changes.outputs.frontend_changes == 'true'
    name: Build and Store Frontend Docker Image in Google Docker Repo
    needs: [check_changes]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: frontend-nx
      DOCKERFILE_NAME: Dockerfile-edu
      IMAGE_NAME: edu
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
      NEXT_PUBLIC_API_URL: "https://hasura-staging.opencampus.sh/v1/graphql"
      NEXT_PUBLIC_AUTH_URL: "https://keycloak-staging.opencampus.sh"
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-rent-a-scientist-frontend:
    if: needs.check_changes.outputs.frontend_changes == 'true'
    name: Build and Store Rent-a-Scientist Docker Image in Google Docker Repo
    needs: [check_changes]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: frontend-nx
      DOCKERFILE_NAME: Dockerfile-rent-a-scientist
      IMAGE_NAME: rent-a-scientist
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
      NEXT_PUBLIC_API_URL: "https://hasura-staging.opencampus.sh/v1/graphql"
      NEXT_PUBLIC_AUTH_URL: "https://keycloak-staging.opencampus.sh"
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  zip-and-store-cloud-functions:
    if: needs.check_changes.outputs.functions_changes == 'true'
    name: Zip and Store Cloud Functions
    needs: [check_changes]
    uses: ./.github/workflows/zip-and-store-cloud-functions.yml
    with:
      PROJECT_ID: eduhub-staging-new
      CLOUD_FUNCTION_FOLDER: functions
      BUCKET_NAME: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  wait-for-builds:
    name: Wait for build jobs
    needs: [check_changes, build-keycloak, build-hasura, build-frontend, build-rent-a-scientist-frontend, zip-and-store-cloud-functions]
    runs-on: ubuntu-latest
    steps:
      - name: All build jobs finished
        run: echo "All build jobs finished"

  deploy-application:
    name: "Deploy Application Infrastructure"
    needs:
      [wait-for-builds, save-commit-sha]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure/application
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -detailed-exitcode -no-color -input=false
        continue-on-error: true

      - name: Check for Plan Failure
        if: steps.plan.outputs.exitcode == 1
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
