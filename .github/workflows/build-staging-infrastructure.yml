name: Setup Staging Environment
on:
  push:
    # Run only on changes in the following branches
    branches:
      - staging

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  pull_request:
    # Run tests for PRs.
    branches:
      - staging

env:
  TF_WORKSPACE: eduhub-application-staging
  TF_WORKSPACE_ID: ws-wVwkztBCRbphphYw
  TF_VAR_ID_COMMIT_SHA: var-sSiBMg7YBPL7NcFh

jobs:

  check_folder_changes:
    name: Check for changes in specific folders
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.check_folder_changes.outputs.frontend_changed }}
      hasura_changed: ${{ steps.check_folder_changes.outputs.hasura_changed }}
      keycloak_changed: ${{ steps.check_folder_changes.outputs.keycloak_changed }}
      functions_changed: ${{ steps.check_folder_changes.outputs.functions_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      - name: List all changed files
        run: |
          IFS=' ' read -ra changed_files <<< "${{ steps.changed-files.outputs.all_changed_files }}"
          for file in "${changed_files[@]}"; do
            echo "$file was changed"
          done
      

      - name: Check if any file in the specified folders has changed
        run: |
          function check_folder_changes() {
            folder=$1
            for file in "${changed_files[@]}"; do
              if [[ $file == $folder/* ]]; then
                echo "true"
                return
              fi
            done
            echo "false"
          }

          IFS=' ' read -ra changed_files <<< "${{ steps.changed-files.outputs.all_changed_files }}"
          backend_changed=$(check_folder_changes "backend")
          keycloak_changed=$(check_folder_changes "keycloak")
          frontend_nx_changed=$(check_folder_changes "frontend-nx")
          functions_changed=$(check_folder_changes "functions")

          echo "{backend_changed}={$backend_changed}" >> $GITHUB_OUTPUT
          echo "{keycloak_changed}={$keycloak_changed}" >> $GITHUB_OUTPUT
          echo "{frontend_nx_changed}={$frontend_nx_changed}" >> $GITHUB_OUTPUT
          echo "{functions_changed}={$functions_changed}" >> $GITHUB_OUTPUT

  save_commit_sha:
    name: Save SHA of current commit in Terraform Cloud
    runs-on: ubuntu-latest
    steps:
      - name: Check Out the Repository Branch
        uses: actions/checkout@v3
      - name: Save commit SHA in Terraform Cloud variable
        run: |
          curl \
          --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request PATCH \
          --data "{ \"data\": { \"id\":\"$TF_VAR_ID_COMMIT_SHA\", \"attributes\": { \"value\":\"$(git rev-parse --short "$GITHUB_SHA")\" }, \"type\":\"vars\" }}" \
          https://app.terraform.io/api/v2/workspaces/$TF_WORKSPACE_ID/vars/$TF_VAR_ID_COMMIT_SHA

  build_keycloak:
    # if: needs.check_folder_changes.outputs.keycloak_changed == 'true'
    name: Build and Store Keycloak Docker Image in Google Docker Repo
    needs: [check_folder_changes, save_commit_sha]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: keycloak
      DOCKERFILE_NAME: Dockerfile
      IMAGE_NAME: keycloak
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build_hasura:
    # if: needs.check_folder_changes.outputs.hasura_changed == 'true'
    name: Build and Store Hasura Docker Image in Google Docker Repo
    needs: [check_folder_changes, save_commit_sha]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: backend
      IMAGE_NAME: backend
      DOCKERFILE_NAME: Dockerfile
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build_frontend:
    # if: needs.check_folder_changes.outputs.frontend_changed == 'true'
    name: Build and Store Frontend Docker Image in Google Docker Repo
    needs: [check_folder_changes, save_commit_sha]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: frontend-nx
      DOCKERFILE_NAME: Dockerfile-edu
      IMAGE_NAME: edu
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
      NEXT_PUBLIC_API_URL: "https://hasura-staging.opencampus.sh/v1/graphql"
      NEXT_PUBLIC_AUTH_URL: "https://keycloak-staging.opencampus.sh"
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build_rent_a_scientist_frontend:
    # if: needs.check_folder_changes.outputs.frontend_changed == 'true'
    name: Build and Store Rent-a-Scientist Docker Image in Google Docker Repo
    needs: [check_folder_changes, save_commit_sha]
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: frontend-nx
      DOCKERFILE_NAME: Dockerfile-rent-a-scientist
      IMAGE_NAME: rent-a-scientist
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-staging-new
      NEXT_PUBLIC_API_URL: "https://hasura-staging.opencampus.sh/v1/graphql"
      NEXT_PUBLIC_AUTH_URL: "https://keycloak-staging.opencampus.sh"
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  zip_and_store_cloud_functions:
    # if: needs.check_folder_changes.outputs.functions_changed == 'true'
    name: Zip and Store Cloud Functions
    needs: [check_folder_changes, save_commit_sha]
    uses: ./.github/workflows/zip-and-store-cloud-functions.yml
    with:
      PROJECT_ID: eduhub-staging-new
      CLOUD_FUNCTION_FOLDER: functions
      BUCKET_NAME: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_STAGING_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  deploy_application:
    if: always()
    name: "Deploy Application Infrastructure"
    needs:
      [build_keycloak, build_hasura, build_frontend, build_rent_a_scientist_frontend, zip_and_store_cloud_functions]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure/application
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -detailed-exitcode -no-color -input=false
        continue-on-error: true

      - name: Check for Plan Failure
        if: steps.plan.outputs.exitcode == 1
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
