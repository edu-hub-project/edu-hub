type Mutation {
  anonymizeUser(
    userId: uuid!
  ): AnonymizeUserResult
}

type Mutation {
  createCertificate(
    userIds: [uuid!]!
    courseId: Int!
    certificateType: String!
  ): result
}

type Mutation {
  createCertificates(
    userIds: [uuid!]!
    courseId: Int!
    certificateType: String!
  ): CreateCertificatesResult!
}

type Query {
  getAdminUsers: GetAdminUsersResult!
}

type Query {
  getMoocHubData: moocHubSchema
}

type Query {
  getSignedUrl(
    path: String!
  ): getSignedUrlOutput
}

type Query {
  loadParticipationData(
    programId: Int!
  ): LoadParticipationDataResult!
}

type Mutation {
  saveAchievementCertificateTemplate(
    base64file: String!
    filename: String!
    programid: Int!
  ): saveFileOutput
}

type Mutation {
  saveAchievementDocumentationTemplate(
    base64file: String!
    achievementDocumentationTemplateId: Int!
    filename: String!
  ): saveFileOutput
}

type Mutation {
  saveAchievementRecordCoverImage(
    base64file: String!
    filename: String!
    achievementRecordId: Int!
  ): saveFileOutput
}

type Mutation {
  saveAchievementRecordDocumentation(
    base64file: String!
    filename: String!
    achievementRecordId: Int!
  ): saveFileOutput
}

type Mutation {
  saveAttendanceCertificateTemplate(
    base64file: String!
    filename: String!
    programid: Int!
  ): saveFileOutput
}

type Mutation {
  saveCourseImage(
    base64file: String!
    filename: String!
    courseid: Int!
  ): saveFileOutput
}

type Mutation {
  saveUserProfileImage(
    base64file: String!
    filename: String!
    userid: String!
  ): saveFileOutput
}

type Mutation {
  updateFromKeycloak(
    userid: ID!
  ): result
}

type Mutation {
  updateUserAdminStatus(
    userId: String!
    isAdmin: Boolean!
  ): UpdateAdminStatusResult!
}

type loadFileOutput {
  link: String!
}

type result {
  result: String!
}

type saveFileOutput {
  file_path: String!
  google_link: String!
}

type createCertificateOutput {
  pdf: String!
}

type moocHubSchema {
  links: Links!
  data: [MoocHubCourse!]!
}

type Links {
  self: String!
}

type Course {
  id: ID!
  type: String!
  attributes: CourseAttributes!
}

type CourseAttributes {
  name: String!
  courseMode: String!
  languages: [String!]!
  startDate: String!
  url: String!
  abstract: String!
  description: String!
  moocProvider: String!
  image: Image!
}

type MoocHubCourse {
  id: ID!
  type: String!
  attributes: CourseAttributes!
}

type MoocHubImage {
  url: String!
  alt: String!
}

type Image {
  url: String!
  alt: String!
}

type getSignedUrlOutput {
  link: String!
}

type DeleteUserResult {
  deletedUserId: String
  message: String
  error: String
}

type AnonymizeUserResult {
  anonymizedUserId: String
  messageKey: String
  error: String
  steps: AnonymizationSteps
}

type AnonymizationSteps {
  keycloak_deletion: Boolean!
  user_data_anonymization: Boolean!
  profile_picture_removal: Boolean!
  certificate_anonymization: Boolean!
  motivation_letter_anonymization: Boolean!
}

type SetUserAdminOutput {
  success: Boolean!
  messageKey: String!
  error: String
}

type AdminUsersOutput {
  success: Boolean!
  adminUserIds: [String!]!
  messageKey: String!
  error: String
}

type ActionOutput {
  success: Boolean!
  messageKey: String!
  error: String
}

type CreateCertificatesResult {
  success: Boolean!
  count: Int
  certificateType: String
  error: String
  messageKey: String!
}

type LoadParticipationDataResult {
  success: Boolean!
  link: String
  error: String
  messageKey: String!
}

type UpdateAdminStatusResult {
  success: Boolean!
  error: String
  messageKey: String!
}

type GetAdminUsersResult {
  success: Boolean!
  adminUserIds: [String!]!
  messageKey: String!
  error: String
}

